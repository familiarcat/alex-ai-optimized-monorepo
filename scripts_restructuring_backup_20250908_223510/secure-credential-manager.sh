#!/bin/bash

# Alex AI Secure Credential Manager
# Loads credentials from ~/.zshrc and provides them securely to all environments
# Ensures N8N has access to Supabase credentials for bi-directional data flow

set -e

echo "🔐 Alex AI Secure Credential Manager"
echo "===================================="

# Function to load credentials from ~/.zshrc
load_credentials() {
    echo "ℹ️  Loading credentials from ~/.zshrc..."
    
    # Source ~/.zshrc to get environment variables
    if [ -f ~/.zshrc ]; then
        # Extract only environment variable exports from ~/.zshrc
        # This avoids issues with zsh-specific commands
        while IFS= read -r line; do
            if [[ $line == export* ]]; then
                eval "$line" 2>/dev/null || true
            fi
        done < ~/.zshrc
        echo "✅ Credentials loaded from ~/.zshrc"
    else
        echo "❌ ~/.zshrc not found"
        exit 1
    fi
}

# Function to validate required credentials
validate_credentials() {
    echo "ℹ️  Validating required credentials..."
    
    required_vars=(
        "SUPABASE_URL"
        "SUPABASE_ANON_KEY"
        "N8N_URL"
        "N8N_API_KEY"
    )
    
    missing_vars=()
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -eq 0 ]; then
        echo "✅ All required credentials are present"
        return 0
    else
        echo "❌ Missing required credentials:"
        for var in "${missing_vars[@]}"; do
            echo "  - $var"
        done
        return 1
    fi
}

# Function to create environment files for different environments
create_env_files() {
    echo "ℹ️  Creating environment files..."
    
    # Create .env.local for local development
    cat > .env.local << EOF
# Alex AI Local Development Environment
# Generated by secure-credential-manager.sh

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_ANON_KEY}

# N8N Configuration
N8N_URL=${N8N_URL}
N8N_API_KEY=${N8N_API_KEY}

# Optional AI Services
OPENAI_API_KEY=${OPENAI_API_KEY:-}
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}

# Deployment
GITHUB_TOKEN=${GITHUB_TOKEN:-}
VERCEL_TOKEN=${VERCEL_TOKEN:-}
EOF

    # Create .env.production for production
    cat > .env.production << EOF
# Alex AI Production Environment
# Generated by secure-credential-manager.sh

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_ANON_KEY}

# N8N Configuration
N8N_URL=${N8N_URL}
N8N_API_KEY=${N8N_API_KEY}

# Optional AI Services
OPENAI_API_KEY=${OPENAI_API_KEY:-}
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
EOF

    echo "✅ Environment files created"
}

# Function to create Supabase client with service role
create_supabase_client() {
    echo "ℹ️  Creating Supabase client configuration..."
    
    cat > apps/alex-ai-job-search/src/lib/supabase-admin.ts << 'EOF'
// Supabase Admin Client with Service Role Key
// This provides full database access for server-side operations

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  throw new Error('Missing Supabase configuration')
}

export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

export default supabaseAdmin
EOF

    echo "✅ Supabase admin client created"
}

# Function to create N8N credential configuration
create_n8n_credentials() {
    echo "ℹ️  Creating N8N credential configuration..."
    
    cat > n8n-credentials.json << EOF
{
  "supabase": {
    "url": "${SUPABASE_URL}",
    "anon_key": "${SUPABASE_ANON_KEY}",
    "service_role_key": "${SUPABASE_ANON_KEY}"
  },
  "n8n": {
    "url": "${N8N_URL}",
    "api_key": "${N8N_API_KEY}"
  },
  "ai_services": {
    "openai": "${OPENAI_API_KEY:-}",
    "anthropic": "${ANTHROPIC_API_KEY:-}",
    "openrouter": "${OPENROUTER_API_KEY:-}"
  }
}
EOF

    echo "✅ N8N credentials configuration created"
}

# Function to create Supabase tables
create_supabase_tables() {
    echo "ℹ️  Creating Supabase tables..."
    
    cat > scripts/create-supabase-tables.sql << 'EOF'
-- Alex AI Supabase Tables
-- Creates all required tables for the job search application

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Job Opportunities Table
CREATE TABLE IF NOT EXISTS job_opportunities (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    company VARCHAR(255) NOT NULL,
    position VARCHAR(255) NOT NULL,
    location VARCHAR(255),
    remote_option VARCHAR(50),
    salary_range VARCHAR(100),
    description TEXT,
    requirements TEXT,
    benefits TEXT,
    application_url TEXT,
    source VARCHAR(100),
    scraped_at TIMESTAMP WITH TIME ZONE,
    alex_ai_score INTEGER,
    st_louis_area BOOLEAN DEFAULT FALSE,
    st_louis_focus BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Contacts Table
CREATE TABLE IF NOT EXISTS contacts (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    phone VARCHAR(50),
    company VARCHAR(255),
    position VARCHAR(255),
    linkedin_url TEXT,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Applications Table
CREATE TABLE IF NOT EXISTS applications (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    job_id UUID REFERENCES job_opportunities(id) ON DELETE CASCADE,
    status VARCHAR(50) DEFAULT 'pending',
    application_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Crew Memories Table (for MCP knowledge)
CREATE TABLE IF NOT EXISTS crew_memories (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    crew_member VARCHAR(100) NOT NULL,
    knowledge_type VARCHAR(100) NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    tags TEXT[],
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User Analytics Table
CREATE TABLE IF NOT EXISTS user_analytics (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL,
    user_id VARCHAR(255),
    event_type VARCHAR(100) NOT NULL,
    event_data JSONB,
    page_url TEXT,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_job_opportunities_company ON job_opportunities(company);
CREATE INDEX IF NOT EXISTS idx_job_opportunities_position ON job_opportunities(position);
CREATE INDEX IF NOT EXISTS idx_job_opportunities_created_at ON job_opportunities(created_at);
CREATE INDEX IF NOT EXISTS idx_contacts_company ON contacts(company);
CREATE INDEX IF NOT EXISTS idx_applications_job_id ON applications(job_id);
CREATE INDEX IF NOT EXISTS idx_crew_memories_crew_member ON crew_memories(crew_member);
CREATE INDEX IF NOT EXISTS idx_crew_memories_knowledge_type ON crew_memories(knowledge_type);
CREATE INDEX IF NOT EXISTS idx_user_analytics_session_id ON user_analytics(session_id);
CREATE INDEX IF NOT EXISTS idx_user_analytics_timestamp ON user_analytics(timestamp);

-- Enable Row Level Security (RLS)
ALTER TABLE job_opportunities ENABLE ROW LEVEL SECURITY;
ALTER TABLE contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE applications ENABLE ROW LEVEL SECURITY;
ALTER TABLE crew_memories ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_analytics ENABLE ROW LEVEL SECURITY;

-- Create RLS policies (allow all for now, can be restricted later)
CREATE POLICY "Allow all operations on job_opportunities" ON job_opportunities FOR ALL USING (true);
CREATE POLICY "Allow all operations on contacts" ON contacts FOR ALL USING (true);
CREATE POLICY "Allow all operations on applications" ON applications FOR ALL USING (true);
CREATE POLICY "Allow all operations on crew_memories" ON crew_memories FOR ALL USING (true);
CREATE POLICY "Allow all operations on user_analytics" ON user_analytics FOR ALL USING (true);
EOF

    echo "✅ Supabase table creation script generated"
}

# Function to deploy N8N workflows with credentials
deploy_n8n_workflows() {
    echo "ℹ️  Deploying N8N workflows with credentials..."
    
    # Create the main job opportunities workflow
    cat > workflows/alex-ai-jobs-production.json << EOF
{
  "name": "Alex AI Jobs Production",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "jobs",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-get-jobs",
      "name": "GET Jobs Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "alex-ai-jobs-get"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "jobs",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-post-jobs",
      "name": "POST Jobs Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 500],
      "webhookId": "alex-ai-jobs-post"
    },
    {
      "parameters": {
        "operation": "select",
        "table": "job_opportunities",
        "options": {
          "limit": 100
        }
      },
      "id": "supabase-select",
      "name": "Select Jobs from Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "job_opportunities",
        "columns": "company,position,location,remote_option,salary_range,description,requirements,benefits,application_url,source,scraped_at,alex_ai_score,st_louis_area,st_louis_focus"
      },
      "id": "supabase-insert",
      "name": "Insert Job to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 500],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase Credentials"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ \$json }}"
      },
      "id": "respond-success",
      "name": "Respond with Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 400]
    }
  ],
  "connections": {
    "webhook-get-jobs": {
      "main": [
        [
          {
            "node": "supabase-select",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-post-jobs": {
      "main": [
        [
          {
            "node": "supabase-insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "supabase-select": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "supabase-insert": {
      "main": [
        [
          {
            "node": "respond-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
}
EOF

    echo "✅ N8N workflow configuration created"
}

# Function to test the complete setup
test_setup() {
    echo "ℹ️  Testing the complete setup..."
    
    # Test Supabase connection
    echo "Testing Supabase connection..."
    if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_ANON_KEY" ]; then
        echo "✅ Supabase credentials available"
    else
        echo "❌ Supabase credentials missing"
        return 1
    fi
    
    # Test N8N connection
    echo "Testing N8N connection..."
    if [ -n "$N8N_URL" ] && [ -n "$N8N_API_KEY" ]; then
        echo "✅ N8N credentials available"
    else
        echo "❌ N8N credentials missing"
        return 1
    fi
    
    echo "✅ All tests passed"
}

# Main execution
    
    if ! validate_credentials; then
        echo "❌ Credential validation failed"
        exit 1
    fi
    
    create_env_files
    create_supabase_client
    create_n8n_credentials
    create_supabase_tables
    deploy_n8n_workflows
    
    if test_setup; then
        echo ""
        echo "🎉 Secure credential management setup complete!"
        echo ""
        echo "Next steps:"
        echo "1. Run: psql \$NEXT_PUBLIC_SUPABASE_URL -f scripts/create-supabase-tables.sql"
        echo "2. Deploy N8N workflows using the API"
        echo "3. Test the bi-directional data flow"
        echo ""
        echo "All credentials are now securely available to:"
        echo "- Local development environment"
        echo "- Production environment"
        echo "- N8N workflows"
        echo "- Supabase operations"
    else
        echo "❌ Setup test failed"
        exit 1
    fi
}

# Run main function
main "$@"
