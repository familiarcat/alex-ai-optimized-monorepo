#!/bin/bash

# Cursor AI Shell Script Integration System
# Integrates proper shell script formatting into N8N and Supabase

echo "Setting up Cursor AI shell script integration"
echo "============================================="
echo ""

# Function to add shell script rules to Supabase
add_shell_rules_to_supabase() {
    echo "Adding shell script rules to Supabase memory..."
    
    # Add comprehensive shell script formatting rules
    curl -X POST \
      -H "apikey: $SUPABASE_ANON_KEY" \
      -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
      -H "Content-Type: application/json" \
      -d '{
        "crew_member": "Cursor-AI-Integration",
        "mission_id": "cursor-ai-shell-script-rules-001",
        "memory_type": "ai_generation_rules",
        "content": "CURSOR AI SHELL SCRIPT GENERATION RULES - Automatic Formatting\n\n🎯 PURPOSE: Ensure Cursor AI generates proper shell scripts automatically\n📅 Date Created: 2025-09-03\n🔍 Scope: All shell script generation by Cursor AI\n\n📋 MANDATORY RULES FOR CURSOR AI:\n\n🔧 SHELL SCRIPT FORMATTING RULES:\n\n1. ALWAYS use simple echo commands:\n   - Each echo command on its own line\n   - No complex strings or multi-line echo commands\n   - No quotes that span multiple lines\n   - Simple, self-contained commands\n\n2. NEVER use complex formatting:\n   - No multi-line echo commands with quotes\n   - No complex string manipulation in single commands\n   - No quotes that need to be closed across lines\n   - No complex printf statements with special characters\n\n3. ALWAYS follow this pattern:\necho \"Simple text\"\necho \"More simple text\"\necho \"\"\necho \"Status: Working\"\necho \"Complete\"\n\n4. NEVER use this pattern:\necho \"Complex text\nwith multiple lines\nand quotes that span\"\n\n🔧 EXAMPLE OF CORRECT APPROACH:\n#!/bin/bash\n\necho \"Alex AI System Status\"\necho \"====================\"\necho \"\"\necho \"Status: Working\"\necho \"Issues: None\"\necho \"\"\necho \"Complete\"\n\n🔧 EXAMPLE OF INCORRECT APPROACH:\necho \"🎉 MILESTONE: Comprehensive AI System\n=====================================\"\necho \"✅ COMPREHENSIVE AI ECOSYSTEM COMPLETE:\"\necho \"  • 8 Claude Sub-Agents (Technical Implementation)\"\n\n🎯 CURSOR AI INSTRUCTIONS:\n\nWhen generating shell scripts, Cursor AI MUST:\n1. Use simple echo commands only\n2. Keep each command on its own line\n3. Avoid complex string formatting\n4. Never use quotes that span multiple lines\n5. Test commands before including in scripts\n6. Use the simple working example as a template\n\nThis ensures all generated shell scripts work without dquote> issues.",
        "importance": "critical"
      }' \
      "$SUPABASE_URL/rest/v1/crew_memories"
    
    echo "✅ Shell script rules added to Supabase memory"
}

# Function to create N8N workflow for shell script validation
create_n8n_shell_validation_workflow() {
    echo "Creating N8N workflow for shell script validation..."
    
    # Create workflow configuration
    cat > n8n-shell-validation-workflow.json << 'EOF'
{
  "name": "Cursor AI Shell Script Validation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "value": "shell-script-formatting"
        }
      },
      "name": "Shell Script Rule Check",
      "type": "n8n-nodes-base.if",
      "position": [240, 300]
    },
    {
      "parameters": {
        "content": "Shell script generated by Cursor AI must follow simple formatting rules:\n1. Each echo command on its own line\n2. No complex strings or multi-line echo commands\n3. No quotes that span multiple lines\n4. Use simple, self-contained commands\n\nExample:\necho \"Simple text\"\necho \"More text\"\necho \"Complete\""
      },
      "name": "Formatting Rules",
      "type": "n8n-nodes-base.stickyNote",
      "position": [240, 100]
    },
    {
      "parameters": {
        "content": "Generated shell script follows proper formatting rules"
      },
      "name": "Validation Success",
      "type": "n8n-nodes-base.stickyNote",
      "position": [460, 200]
    },
    {
      "parameters": {
        "content": "Generated shell script needs formatting fixes"
      },
      "name": "Validation Failure",
      "type": "n8n-nodes-base.stickyNote",
      "position": [460, 400]
    }
  ],
  "connections": {
    "Shell Script Rule Check": {
      "main": [
        [
          {
            "node": "Validation Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
EOF
    
    echo "✅ N8N workflow configuration created"
}

# Function to create Cursor AI integration script
create_cursor_ai_integration() {
    echo "Creating Cursor AI integration script..."
    
    cat > scripts/cursor-ai-shell-helper.sh << 'EOF'
#!/bin/bash

# Cursor AI Shell Script Helper
# Provides proper shell script templates for Cursor AI

echo "Cursor AI Shell Script Helper"
echo "============================="
echo ""

# Function to generate proper shell script template
generate_shell_template() {
    local script_name="$1"
    
    cat > "$script_name" << 'TEMPLATE_EOF'
#!/bin/bash

# Generated by Cursor AI with proper formatting
echo "Script starting"
echo "==============="
echo ""
echo "Status: Running"
echo "Progress: 0%"
echo ""
echo "Processing..."
echo "Status: Complete"
echo ""
echo "Script finished"
TEMPLATE_EOF
    
    chmod +x "$script_name"
    echo "✅ Generated proper shell script: $script_name"
}

# Function to validate shell script
validate_shell_script() {
    local script="$1"
    
    echo "Validating: $script"
    
    # Check for problematic patterns
    if grep -q 'echo.*".*$' "$script" && grep -A1 'echo.*".*$' "$script" | grep -q 'echo'; then
        echo "❌ Multi-line echo detected"
        return 1
    fi
    
    if grep -q 'echo.*"[^"]*$' "$script"; then
        echo "❌ Unclosed quote detected"
        return 1
    fi
    
    echo "✅ Script validation passed"
    return 0
}

# Main execution
main() {
    echo "Cursor AI Shell Script Helper loaded"
    echo "Available functions:"
    echo "  generate_shell_template <filename>"
    echo "  validate_shell_script <filename>"
}

main "$@"
EOF
    
    chmod +x scripts/cursor-ai-shell-helper.sh
    echo "✅ Cursor AI integration script created"
}

# Function to create documentation for Cursor AI
create_cursor_ai_documentation() {
    echo "Creating Cursor AI documentation..."
    
    cat > CURSOR_AI_SHELL_SCRIPT_GUIDE.md << 'EOF'
# Cursor AI Shell Script Generation Guide

## 🎯 Purpose
This guide ensures Cursor AI generates proper shell scripts automatically without causing dquote> issues.

## 📋 Mandatory Rules

### ✅ ALWAYS DO:
- Use simple echo commands
- Each echo command on its own line
- No complex strings or multi-line echo commands
- No quotes that span multiple lines
- Simple, self-contained commands

### ❌ NEVER DO:
- Complex multi-line echo commands
- Quotes that span multiple lines
- Complex string manipulation in single commands
- Complex printf statements with special characters

## 🔧 Correct Template

```bash
#!/bin/bash

echo "Script starting"
echo "==============="
echo ""
echo "Status: Running"
echo "Progress: 0%"
echo ""
echo "Processing..."
echo "Status: Complete"
echo ""
echo "Script finished"
```

## 🔧 Incorrect Template

```bash
#!/bin/bash

echo "🎉 MILESTONE: Comprehensive AI System
====================================="
echo "✅ COMPREHENSIVE AI ECOSYSTEM COMPLETE:"
echo "  • 8 Claude Sub-Agents (Technical Implementation)"
```

## 🎯 Integration Points

1. **Supabase Memory**: Shell script rules stored in collective memory
2. **N8N Workflows**: Validation workflows for generated scripts
3. **Cursor AI Helper**: Helper script for proper template generation
4. **Documentation**: This guide for reference

## 🚀 Usage

When generating shell scripts, Cursor AI should:
1. Reference this guide
2. Use the correct template
3. Validate generated scripts
4. Follow simple formatting rules

This ensures all generated shell scripts work without dquote> issues.
EOF
    
    echo "✅ Cursor AI documentation created"
}

# Main execution
main() {
    echo "🚀 Initializing Cursor AI Shell Script Integration"
    echo ""
    
    # Add rules to Supabase
    add_shell_rules_to_supabase
    echo ""
    
    # Create N8N workflow
    create_n8n_shell_validation_workflow
    echo ""
    
    # Create Cursor AI integration
    create_cursor_ai_integration
    echo ""
    
    # Create documentation
    create_cursor_ai_documentation
    echo ""
    
    echo "🎯 Cursor AI Shell Script Integration Complete!"
    echo "=============================================="
    echo ""
    echo "✅ Shell script rules added to Supabase memory"
    echo "✅ N8N workflow configuration created"
    echo "✅ Cursor AI integration script created"
    echo "✅ Documentation created"
    echo ""
    echo "🚀 Cursor AI will now generate proper shell scripts automatically!"
}

# Run main function
main "$@"
