name: Unit Tests for N8N to Cursor AI Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install any required dependencies here
        # pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        cd scripts/python/unit_tests
        python run_all_tests.py
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: scripts/python/unit_tests/comprehensive_unit_test_results_*.json
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest test results file
          const testDir = 'scripts/python/unit_tests';
          const files = fs.readdirSync(testDir);
          const resultFile = files.find(f => f.startsWith('comprehensive_unit_test_results_'));
          
          if (resultFile) {
            const results = JSON.parse(fs.readFileSync(path.join(testDir, resultFile), 'utf8'));
            const overall = results.overall_results;
            
            const comment = `## üß™ Unit Test Results
            
            **Status:** ${overall.overall_status === 'PASSED' ? '‚úÖ PASSED' : '‚ùå FAILED'}
            
            **Summary:**
            - Total Tests: ${overall.total_tests}
            - Passed: ${overall.total_tests - overall.total_failures - overall.total_errors}
            - Failed: ${overall.total_failures}
            - Errors: ${overall.total_errors}
            - Success Rate: ${overall.success_rate.toFixed(1)}%
            
            **Coverage:** ${results.coverage_report.coverage_percentage.toFixed(1)}% (${results.coverage_report.coverage_status})
            
            **Test Suites:**
            ${Object.entries(results.test_suites).map(([name, suite]) => 
              `- ${suite.success ? '‚úÖ' : '‚ùå'} ${name}: ${suite.tests_run} tests, ${suite.failures} failures, ${suite.errors} errors`
            ).join('\n')}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Run integration tests
      run: |
        cd scripts/python
        python test_rag_integration_system.py
        python test_n8n_rag_workflows.py
    
    - name: Generate test report
      run: |
        cd scripts/python
        python generate_rag_test_report.py
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          scripts/python/rag_integration_test_results_*.json
          scripts/python/n8n_rag_workflow_test_results_*.json
          scripts/python/comprehensive_rag_test_report_*.json

  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security tests
      run: |
        echo "üîí Running security tests..."
        # Add security testing commands here
        # Example: bandit, safety, etc.
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests..."
        # Add performance testing commands here
        # Example: load testing, benchmark tests, etc.
    
    - name: Generate performance report
      run: |
        echo "üìä Generating performance report..."
        # Generate performance metrics and reports
