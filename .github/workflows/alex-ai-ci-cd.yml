name: Alex AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Load credentials from ~/.zshrc and set up environment
  setup-credentials:
    runs-on: ubuntu-latest
    outputs:
      credentials-loaded: ${{ steps.load-creds.outputs.success }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load Alex AI Credentials
        id: load-creds
        run: |
          echo "🔐 Loading Alex AI credentials from ~/.zshrc..."
          
          # Create a mock ~/.zshrc for CI/CD with secure environment variables
          cat > ~/.zshrc << 'EOF'
          # Alex AI CI/CD Credentials
          # These are loaded from GitHub Secrets in production
          export NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"
          export NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"
          export N8N_URL="${{ secrets.N8N_URL }}"
          export N8N_API_KEY="${{ secrets.N8N_API_KEY }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          export OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          export ALEX_AI_ENVIRONMENT="production"
          export ALEX_AI_VERSION="${{ github.sha }}"
          EOF
          
          # Source the credentials
          source ~/.zshrc
          
          # Verify credentials are loaded
          if [ -n "$NEXT_PUBLIC_SUPABASE_URL" ] && [ -n "$N8N_URL" ]; then
            echo "✅ Credentials loaded successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to load credentials"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Run Universal Credentials Loader
        run: |
          chmod +x scripts/load-credentials.sh
          ./scripts/load-credentials.sh

  # Install dependencies and run tests
  test:
    needs: setup-credentials
    if: needs.setup-credentials.outputs.credentials-loaded == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [alex-ai-job-search]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Load Alex AI Credentials
        run: |
          # Load credentials for testing
          source ~/.zshrc || true
          ./scripts/load-credentials.sh

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          N8N_URL: ${{ secrets.N8N_URL }}
          N8N_API_KEY: ${{ secrets.N8N_API_KEY }}

      - name: Build application
        run: pnpm run build
        working-directory: apps/${{ matrix.app }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          N8N_URL: ${{ secrets.N8N_URL }}
          N8N_API_KEY: ${{ secrets.N8N_API_KEY }}

  # Deploy to production
  deploy:
    needs: [setup-credentials, test]
    if: github.ref == 'refs/heads/main' && needs.setup-credentials.outputs.credentials-loaded == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Load Alex AI Credentials
        run: |
          # Load production credentials
          source ~/.zshrc || true
          ./scripts/load-credentials.sh

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          N8N_URL: ${{ secrets.N8N_URL }}
          N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
          ALEX_AI_ENVIRONMENT: production

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/alex-ai-job-search
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Notify N8N Federation Crew
        run: |
          curl -X POST "${{ secrets.N8N_URL }}/webhook/federation-mission" \
            -H "X-N8N-API-KEY: ${{ secrets.N8N_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "action": "deployment_complete",
              "environment": "production",
              "version": "${{ github.sha }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'",
              "source": "github_actions"
            }'

  # Security audit
  security-audit:
    needs: setup-credentials
    if: needs.setup-credentials.outputs.credentials-loaded == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          chmod +x scripts/security-audit.sh
          ./scripts/security-audit.sh

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
