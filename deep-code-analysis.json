{
  "timestamp": "2025-09-08T22:16:26.239937",
  "total_scripts": 162,
  "script_analyses": {
    "scripts/n8n-cicd-sync.sh": {
      "file_name": "n8n-cicd-sync.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_prerequisites",
          "parameters": [],
          "lines": 20,
          "complexity": 4,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_n8n_connection",
          "parameters": [],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "N8N"
          ],
          "variables": [
            "response",
            "http_code"
          ]
        },
        {
          "name": "backup_workflows",
          "parameters": [],
          "lines": 15,
          "complexity": 3,
          "calls": [],
          "variables": [
            "response"
          ]
        },
        {
          "name": "validate_workflow",
          "parameters": [],
          "lines": 26,
          "complexity": 4,
          "calls": [
            "fields"
          ],
          "variables": [
            "workflow_file",
            "workflow_name"
          ]
        },
        {
          "name": "get_workflow_id",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [
            "select"
          ],
          "variables": [
            "workflow_name",
            "name"
          ]
        },
        {
          "name": "deploy_workflow",
          "parameters": [],
          "lines": 66,
          "complexity": 4,
          "calls": [
            "workflow_name",
            "workflow_name"
          ],
          "variables": [
            "workflow_file",
            "workflow_name",
            "existing_id",
            "workflow_data",
            "response",
            "http_code",
            "response",
            "http_code"
          ]
        },
        {
          "name": "test_workflow",
          "parameters": [],
          "lines": 29,
          "complexity": 4,
          "calls": [
            "select",
            "select"
          ],
          "variables": [
            "workflow_name",
            "webhook_path",
            "name",
            "type",
            "test_response",
            "http_code"
          ]
        },
        {
          "name": "generate_deployment_report",
          "parameters": [],
          "lines": 50,
          "complexity": 4,
          "calls": [
            "Yes"
          ],
          "variables": [
            "report_file",
            "workflow_name"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 48,
          "complexity": 6,
          "calls": [
            "else",
            "else"
          ],
          "variables": [
            "processed_count",
            "failed_count",
            "workflow_name"
          ]
        }
      ],
      "variables": [
        "N8N_URL",
        "N8N_API_KEY",
        "WORKFLOWS_DIR",
        "BACKUP_DIR",
        "TARGET_ENV",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "response",
        "http_code",
        "response",
        "workflow_file",
        "workflow_name",
        "workflow_name",
        "name",
        "workflow_file",
        "workflow_name",
        "existing_id",
        "workflow_data",
        "response",
        "http_code",
        "response",
        "http_code",
        "workflow_name",
        "webhook_path",
        "name",
        "type",
        "test_response",
        "http_code",
        "report_file",
        "workflow_name",
        "processed_count",
        "failed_count",
        "workflow_name"
      ],
      "imports": [
        "+",
        "Monitor",
        "Collect",
        "Optimize",
        "Review"
      ],
      "classes": [],
      "total_lines": 333,
      "code_lines": 229,
      "complexity_score": 29,
      "purpose": "Synchronization and data management"
    },
    "scripts/get-and-update-claude-key.sh": {
      "file_name": "get-and-update-claude-key.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "CURRENT_KEY",
        "ANTHROPIC_API_KEY",
        "TEST_RESULT",
        "TEST_RESULT",
        "ANTHROPIC_API_KEY",
        "ANTHROPIC_API_KEY"
      ],
      "imports": [
        "~/.zshrc",
        "Need",
        "Go",
        "Sign",
        "Click",
        "Name",
        "Copy",
        "Exiting.\"",
        "~/.zshrc",
        "Error:\""
      ],
      "classes": [],
      "total_lines": 129,
      "code_lines": 106,
      "complexity_score": 11,
      "purpose": "General utility script"
    },
    "scripts/greg-community-intelligence-dual-milestone-push.sh": {
      "file_name": "greg-community-intelligence-dual-milestone-push.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "print_status",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_section",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "PROJECT_MILESTONE",
        "PROJECT_VERSION",
        "ALEXAI_MILESTONE",
        "ALEXAI_VERSION",
        "MILESTONE_DATE",
        "PROJECT_FILES",
        "ALEXAI_FILES",
        "ARCHIVE_NAME",
        "TEMP_DIR",
        "DUAL_SUMMARY",
        "Summary",
        "DUAL_LOG"
      ],
      "imports": [
        "Build",
        "Extract",
        "Continue",
        "Achieve"
      ],
      "classes": [],
      "total_lines": 320,
      "code_lines": 253,
      "complexity_score": 14,
      "purpose": "General utility script"
    },
    "scripts/intelligent-script-discovery.py": {
      "file_name": "intelligent-script-discovery.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 44,
          "complexity": 7,
          "calls": [
            "ArgumentParser",
            "add_argument",
            "add_argument",
            "add_argument",
            "add_argument",
            "add_argument",
            "parse_args",
            "IntelligentScriptDiscovery",
            "print",
            "discover_script",
            "print",
            "print",
            "print",
            "print",
            "print",
            "save_recommendation",
            "print",
            "print",
            "create_script_from_recommendation",
            "print",
            "print"
          ],
          "variables": [
            "parser",
            "args",
            "discovery",
            "recommendation"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "scripts_dir"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "discover_script",
          "parameters": [
            "self",
            "purpose",
            "category",
            "requirements"
          ],
          "lines": 28,
          "complexity": 6,
          "calls": [
            "load_analysis",
            "find_similar_scripts",
            "get",
            "create_new_script_recommendation",
            "create_new_script_recommendation",
            "extend_existing_script_recommendation",
            "error",
            "create_new_script_recommendation",
            "use_as_template_recommendation",
            "create_new_script_recommendation"
          ],
          "variables": [
            "analysis",
            "similar_scripts",
            "most_similar",
            "similarity_score"
          ]
        },
        {
          "name": "find_similar_scripts",
          "parameters": [
            "self",
            "purpose",
            "category",
            "analysis"
          ],
          "lines": 14,
          "complexity": 3,
          "calls": [
            "get",
            "sort",
            "calculate_similarity",
            "append"
          ],
          "variables": [
            "similar_scripts",
            "similarity_score"
          ]
        },
        {
          "name": "calculate_similarity",
          "parameters": [
            "self",
            "purpose",
            "script"
          ],
          "lines": 39,
          "complexity": 11,
          "calls": [
            "lower",
            "lower",
            "lower",
            "any",
            "set",
            "set",
            "set",
            "set",
            "set",
            "min",
            "split",
            "split",
            "get",
            "split",
            "get",
            "any",
            "get",
            "get",
            "len",
            "len",
            "len",
            "len",
            "split",
            "intersection",
            "union",
            "intersection",
            "union"
          ],
          "variables": [
            "score",
            "purpose_lower",
            "script_name",
            "script_purpose",
            "purpose_keywords",
            "purpose_words",
            "script_purpose_words",
            "script_tags",
            "purpose_tags",
            "script_functions",
            "purpose_similarity",
            "tag_similarity"
          ]
        },
        {
          "name": "extend_existing_script_recommendation",
          "parameters": [
            "self",
            "existing_script",
            "purpose",
            "requirements"
          ],
          "lines": 15,
          "complexity": 1,
          "calls": [
            "ScriptRecommendation"
          ],
          "variables": []
        },
        {
          "name": "use_as_template_recommendation",
          "parameters": [
            "self",
            "template_script",
            "purpose",
            "requirements"
          ],
          "lines": 17,
          "complexity": 1,
          "calls": [
            "generate_template_content",
            "ScriptRecommendation"
          ],
          "variables": [
            "template_content"
          ]
        },
        {
          "name": "create_new_script_recommendation",
          "parameters": [
            "self",
            "purpose",
            "category",
            "requirements"
          ],
          "lines": 17,
          "complexity": 1,
          "calls": [
            "generate_new_script_template",
            "ScriptRecommendation"
          ],
          "variables": [
            "template_content"
          ]
        },
        {
          "name": "generate_template_content",
          "parameters": [
            "self",
            "template_script",
            "purpose",
            "requirements"
          ],
          "lines": 15,
          "complexity": 2,
          "calls": [
            "modify_template_for_purpose",
            "open",
            "read",
            "error",
            "generate_new_script_template",
            "get"
          ],
          "variables": [
            "template_path",
            "modified_content",
            "template_content"
          ]
        },
        {
          "name": "modify_template_for_purpose",
          "parameters": [
            "self",
            "template_content",
            "purpose",
            "requirements"
          ],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "replace",
            "replace",
            "replace",
            "replace",
            "replace",
            "lower"
          ],
          "variables": [
            "modified_content",
            "purpose_snake",
            "modified_content",
            "modified_content"
          ]
        },
        {
          "name": "generate_new_script_template",
          "parameters": [
            "self",
            "purpose",
            "category",
            "requirements"
          ],
          "lines": 13,
          "complexity": 4,
          "calls": [
            "replace",
            "get_file_extension_for_category",
            "generate_python_template",
            "replace",
            "generate_bash_template",
            "generate_javascript_template",
            "generate_python_template",
            "lower"
          ],
          "variables": [
            "purpose_snake",
            "file_extension"
          ]
        },
        {
          "name": "get_file_extension_for_category",
          "parameters": [
            "self",
            "category"
          ],
          "lines": 13,
          "complexity": 1,
          "calls": [
            "get"
          ],
          "variables": [
            "category_extensions"
          ]
        },
        {
          "name": "generate_python_template",
          "parameters": [
            "self",
            "purpose",
            "requirements",
            "purpose_snake"
          ],
          "lines": 55,
          "complexity": 1,
          "calls": [
            "lower"
          ],
          "variables": []
        },
        {
          "name": "generate_bash_template",
          "parameters": [
            "self",
            "purpose",
            "requirements",
            "purpose_snake"
          ],
          "lines": 64,
          "complexity": 1,
          "calls": [
            "lower"
          ],
          "variables": []
        },
        {
          "name": "generate_javascript_template",
          "parameters": [
            "self",
            "purpose",
            "requirements",
            "purpose_snake"
          ],
          "lines": 66,
          "complexity": 1,
          "calls": [
            "lower"
          ],
          "variables": []
        },
        {
          "name": "load_analysis",
          "parameters": [
            "self"
          ],
          "lines": 10,
          "complexity": 3,
          "calls": [
            "exists",
            "error",
            "open",
            "load"
          ],
          "variables": []
        },
        {
          "name": "save_recommendation",
          "parameters": [
            "self",
            "recommendation",
            "purpose"
          ],
          "lines": 30,
          "complexity": 3,
          "calls": [
            "exists",
            "append",
            "info",
            "isoformat",
            "open",
            "dump",
            "error",
            "open",
            "load",
            "now"
          ],
          "variables": [
            "recommendation_data",
            "recommendations_file",
            "recommendations",
            "recommendations"
          ]
        },
        {
          "name": "create_script_from_recommendation",
          "parameters": [
            "self",
            "recommendation",
            "output_path"
          ],
          "lines": 24,
          "complexity": 4,
          "calls": [
            "makedirs",
            "endswith",
            "info",
            "warning",
            "error",
            "dirname",
            "open",
            "write",
            "chmod"
          ],
          "variables": []
        }
      ],
      "variables": [
        "logger",
        "parser",
        "args",
        "discovery",
        "recommendation",
        "similar_scripts",
        "score",
        "purpose_lower",
        "script_name",
        "script_purpose",
        "purpose_keywords",
        "purpose_words",
        "script_purpose_words",
        "script_tags",
        "purpose_tags",
        "script_functions",
        "template_content",
        "template_content",
        "template_path",
        "modified_content",
        "purpose_snake",
        "modified_content",
        "purpose_snake",
        "file_extension",
        "category_extensions",
        "analysis",
        "similar_scripts",
        "most_similar",
        "similarity_score",
        "similarity_score",
        "purpose_similarity",
        "tag_similarity",
        "modified_content",
        "modified_content",
        "recommendation_data",
        "recommendations_file",
        "recommendations",
        "template_content",
        "recommendations"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "subprocess",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "logging",
        "dataclasses.dataclass",
        "argparse"
      ],
      "classes": [
        "ScriptRecommendation",
        "IntelligentScriptDiscovery"
      ],
      "total_lines": 544,
      "code_lines": 396,
      "complexity_score": 36,
      "purpose": "General utility script"
    },
    "scripts/update-claude-api.sh": {
      "file_name": "update-claude-api.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [],
      "imports": [
        "Go",
        "Navigate",
        "Create",
        "Copy",
        "Update"
      ],
      "classes": [],
      "total_lines": 63,
      "code_lines": 46,
      "complexity_score": 6,
      "purpose": "General utility script"
    },
    "scripts/optimize-turborepo-structure.sh": {
      "file_name": "optimize-turborepo-structure.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "BACKUP_DIR",
        "ROOT_FILES"
      ],
      "imports": [
        "Move",
        "Remove",
        "Move",
        "Move",
        "Move",
        "Create",
        "Move",
        "Move",
        "Move",
        "Move",
        "Move",
        "-maxdepth",
        "Test",
        "Update",
        "Update",
        "Commit"
      ],
      "classes": [],
      "total_lines": 229,
      "code_lines": 164,
      "complexity_score": 41,
      "purpose": "General utility script"
    },
    "scripts/setup-supabase-with-credentials.sh": {
      "file_name": "setup-supabase-with-credentials.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "execute_sql",
          "parameters": [],
          "lines": 22,
          "complexity": 2,
          "calls": [],
          "variables": [
            "sql",
            "description",
            "response"
          ]
        },
        {
          "name": "create_tables_direct",
          "parameters": [],
          "lines": 83,
          "complexity": 2,
          "calls": [
            "job_opportunities",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW",
            "NOW",
            "contacts",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW",
            "NOW",
            "applications",
            "uuid_generate_v4",
            "job_opportunities",
            "VARCHAR",
            "NOW",
            "NOW",
            "NOW",
            "Table",
            "crew_memories",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW",
            "NOW",
            "user_analytics",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW"
          ],
          "variables": [
            "sql_script"
          ]
        },
        {
          "name": "create_indexes",
          "parameters": [],
          "lines": 19,
          "complexity": 2,
          "calls": [
            "job_opportunities",
            "job_opportunities",
            "job_opportunities",
            "contacts",
            "applications",
            "crew_memories",
            "crew_memories",
            "user_analytics",
            "user_analytics"
          ],
          "variables": [
            "indexes_sql"
          ]
        },
        {
          "name": "setup_rls",
          "parameters": [],
          "lines": 31,
          "complexity": 2,
          "calls": [
            "Security",
            "policies",
            "USING",
            "USING",
            "USING",
            "USING",
            "USING"
          ],
          "variables": [
            "rls_sql"
          ]
        },
        {
          "name": "test_tables",
          "parameters": [],
          "lines": 20,
          "complexity": 4,
          "calls": [],
          "variables": [
            "tables",
            "response",
            "select",
            "limit"
          ]
        },
        {
          "name": "insert_test_data",
          "parameters": [],
          "lines": 58,
          "complexity": 3,
          "calls": [],
          "variables": [
            "test_job",
            "response",
            "return",
            "test_memory",
            "response",
            "return"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 30,
          "complexity": 2,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "IFS",
        "line",
        "sql",
        "description",
        "response",
        "sql_script",
        "indexes_sql",
        "rls_sql",
        "tables",
        "response",
        "select",
        "limit",
        "test_job",
        "response",
        "return",
        "test_memory",
        "response",
        "return"
      ],
      "imports": [
        "VARCHAR(100),",
        "Louis,"
      ],
      "classes": [],
      "total_lines": 307,
      "code_lines": 234,
      "complexity_score": 13,
      "purpose": "General utility script"
    },
    "scripts/script-consolidation-plan.py": {
      "file_name": "script-consolidation-plan.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 35,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "ScriptConsolidationPlan",
            "create_consolidation_plan",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "input",
            "print",
            "print",
            "open",
            "dump",
            "lower",
            "execute_consolidation",
            "print",
            "print",
            "len",
            "len"
          ],
          "variables": [
            "consolidator",
            "plan",
            "response"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "analysis_file"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "load_analysis"
          ],
          "variables": []
        },
        {
          "name": "load_analysis",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 2,
          "calls": [
            "open",
            "load",
            "error"
          ],
          "variables": []
        },
        {
          "name": "create_consolidation_plan",
          "parameters": [
            "self"
          ],
          "lines": 82,
          "complexity": 1,
          "calls": [
            "info",
            "analyze_duplicates",
            "analyze_redundant_scripts",
            "create_consolidation_mapping",
            "get",
            "calculate_scripts_after_consolidation",
            "calculate_space_saved"
          ],
          "variables": [
            "new_structure"
          ]
        },
        {
          "name": "analyze_duplicates",
          "parameters": [
            "self"
          ],
          "lines": 15,
          "complexity": 4,
          "calls": [
            "get",
            "get",
            "get",
            "len",
            "extend",
            "info"
          ],
          "variables": [
            "duplicates",
            "scripts",
            "keep_script",
            "remove_scripts"
          ]
        },
        {
          "name": "analyze_redundant_scripts",
          "parameters": [
            "self"
          ],
          "lines": 12,
          "complexity": 3,
          "calls": [
            "get",
            "get",
            "get",
            "get",
            "info"
          ],
          "variables": [
            "redundant",
            "category",
            "scripts",
            "count"
          ]
        },
        {
          "name": "create_consolidation_mapping",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 3,
          "calls": [
            "get",
            "items",
            "get",
            "len",
            "group_scripts_by_subcategory",
            "len",
            "get_consolidation_strategy",
            "len"
          ],
          "variables": [
            "categories",
            "scripts",
            "subcategory_groups"
          ]
        },
        {
          "name": "group_scripts_by_subcategory",
          "parameters": [
            "self",
            "scripts"
          ],
          "lines": 16,
          "complexity": 3,
          "calls": [
            "get",
            "get",
            "determine_subcategory",
            "append"
          ],
          "variables": [
            "groups",
            "name",
            "purpose",
            "subcategory"
          ]
        },
        {
          "name": "determine_subcategory",
          "parameters": [
            "self",
            "name",
            "purpose"
          ],
          "lines": 43,
          "complexity": 23,
          "calls": [
            "lower",
            "lower"
          ],
          "variables": [
            "name_lower",
            "purpose_lower"
          ]
        },
        {
          "name": "get_consolidation_strategy",
          "parameters": [
            "self",
            "category",
            "script_count"
          ],
          "lines": 10,
          "complexity": 4,
          "calls": [],
          "variables": []
        },
        {
          "name": "calculate_scripts_after_consolidation",
          "parameters": [
            "self"
          ],
          "lines": 10,
          "complexity": 1,
          "calls": [
            "get",
            "len",
            "int"
          ],
          "variables": [
            "total_before",
            "duplicates_removed",
            "remaining_scripts",
            "consolidated_scripts"
          ]
        },
        {
          "name": "calculate_space_saved",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "get",
            "int"
          ],
          "variables": [
            "total_size"
          ]
        },
        {
          "name": "create_consolidated_script",
          "parameters": [
            "self",
            "scripts",
            "output_path"
          ],
          "lines": 21,
          "complexity": 5,
          "calls": [
            "makedirs",
            "determine_script_type",
            "dirname",
            "create_consolidated_python_script",
            "error",
            "create_consolidated_bash_script",
            "create_consolidated_javascript_script"
          ],
          "variables": [
            "script_type"
          ]
        },
        {
          "name": "determine_script_type",
          "parameters": [
            "self",
            "scripts"
          ],
          "lines": 13,
          "complexity": 5,
          "calls": [
            "get",
            "endswith",
            "endswith",
            "max",
            "get",
            "endswith",
            "items",
            "get",
            "get"
          ],
          "variables": [
            "types",
            "name"
          ]
        },
        {
          "name": "create_consolidated_python_script",
          "parameters": [
            "self",
            "scripts",
            "output_path"
          ],
          "lines": 40,
          "complexity": 3,
          "calls": [
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "error",
            "get",
            "write",
            "write",
            "write",
            "write",
            "write",
            "replace",
            "get",
            "replace"
          ],
          "variables": [
            "script_name"
          ]
        },
        {
          "name": "create_consolidated_bash_script",
          "parameters": [
            "self",
            "scripts",
            "output_path"
          ],
          "lines": 44,
          "complexity": 3,
          "calls": [
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "error",
            "get",
            "replace",
            "write",
            "write",
            "write",
            "write",
            "write",
            "replace",
            "get"
          ],
          "variables": [
            "script_name",
            "func_name"
          ]
        },
        {
          "name": "create_consolidated_javascript_script",
          "parameters": [
            "self",
            "scripts",
            "output_path"
          ],
          "lines": 48,
          "complexity": 3,
          "calls": [
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "error",
            "get",
            "replace",
            "write",
            "write",
            "write",
            "write",
            "write",
            "replace",
            "get"
          ],
          "variables": [
            "script_name",
            "func_name"
          ]
        },
        {
          "name": "execute_consolidation",
          "parameters": [
            "self",
            "plan"
          ],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "info",
            "create_new_directory_structure",
            "remove_duplicate_scripts",
            "consolidate_scripts",
            "create_backup",
            "info",
            "error"
          ],
          "variables": []
        },
        {
          "name": "create_new_directory_structure",
          "parameters": [
            "self",
            "structure"
          ],
          "lines": 9,
          "complexity": 3,
          "calls": [
            "items",
            "makedirs",
            "keys",
            "makedirs"
          ],
          "variables": [
            "category_dir",
            "subcategory_dir"
          ]
        },
        {
          "name": "remove_duplicate_scripts",
          "parameters": [
            "self"
          ],
          "lines": 7,
          "complexity": 3,
          "calls": [
            "exists",
            "remove",
            "info"
          ],
          "variables": [
            "script_path"
          ]
        },
        {
          "name": "consolidate_scripts",
          "parameters": [
            "self",
            "plan"
          ],
          "lines": 10,
          "complexity": 4,
          "calls": [
            "items",
            "get",
            "items",
            "len",
            "create_consolidated_script",
            "info"
          ],
          "variables": [
            "subcategory_groups",
            "output_path"
          ]
        },
        {
          "name": "create_backup",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "copytree",
            "info",
            "strftime",
            "now"
          ],
          "variables": [
            "backup_dir"
          ]
        }
      ],
      "variables": [
        "logger",
        "consolidator",
        "plan",
        "response",
        "new_structure",
        "duplicates",
        "redundant",
        "categories",
        "groups",
        "name_lower",
        "purpose_lower",
        "total_before",
        "duplicates_removed",
        "remaining_scripts",
        "consolidated_scripts",
        "total_size",
        "types",
        "backup_dir",
        "category",
        "scripts",
        "count",
        "scripts",
        "name",
        "purpose",
        "subcategory",
        "script_type",
        "name",
        "category_dir",
        "script_path",
        "subcategory_groups",
        "scripts",
        "subcategory_groups",
        "subcategory_dir",
        "keep_script",
        "remove_scripts",
        "script_name",
        "script_name",
        "func_name",
        "script_name",
        "func_name",
        "output_path"
      ],
      "imports": [
        "os",
        "json",
        "shutil",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "logging"
      ],
      "classes": [
        "ScriptConsolidationPlan"
      ],
      "total_lines": 522,
      "code_lines": 407,
      "complexity_score": 61,
      "purpose": "General utility script"
    },
    "scripts/optimize-packages-structure.sh": {
      "file_name": "optimize-packages-structure.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "BACKUP_DIR",
        "formatDate",
        "string",
        "generateId",
        "string",
        "validateEmail",
        "boolean",
        "emailRegex",
        "sleep",
        "resolve",
        "capitalize",
        "string",
        "ALEX_AI_VERSION",
        "CREW_MEMBERS",
        "SYSTEM_STATUS",
        "TASK_TYPES",
        "alex_ai_shared",
        "variant",
        "size",
        "disabled",
        "baseClasses",
        "variantClasses",
        "sizeClasses",
        "className",
        "onClick",
        "disabled",
        "className",
        "className",
        "className",
        "alex_ai_ui"
      ],
      "imports": [
        "Commander",
        "Beverly",
        "**Fixed",
        "**Moved",
        "**Removed",
        "**Consolidated",
        "**Standardized",
        "**Created",
        "**Enhanced",
        "**Optimized",
        "Test",
        "Update",
        "Implement",
        "Add",
        "Deploy",
        "Run",
        "Run",
        "Review",
        "Update"
      ],
      "classes": [],
      "total_lines": 715,
      "code_lines": 573,
      "complexity_score": 18,
      "purpose": "General utility script"
    },
    "scripts/milestone-push.sh": {
      "file_name": "milestone-push.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "print_status",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_milestone",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "get_timestamp",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_milestone_message",
          "parameters": [],
          "lines": 54,
          "complexity": 3,
          "calls": [],
          "variables": [
            "milestone_title",
            "timestamp",
            "commit_file"
          ]
        },
        {
          "name": "milestone_push",
          "parameters": [],
          "lines": 39,
          "complexity": 5,
          "calls": [],
          "variables": [
            "milestone_title",
            "commit_file"
          ]
        },
        {
          "name": "show_help",
          "parameters": [],
          "lines": 18,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 13,
          "complexity": 3,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "milestone_title",
        "timestamp",
        "commit_file",
        "milestone_title",
        "commit_file"
      ],
      "imports": [
        "tracking",
        "management",
        "data",
        "management!",
        "print_info",
        "Stage",
        "Create",
        "Commit",
        "Push"
      ],
      "classes": [],
      "total_lines": 177,
      "code_lines": 124,
      "complexity_score": 12,
      "purpose": "General utility script"
    },
    "scripts/milestone-push-system.sh": {
      "file_name": "milestone-push-system.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "create_milestone_summary",
          "parameters": [],
          "lines": 34,
          "complexity": 3,
          "calls": [],
          "variables": [
            "milestone_name",
            "description",
            "current_commit",
            "current_branch",
            "commit_count"
          ]
        },
        {
          "name": "create_alexai_base_package",
          "parameters": [],
          "lines": 75,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_project_milestone_package",
          "parameters": [],
          "lines": 85,
          "complexity": 3,
          "calls": [],
          "variables": [
            "project_name"
          ]
        },
        {
          "name": "create_push_instructions",
          "parameters": [],
          "lines": 103,
          "complexity": 4,
          "calls": [
            "system"
          ],
          "variables": []
        },
        {
          "name": "display_current_status",
          "parameters": [],
          "lines": 30,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 34,
          "complexity": 2,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "milestone_name",
        "description",
        "current_commit",
        "current_branch",
        "commit_count",
        "project_name"
      ],
      "imports": [
        "###",
        "EOF",
        "###",
        "The",
        "EOF",
        "Alex",
        "**Repository",
        "Project-Specific",
        "**Repository",
        "**Create",
        "**Update",
        "**Set",
        "Create",
        "Push",
        "Update",
        "Push",
        "Set"
      ],
      "classes": [],
      "total_lines": 387,
      "code_lines": 243,
      "complexity_score": 8,
      "purpose": "General utility script"
    },
    "scripts/populate-job-data.js": {
      "file_name": "populate-job-data.js",
      "file_type": "js",
      "functions": [
        {
          "name": "populateJobData",
          "parameters": [],
          "lines": 66,
          "complexity": 4,
          "calls": [
            "log",
            "log",
            "from",
            "delete",
            "neq",
            "log",
            "from",
            "delete",
            "neq",
            "log",
            "from",
            "insert",
            "select",
            "if",
            "Error",
            "log",
            "log",
            "from",
            "insert",
            "select",
            "if",
            "Error",
            "log",
            "if",
            "log",
            "get",
            "log",
            "catch",
            "warn",
            "log",
            "log",
            "log",
            "log",
            "log",
            "filter",
            "log",
            "filter",
            "log",
            "round",
            "reduce",
            "catch",
            "error",
            "exit"
          ],
          "variables": [
            "response"
          ]
        }
      ],
      "variables": [
        "axios",
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY",
        "N8N_URL",
        "N8N_API_KEY",
        "supabase",
        "jobOpportunities",
        "contacts",
        "response"
      ],
      "imports": [
        "@supabase/supabase-js",
        "axios"
      ],
      "classes": [],
      "total_lines": 310,
      "code_lines": 289,
      "complexity_score": 7,
      "purpose": "General utility script"
    },
    "scripts/deploy-n8n-with-credentials.sh": {
      "file_name": "deploy-n8n-with-credentials.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "create_supabase_credentials",
          "parameters": [],
          "lines": 12,
          "complexity": 1,
          "calls": [],
          "variables": [
            "credential_data"
          ]
        },
        {
          "name": "deploy_workflow",
          "parameters": [],
          "lines": 28,
          "complexity": 3,
          "calls": [],
          "variables": [
            "workflow_file",
            "workflow_name",
            "response",
            "workflow_id"
          ]
        },
        {
          "name": "activate_workflow",
          "parameters": [],
          "lines": 17,
          "complexity": 2,
          "calls": [],
          "variables": [
            "workflow_id",
            "workflow_name",
            "response"
          ]
        },
        {
          "name": "test_webhooks",
          "parameters": [],
          "lines": 29,
          "complexity": 3,
          "calls": [],
          "variables": [
            "get_response",
            "test_job",
            "post_response"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 33,
          "complexity": 3,
          "calls": [],
          "variables": [
            "workflow_id"
          ]
        }
      ],
      "variables": [
        "IFS",
        "line",
        "credential_data",
        "response",
        "workflow_file",
        "workflow_name",
        "response",
        "workflow_id",
        "workflow_id",
        "workflow_name",
        "response",
        "get_response",
        "test_job",
        "post_response",
        "workflow_id"
      ],
      "imports": [
        "Create",
        "Test",
        "Begin"
      ],
      "classes": [],
      "total_lines": 181,
      "code_lines": 128,
      "complexity_score": 12,
      "purpose": "Deployment and setup"
    },
    "scripts/sync-n8n-unified-config.sh": {
      "file_name": "sync-n8n-unified-config.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "update_workflow",
          "parameters": [],
          "lines": 32,
          "complexity": 3,
          "calls": [],
          "variables": [
            "workflow_id",
            "workflow_name",
            "config_file",
            "current_workflow",
            "update_response"
          ]
        },
        {
          "name": "create_workflow",
          "parameters": [],
          "lines": 22,
          "complexity": 2,
          "calls": [],
          "variables": [
            "workflow_name",
            "config_file",
            "create_response",
            "new_id"
          ]
        }
      ],
      "variables": [
        "BACKUP_DIR",
        "workflow_id",
        "workflow_name",
        "config_file",
        "current_workflow",
        "update_response",
        "workflow_name",
        "config_file",
        "create_response",
        "new_id",
        "test_response",
        "test_response",
        "test_response"
      ],
      "imports": [
        "~/.zshrc",
        "Please",
        "Crusher",
        "Crusher",
        "Monitor",
        "Collect",
        "Optimize",
        "Implement",
        "Review",
        "Test",
        "Monitor",
        "Implement"
      ],
      "classes": [],
      "total_lines": 225,
      "code_lines": 154,
      "complexity_score": 13,
      "purpose": "Synchronization and data management"
    },
    "scripts/script-memory-system.py": {
      "file_name": "script-memory-system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 17,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "ScriptMemorySystem",
            "print",
            "search_similar_scripts",
            "print",
            "print",
            "len",
            "get",
            "get"
          ],
          "variables": [
            "memory_system",
            "query",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "supabase_url",
            "supabase_key"
          ],
          "lines": 10,
          "complexity": 3,
          "calls": [
            "SentenceTransformer",
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "create_script_embedding",
          "parameters": [
            "self",
            "script_content",
            "metadata"
          ],
          "lines": 19,
          "complexity": 2,
          "calls": [
            "encode",
            "tolist",
            "error",
            "get",
            "get",
            "join",
            "join",
            "get",
            "get"
          ],
          "variables": [
            "combined_text",
            "embedding"
          ]
        },
        {
          "name": "store_script_memory",
          "parameters": [
            "self",
            "script_metadata",
            "script_content"
          ],
          "lines": 44,
          "complexity": 3,
          "calls": [
            "create_script_embedding",
            "ScriptMemory",
            "post",
            "info",
            "error",
            "error",
            "isoformat",
            "isoformat",
            "asdict",
            "now",
            "now"
          ],
          "variables": [
            "embedding",
            "memory_entry",
            "response"
          ]
        },
        {
          "name": "search_similar_scripts",
          "parameters": [
            "self",
            "query",
            "limit"
          ],
          "lines": 30,
          "complexity": 3,
          "calls": [
            "encode",
            "post",
            "json",
            "error",
            "error",
            "tolist"
          ],
          "variables": [
            "query_embedding",
            "response"
          ]
        },
        {
          "name": "find_existing_script",
          "parameters": [
            "self",
            "purpose",
            "category"
          ],
          "lines": 20,
          "complexity": 4,
          "calls": [
            "search_similar_scripts",
            "error"
          ],
          "variables": [
            "search_query",
            "similar_scripts"
          ]
        },
        {
          "name": "suggest_script_extension",
          "parameters": [
            "self",
            "existing_script",
            "new_requirements"
          ],
          "lines": 51,
          "complexity": 11,
          "calls": [
            "get",
            "get",
            "get",
            "lower",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "error",
            "str",
            "join"
          ],
          "variables": [
            "existing_purpose",
            "existing_functions",
            "existing_tags",
            "suggestions",
            "new_requirements_lower"
          ]
        },
        {
          "name": "create_script_template",
          "parameters": [
            "self",
            "purpose",
            "category",
            "requirements"
          ],
          "lines": 30,
          "complexity": 3,
          "calls": [
            "search_similar_scripts",
            "create_basic_template",
            "create_script_header",
            "extract_relevant_functions",
            "extract_relevant_dependencies",
            "create_script_structure",
            "error",
            "str",
            "lower",
            "replace"
          ],
          "variables": [
            "similar_scripts",
            "template_script",
            "template"
          ]
        },
        {
          "name": "create_basic_template",
          "parameters": [
            "self",
            "purpose",
            "category",
            "requirements"
          ],
          "lines": 42,
          "complexity": 1,
          "calls": [
            "lower",
            "lower",
            "replace"
          ],
          "variables": [
            "template"
          ]
        },
        {
          "name": "create_script_header",
          "parameters": [
            "self",
            "purpose",
            "requirements"
          ],
          "lines": 32,
          "complexity": 1,
          "calls": [
            "lower"
          ],
          "variables": []
        },
        {
          "name": "extract_relevant_functions",
          "parameters": [
            "self",
            "template_script",
            "requirements"
          ],
          "lines": 12,
          "complexity": 3,
          "calls": [
            "get",
            "lower",
            "lower",
            "any",
            "append",
            "split"
          ],
          "variables": [
            "functions",
            "requirements_lower",
            "relevant_functions",
            "func_lower"
          ]
        },
        {
          "name": "extract_relevant_dependencies",
          "parameters": [
            "self",
            "template_script",
            "requirements"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_script_structure",
          "parameters": [
            "self",
            "template_script",
            "requirements"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "get_script_recommendations",
          "parameters": [
            "self",
            "new_script_purpose"
          ],
          "lines": 54,
          "complexity": 5,
          "calls": [
            "search_similar_scripts",
            "get",
            "error",
            "str"
          ],
          "variables": [
            "similar_scripts",
            "most_similar",
            "similarity_score"
          ]
        }
      ],
      "variables": [
        "logger",
        "memory_system",
        "query",
        "results",
        "template",
        "functions",
        "requirements_lower",
        "relevant_functions",
        "combined_text",
        "embedding",
        "embedding",
        "memory_entry",
        "response",
        "query_embedding",
        "response",
        "search_query",
        "similar_scripts",
        "existing_purpose",
        "existing_functions",
        "existing_tags",
        "suggestions",
        "new_requirements_lower",
        "similar_scripts",
        "template_script",
        "template",
        "func_lower",
        "similar_scripts",
        "most_similar",
        "similarity_score"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "hashlib",
        "numpy",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "logging",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "requests",
        "sentence_transformers.SentenceTransformer"
      ],
      "classes": [
        "ScriptMemory",
        "ScriptMemorySystem"
      ],
      "total_lines": 426,
      "code_lines": 324,
      "complexity_score": 30,
      "purpose": "General utility script"
    },
    "scripts/fix-zshrc-api-key.sh": {
      "file_name": "fix-zshrc-api-key.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "CURRENT_KEY",
        "SECOND_KEY_START",
        "POSITION",
        "FIRST_KEY",
        "TEST_RESULT",
        "ANTHROPIC_API_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY",
        "CLAUDE_API_KEY"
      ],
      "imports": [
        "~/.zshrc\"",
        "You'll",
        "If",
        "~/.zshrc\"",
        "If",
        "Test"
      ],
      "classes": [],
      "total_lines": 77,
      "code_lines": 52,
      "complexity_score": 4,
      "purpose": "General utility script"
    },
    "scripts/safe-execute.sh": {
      "file_name": "safe-execute.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_execute",
          "parameters": [],
          "lines": 23,
          "complexity": 4,
          "calls": [],
          "variables": [
            "command",
            "description",
            "safe_command"
          ]
        },
        {
          "name": "safe_status",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": [
            "component",
            "status",
            "icon"
          ]
        },
        {
          "name": "safe_milestone",
          "parameters": [],
          "lines": 10,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "safe_progress",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        },
        {
          "name": "safe_list",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "items"
          ]
        }
      ],
      "variables": [
        "command",
        "description",
        "safe_command",
        "component",
        "status",
        "icon",
        "title",
        "description",
        "step",
        "status",
        "title",
        "items"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 88,
      "code_lines": 61,
      "complexity_score": 7,
      "purpose": "General utility script"
    },
    "scripts/claude-api-key-guide.sh": {
      "file_name": "claude-api-key-guide.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [],
      "imports": [
        "\ud83c\udf10",
        "\ud83d\udd10",
        "\ud83c\udfaf",
        "\ud83d\udd11",
        "\ud83d\udcdd",
        "Run:",
        "Replace",
        "Save",
        "Run:",
        "Run:"
      ],
      "classes": [],
      "total_lines": 67,
      "code_lines": 56,
      "complexity_score": 2,
      "purpose": "General utility script"
    },
    "scripts/analyze-conflicts.sh": {
      "file_name": "analyze-conflicts.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "analyze_conflicts",
          "parameters": [],
          "lines": 77,
          "complexity": 8,
          "calls": [
            "then"
          ],
          "variables": [
            "conflict_file",
            "total_workflows",
            "conflicted_workflows",
            "workflow_name"
          ]
        },
        {
          "name": "check_workflow_conflicts",
          "parameters": [],
          "lines": 78,
          "complexity": 15,
          "calls": [
            "select",
            "select",
            "select",
            "select"
          ],
          "variables": [
            "workflow_name",
            "workflow_file",
            "conflict_file",
            "conflicts",
            "conflict_count",
            "duplicate_nodes",
            "orphaned_connections",
            "value",
            "missing_refs",
            "node",
            "invalid_nodes",
            "type",
            "type",
            "missing_params",
            "parameters"
          ]
        },
        {
          "name": "check_circular_dependencies",
          "parameters": [],
          "lines": 20,
          "complexity": 4,
          "calls": [],
          "variables": [
            "workflow_file",
            "connections",
            "IFS",
            "source",
            "target"
          ]
        },
        {
          "name": "generate_conflict_matrix",
          "parameters": [],
          "lines": 36,
          "complexity": 5,
          "calls": [
            "select",
            "select"
          ],
          "variables": [
            "workflow_name",
            "conflict_count",
            "severity",
            "duplicate_nodes",
            "orphaned_connections",
            "value",
            "missing_refs",
            "node",
            "conflict_count",
            "severity",
            "severity",
            "resolution_status",
            "resolution_status"
          ]
        },
        {
          "name": "generate_resolution_recommendations",
          "parameters": [],
          "lines": 65,
          "complexity": 1,
          "calls": [],
          "variables": [
            "recommendations_file"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 21,
          "complexity": 3,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "CONFLICT_DIR",
        "WORKFLOWS_DIR",
        "ANALYSIS_DIR",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "conflict_file",
        "total_workflows",
        "conflicted_workflows",
        "workflow_name",
        "workflow_name",
        "workflow_file",
        "conflict_file",
        "conflicts",
        "conflict_count",
        "duplicate_nodes",
        "orphaned_connections",
        "value",
        "missing_refs",
        "node",
        "invalid_nodes",
        "type",
        "type",
        "missing_params",
        "parameters",
        "workflow_file",
        "connections",
        "IFS",
        "source",
        "target",
        "workflow_name",
        "conflict_count",
        "severity",
        "duplicate_nodes",
        "orphaned_connections",
        "value",
        "missing_refs",
        "node",
        "conflict_count",
        "severity",
        "severity",
        "resolution_status",
        "resolution_status",
        "recommendations_file"
      ],
      "imports": [
        "##",
        "**Manual",
        "**Merge",
        "**Testing**:",
        "**Deployment**:",
        "**Monitoring**:",
        "Review",
        "Fix",
        "Remove",
        "Fix",
        "Resolve",
        "Validate",
        "Duplicate",
        "Orphaned",
        "Missing",
        "Circular",
        "Invalid",
        "**Validation**:",
        "**Testing**:",
        "**Code",
        "**Documentation**:"
      ],
      "classes": [],
      "total_lines": 346,
      "code_lines": 214,
      "complexity_score": 33,
      "purpose": "General utility script"
    },
    "scripts/add-quote-handling-memory.py": {
      "file_name": "add-quote-handling-memory.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 29,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "AlexAIMemoryAdder",
            "add_memory",
            "print",
            "print",
            "items",
            "print",
            "print",
            "get",
            "print",
            "print",
            "print",
            "get",
            "len",
            "upper"
          ],
          "variables": [
            "memory_adder",
            "results",
            "success_count",
            "status"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 92,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "add_memory_to_supabase",
          "parameters": [
            "self"
          ],
          "lines": 57,
          "complexity": 5,
          "calls": [
            "getenv",
            "getenv",
            "post",
            "get",
            "json",
            "json",
            "str"
          ],
          "variables": [
            "supabase_url",
            "supabase_key",
            "memory_record",
            "headers",
            "response"
          ]
        },
        {
          "name": "add_memory_via_api",
          "parameters": [
            "self"
          ],
          "lines": 22,
          "complexity": 3,
          "calls": [
            "post",
            "json",
            "str"
          ],
          "variables": [
            "response"
          ]
        },
        {
          "name": "save_memory_to_file",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 2,
          "calls": [
            "strftime",
            "isoformat",
            "open",
            "dump",
            "now",
            "now",
            "str"
          ],
          "variables": [
            "timestamp",
            "filename",
            "memory_file"
          ]
        },
        {
          "name": "add_memory",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "add_memory_to_supabase",
            "get",
            "print",
            "add_memory_via_api",
            "get",
            "print",
            "save_memory_to_file",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "results",
            "supabase_result",
            "api_result",
            "file_result"
          ]
        }
      ],
      "variables": [
        "memory_adder",
        "results",
        "success_count",
        "results",
        "supabase_result",
        "api_result",
        "file_result",
        "status",
        "supabase_url",
        "supabase_key",
        "memory_record",
        "headers",
        "response",
        "response",
        "timestamp",
        "filename",
        "memory_file"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "requests",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [
        "AlexAIMemoryAdder"
      ],
      "total_lines": 290,
      "code_lines": 233,
      "complexity_score": 14,
      "purpose": "General utility script"
    },
    "scripts/security-validation.sh": {
      "file_name": "security-validation.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_hardcoded_credentials",
          "parameters": [],
          "lines": 29,
          "complexity": 6,
          "calls": [],
          "variables": [
            "found_issues",
            "patterns",
            "found_issues"
          ]
        },
        {
          "name": "validate_authentication",
          "parameters": [],
          "lines": 26,
          "complexity": 6,
          "calls": [
            "select"
          ],
          "variables": [
            "found_issues",
            "workflow_name",
            "insecure_auth",
            "found_issues"
          ]
        },
        {
          "name": "check_dangerous_commands",
          "parameters": [],
          "lines": 36,
          "complexity": 7,
          "calls": [
            "select"
          ],
          "variables": [
            "found_issues",
            "dangerous_commands",
            "workflow_name",
            "type",
            "found_issues"
          ]
        },
        {
          "name": "validate_url_security",
          "parameters": [],
          "lines": 39,
          "complexity": 11,
          "calls": [
            "URLs",
            "select",
            "workflow_name",
            "select",
            "workflow_name"
          ],
          "variables": [
            "found_issues",
            "workflow_name",
            "http_urls",
            "localhost_urls",
            "found_issues"
          ]
        },
        {
          "name": "check_sensitive_data",
          "parameters": [],
          "lines": 26,
          "complexity": 5,
          "calls": [],
          "variables": [
            "found_issues",
            "sensitive_patterns",
            "found_issues"
          ]
        },
        {
          "name": "validate_workflow_permissions",
          "parameters": [],
          "lines": 33,
          "complexity": 9,
          "calls": [
            "select",
            "select",
            "contains",
            "contains",
            "workflow_name"
          ],
          "variables": [
            "found_issues",
            "workflow_name",
            "file_operations",
            "type",
            "type",
            "db_operations"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 48,
          "complexity": 4,
          "calls": [],
          "variables": [
            "total_checks",
            "passed_checks",
            "failed_checks",
            "checks"
          ]
        }
      ],
      "variables": [
        "WORKFLOWS_DIR",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "found_issues",
        "patterns",
        "found_issues",
        "found_issues",
        "workflow_name",
        "insecure_auth",
        "found_issues",
        "found_issues",
        "dangerous_commands",
        "workflow_name",
        "type",
        "found_issues",
        "found_issues",
        "workflow_name",
        "http_urls",
        "localhost_urls",
        "found_issues",
        "found_issues",
        "sensitive_patterns",
        "found_issues",
        "found_issues",
        "workflow_name",
        "file_operations",
        "type",
        "type",
        "db_operations",
        "total_checks",
        "passed_checks",
        "failed_checks",
        "checks"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 288,
      "code_lines": 211,
      "complexity_score": 47,
      "purpose": "General utility script"
    },
    "scripts/validate-consolidated-structure.py": {
      "file_name": "validate-consolidated-structure.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 38,
          "complexity": 6,
          "calls": [
            "print",
            "print",
            "StructureValidator",
            "validate_structure",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "generate_validation_report",
            "print",
            "print",
            "print",
            "open",
            "write",
            "print",
            "print",
            "print",
            "len",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "validator",
            "results",
            "report",
            "status"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "scripts_dir"
          ],
          "lines": 10,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "validate_structure",
          "parameters": [
            "self"
          ],
          "lines": 23,
          "complexity": 1,
          "calls": [
            "info",
            "validate_directory_structure",
            "validate_consolidated_scripts",
            "validate_remaining_scripts",
            "check_broken_references",
            "test_functionality",
            "generate_recommendations"
          ],
          "variables": []
        },
        {
          "name": "validate_directory_structure",
          "parameters": [
            "self"
          ],
          "lines": 14,
          "complexity": 3,
          "calls": [
            "join",
            "exists",
            "error",
            "info"
          ],
          "variables": [
            "expected_categories",
            "category_path"
          ]
        },
        {
          "name": "validate_consolidated_scripts",
          "parameters": [
            "self"
          ],
          "lines": 20,
          "complexity": 7,
          "calls": [
            "walk",
            "info",
            "startswith",
            "join",
            "append",
            "len",
            "endswith",
            "warning",
            "check_script_structure",
            "warning",
            "access"
          ],
          "variables": [
            "consolidated_scripts",
            "script_path"
          ]
        },
        {
          "name": "validate_remaining_scripts",
          "parameters": [
            "self"
          ],
          "lines": 14,
          "complexity": 6,
          "calls": [
            "walk",
            "info",
            "endswith",
            "join",
            "append",
            "len",
            "startswith",
            "startswith"
          ],
          "variables": [
            "remaining_scripts",
            "script_path"
          ]
        },
        {
          "name": "check_script_structure",
          "parameters": [
            "self",
            "script_path"
          ],
          "lines": 19,
          "complexity": 8,
          "calls": [
            "endswith",
            "open",
            "read",
            "endswith",
            "error",
            "endswith"
          ],
          "variables": [
            "content"
          ]
        },
        {
          "name": "check_broken_references",
          "parameters": [
            "self"
          ],
          "lines": 17,
          "complexity": 6,
          "calls": [
            "walk",
            "warning",
            "info",
            "endswith",
            "join",
            "find_broken_references",
            "extend",
            "len"
          ],
          "variables": [
            "broken_references",
            "file_path",
            "broken_refs"
          ]
        },
        {
          "name": "find_broken_references",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 29,
          "complexity": 5,
          "calls": [
            "open",
            "read",
            "findall",
            "error",
            "exists",
            "append"
          ],
          "variables": [
            "broken_refs",
            "patterns",
            "content",
            "matches",
            "ref_path"
          ]
        },
        {
          "name": "test_functionality",
          "parameters": [
            "self"
          ],
          "lines": 14,
          "complexity": 1,
          "calls": [
            "test_script_analyzer",
            "test_intelligent_discovery",
            "test_consolidated_scripts"
          ],
          "variables": [
            "test_results"
          ]
        },
        {
          "name": "test_script_analyzer",
          "parameters": [
            "self"
          ],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "run",
            "error"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "test_intelligent_discovery",
          "parameters": [
            "self"
          ],
          "lines": 11,
          "complexity": 2,
          "calls": [
            "run",
            "error"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "test_consolidated_scripts",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 5,
          "calls": [
            "endswith",
            "run",
            "endswith",
            "error",
            "run"
          ],
          "variables": [
            "test_results",
            "result",
            "result"
          ]
        },
        {
          "name": "generate_recommendations",
          "parameters": [
            "self"
          ],
          "lines": 38,
          "complexity": 9,
          "calls": [
            "len",
            "len",
            "sum",
            "append",
            "append",
            "append",
            "append",
            "endswith",
            "access",
            "values",
            "isinstance"
          ],
          "variables": [
            "recommendations",
            "remaining_count",
            "broken_count",
            "non_executable",
            "test_failures"
          ]
        },
        {
          "name": "generate_validation_report",
          "parameters": [
            "self"
          ],
          "lines": 36,
          "complexity": 6,
          "calls": [
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "items",
            "append",
            "join",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "len",
            "len"
          ],
          "variables": [
            "report",
            "status"
          ]
        }
      ],
      "variables": [
        "logger",
        "validator",
        "results",
        "report",
        "expected_categories",
        "consolidated_scripts",
        "remaining_scripts",
        "broken_references",
        "broken_refs",
        "test_results",
        "test_results",
        "recommendations",
        "remaining_count",
        "broken_count",
        "non_executable",
        "test_failures",
        "report",
        "status",
        "category_path",
        "patterns",
        "result",
        "result",
        "status",
        "content",
        "content",
        "matches",
        "script_path",
        "script_path",
        "file_path",
        "broken_refs",
        "ref_path",
        "result",
        "result"
      ],
      "imports": [
        "os",
        "json",
        "subprocess",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "logging",
        "re"
      ],
      "classes": [
        "StructureValidator"
      ],
      "total_lines": 362,
      "code_lines": 266,
      "complexity_score": 54,
      "purpose": "General utility script"
    },
    "scripts/quick-production-test.sh": {
      "file_name": "quick-production-test.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "test_result",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "test_name",
            "result",
            "details",
            "TOTAL_TESTS",
            "PASSED_TESTS",
            "FAILED_TESTS"
          ]
        },
        {
          "name": "test_shell_generation",
          "parameters": [],
          "lines": 26,
          "complexity": 3,
          "calls": [],
          "variables": [
            "test_dir",
            "test_script"
          ]
        },
        {
          "name": "test_api_security",
          "parameters": [],
          "lines": 25,
          "complexity": 4,
          "calls": [],
          "variables": [
            "perms"
          ]
        },
        {
          "name": "test_nextjs",
          "parameters": [],
          "lines": 19,
          "complexity": 3,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_error_handling",
          "parameters": [],
          "lines": 11,
          "complexity": 2,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_performance",
          "parameters": [],
          "lines": 27,
          "complexity": 3,
          "calls": [],
          "variables": [
            "start_time",
            "test_dir",
            "end_time",
            "duration"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 31,
          "complexity": 2,
          "calls": [
            "test"
          ],
          "variables": []
        }
      ],
      "variables": [
        "TOTAL_TESTS",
        "PASSED_TESTS",
        "FAILED_TESTS",
        "test_name",
        "result",
        "details",
        "TOTAL_TESTS",
        "PASSED_TESTS",
        "FAILED_TESTS",
        "test_dir",
        "test_script",
        "perms",
        "start_time",
        "test_dir",
        "end_time",
        "duration"
      ],
      "imports": [
        "Address"
      ],
      "classes": [],
      "total_lines": 183,
      "code_lines": 128,
      "complexity_score": 16,
      "purpose": "Testing and validation"
    },
    "scripts/get-supabase-anon-key.sh": {
      "file_name": "get-supabase-anon-key.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "IFS",
        "line",
        "SUPABASE_ANON_KEY",
        "SUPABASE_ANON_KEY"
      ],
      "imports": [
        "Go",
        "Go",
        "Copy",
        "Update",
        "Reload",
        "~/.zshrc\"",
        "Re-run"
      ],
      "classes": [],
      "total_lines": 77,
      "code_lines": 58,
      "complexity_score": 7,
      "purpose": "General utility script"
    },
    "scripts/test-alex-ai-fixes.sh": {
      "file_name": "test-alex-ai-fixes.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "DEV_PID",
        "HEALTH_RESPONSE",
        "SUPABASE_RESPONSE",
        "N8N_RESPONSE",
        "JOBS_RESPONSE",
        "SCRAPING_RESPONSE",
        "RATE_RESPONSE",
        "MEMORY_RESPONSE"
      ],
      "imports": [
        "Create",
        "Activate"
      ],
      "classes": [],
      "total_lines": 142,
      "code_lines": 102,
      "complexity_score": 13,
      "purpose": "Testing and validation"
    },
    "scripts/security-audit.sh": {
      "file_name": "security-audit.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "print_status",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "status",
            "message"
          ]
        },
        {
          "name": "check_secrets",
          "parameters": [],
          "lines": 30,
          "complexity": 8,
          "calls": [],
          "variables": [
            "secrets_found",
            "dir",
            "dir",
            "exclude",
            "secrets_found",
            "dir",
            "dir",
            "exclude",
            "secrets_found",
            "dir",
            "dir",
            "exclude",
            "secrets_found",
            "dir",
            "dir",
            "exclude",
            "secrets_found"
          ]
        },
        {
          "name": "check_env_files",
          "parameters": [],
          "lines": 22,
          "complexity": 5,
          "calls": [
            "exists",
            "exists"
          ],
          "variables": []
        },
        {
          "name": "check_security_headers",
          "parameters": [],
          "lines": 20,
          "complexity": 4,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_dependencies",
          "parameters": [],
          "lines": 16,
          "complexity": 6,
          "calls": [],
          "variables": [
            "level"
          ]
        },
        {
          "name": "check_git_security",
          "parameters": [],
          "lines": 20,
          "complexity": 4,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_file_permissions",
          "parameters": [],
          "lines": 13,
          "complexity": 3,
          "calls": [],
          "variables": [
            "permissive_files"
          ]
        },
        {
          "name": "generate_report",
          "parameters": [],
          "lines": 19,
          "complexity": 4,
          "calls": [
            "features"
          ],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "NC",
        "status",
        "message",
        "secrets_found",
        "dir",
        "dir",
        "exclude",
        "secrets_found",
        "dir",
        "dir",
        "exclude",
        "secrets_found",
        "dir",
        "dir",
        "exclude",
        "secrets_found",
        "dir",
        "dir",
        "exclude",
        "secrets_found",
        "level",
        "permissive_files"
      ],
      "imports": [
        "--exclude-dir=node_modules",
        "--exclude-dir=node_modules",
        "--exclude-dir=node_modules",
        "--exclude-dir=node_modules",
        "else",
        "-type",
        "Review",
        "Never",
        "Use",
        "Regularly",
        "Enable",
        "Use",
        "Implement",
        "Monitor"
      ],
      "classes": [],
      "total_lines": 201,
      "code_lines": 155,
      "complexity_score": 40,
      "purpose": "General utility script"
    },
    "scripts/n8n-bidirectional-sync.py": {
      "file_name": "n8n-bidirectional-sync.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 22,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "N8NBidirectionalSync",
            "run_sync",
            "getenv",
            "print",
            "exit",
            "print",
            "print",
            "print",
            "exit"
          ],
          "variables": [
            "sync_system",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 13,
          "complexity": 1,
          "calls": [
            "getenv",
            "getenv",
            "makedirs",
            "makedirs",
            "load_sync_history"
          ],
          "variables": []
        },
        {
          "name": "load_sync_history",
          "parameters": [
            "self"
          ],
          "lines": 14,
          "complexity": 3,
          "calls": [
            "exists",
            "open",
            "load",
            "error"
          ],
          "variables": []
        },
        {
          "name": "save_sync_history",
          "parameters": [
            "self"
          ],
          "lines": 7,
          "complexity": 2,
          "calls": [
            "open",
            "dump",
            "error"
          ],
          "variables": []
        },
        {
          "name": "get_workflow_hash",
          "parameters": [
            "self",
            "workflow_data"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "dumps",
            "hexdigest",
            "sha256",
            "encode"
          ],
          "variables": [
            "workflow_str"
          ]
        },
        {
          "name": "fetch_n8n_workflows",
          "parameters": [
            "self"
          ],
          "lines": 26,
          "complexity": 3,
          "calls": [
            "get",
            "json",
            "get",
            "info",
            "error",
            "error",
            "len"
          ],
          "variables": [
            "headers",
            "response",
            "data",
            "workflows"
          ]
        },
        {
          "name": "sync_workflow_from_n8n",
          "parameters": [
            "self",
            "workflow"
          ],
          "lines": 49,
          "complexity": 5,
          "calls": [
            "get",
            "get",
            "replace",
            "join",
            "get_workflow_hash",
            "exists",
            "append",
            "info",
            "rename",
            "info",
            "open",
            "dump",
            "isoformat",
            "error",
            "replace",
            "debug",
            "int",
            "now",
            "time"
          ],
          "variables": [
            "workflow_name",
            "workflow_id",
            "safe_name",
            "local_file",
            "workflow_hash",
            "sync_operation",
            "backup_file"
          ]
        },
        {
          "name": "analyze_workflow_changes",
          "parameters": [
            "self",
            "workflow"
          ],
          "lines": 63,
          "complexity": 7,
          "calls": [
            "get",
            "get",
            "get",
            "extend",
            "isoformat",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "get",
            "append",
            "append",
            "error",
            "len",
            "len",
            "len",
            "len",
            "len",
            "set",
            "str",
            "now",
            "get",
            "get",
            "get",
            "get",
            "count",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "workflow_name",
            "nodes",
            "connections",
            "analysis",
            "webhook_nodes",
            "response_nodes",
            "function_nodes",
            "http_nodes",
            "node_names",
            "duplicates"
          ]
        },
        {
          "name": "save_analysis",
          "parameters": [
            "self",
            "analysis"
          ],
          "lines": 17,
          "complexity": 2,
          "calls": [
            "get",
            "replace",
            "join",
            "info",
            "open",
            "dump",
            "error",
            "replace",
            "int",
            "time"
          ],
          "variables": [
            "workflow_name",
            "safe_name",
            "analysis_file"
          ]
        },
        {
          "name": "sync_from_n8n_to_dev",
          "parameters": [
            "self"
          ],
          "lines": 66,
          "complexity": 6,
          "calls": [
            "info",
            "fetch_n8n_workflows",
            "isoformat",
            "save_sync_history",
            "info",
            "error",
            "isoformat",
            "len",
            "get",
            "get",
            "sync_workflow_from_n8n",
            "now",
            "now",
            "analyze_workflow_changes",
            "append",
            "append",
            "error",
            "append",
            "save_analysis",
            "get",
            "str"
          ],
          "variables": [
            "workflows",
            "sync_results",
            "workflow_name",
            "workflow_id",
            "analysis"
          ]
        },
        {
          "name": "generate_sync_report",
          "parameters": [
            "self",
            "sync_results"
          ],
          "lines": 53,
          "complexity": 6,
          "calls": [
            "strftime",
            "now",
            "join",
            "get"
          ],
          "variables": [
            "report",
            "status_icon"
          ]
        },
        {
          "name": "run_sync",
          "parameters": [
            "self"
          ],
          "lines": 27,
          "complexity": 2,
          "calls": [
            "info",
            "sync_from_n8n_to_dev",
            "generate_sync_report",
            "info",
            "open",
            "write",
            "error",
            "int",
            "str",
            "time"
          ],
          "variables": [
            "sync_results",
            "report",
            "report_file"
          ]
        }
      ],
      "variables": [
        "logger",
        "sync_system",
        "result",
        "workflow_str",
        "workflows",
        "sync_results",
        "report",
        "headers",
        "response",
        "workflow_name",
        "workflow_id",
        "safe_name",
        "local_file",
        "workflow_hash",
        "sync_operation",
        "workflow_name",
        "nodes",
        "connections",
        "analysis",
        "webhook_nodes",
        "response_nodes",
        "function_nodes",
        "http_nodes",
        "node_names",
        "duplicates",
        "workflow_name",
        "safe_name",
        "analysis_file",
        "workflow_name",
        "workflow_id",
        "status_icon",
        "sync_results",
        "report",
        "report_file",
        "data",
        "workflows",
        "backup_file",
        "analysis"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "time",
        "requests",
        "hashlib",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "logging"
      ],
      "classes": [
        "N8NBidirectionalSync"
      ],
      "total_lines": 407,
      "code_lines": 302,
      "complexity_score": 39,
      "purpose": "Synchronization and data management"
    },
    "scripts/test-workflows.sh": {
      "file_name": "test-workflows.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_workflow_structure",
          "parameters": [],
          "lines": 37,
          "complexity": 9,
          "calls": [
            "select",
            "select"
          ],
          "variables": [
            "workflow_file",
            "workflow_name",
            "type",
            "type",
            "connection_count",
            "node_count"
          ]
        },
        {
          "name": "test_workflow_connectivity",
          "parameters": [],
          "lines": 35,
          "complexity": 5,
          "calls": [
            "select",
            "select"
          ],
          "variables": [
            "workflow_name",
            "webhook_path",
            "name",
            "type",
            "test_response",
            "http_code"
          ]
        },
        {
          "name": "test_workflow_logic",
          "parameters": [],
          "lines": 38,
          "complexity": 11,
          "calls": [
            "select",
            "select"
          ],
          "variables": [
            "workflow_file",
            "workflow_name",
            "function_nodes",
            "type",
            "type",
            "http_nodes",
            "type"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 43,
          "complexity": 5,
          "calls": [],
          "variables": [
            "total_workflows",
            "passed_workflows",
            "failed_workflows",
            "workflow_name"
          ]
        }
      ],
      "variables": [
        "N8N_URL",
        "N8N_API_KEY",
        "WORKFLOWS_DIR",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "workflow_file",
        "workflow_name",
        "type",
        "type",
        "connection_count",
        "node_count",
        "workflow_name",
        "webhook_path",
        "name",
        "type",
        "test_response",
        "http_code",
        "workflow_file",
        "workflow_name",
        "function_nodes",
        "type",
        "type",
        "http_nodes",
        "type",
        "total_workflows",
        "passed_workflows",
        "failed_workflows",
        "workflow_name"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 200,
      "code_lines": 137,
      "complexity_score": 30,
      "purpose": "Testing and validation"
    },
    "scripts/channel-intelligence-dual-milestone-push.sh": {
      "file_name": "channel-intelligence-dual-milestone-push.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "print_status",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_section",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "PROJECT_MILESTONE",
        "PROJECT_VERSION",
        "ALEXAI_MILESTONE",
        "ALEXAI_VERSION",
        "MILESTONE_DATE",
        "PROJECT_FILES",
        "ALEXAI_FILES",
        "ARCHIVE_NAME",
        "TEMP_DIR",
        "DUAL_SUMMARY",
        "Summary",
        "DUAL_LOG"
      ],
      "imports": [
        "Build",
        "Extract",
        "Continue",
        "Achieve"
      ],
      "classes": [],
      "total_lines": 320,
      "code_lines": 253,
      "complexity_score": 22,
      "purpose": "General utility script"
    },
    "scripts/credential-security-milestone-push.sh": {
      "file_name": "credential-security-milestone-push.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "TIMESTAMP",
        "MILESTONE_NAME",
        "PACKAGE_NAME",
        "SUMMARY"
      ],
      "imports": [
        "N8N",
        "ANTHROPIC_API_KEY",
        "Shell",
        "Add",
        "Verify",
        "Test",
        "N8N",
        "ANTHROPIC_API_KEY",
        "Shell",
        "Add",
        "Verify",
        "Test",
        "git"
      ],
      "classes": [],
      "total_lines": 180,
      "code_lines": 133,
      "complexity_score": 3,
      "purpose": "General utility script"
    },
    "scripts/setup-dev-environment.sh": {
      "file_name": "setup-dev-environment.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "N8N_URL",
        "N8N_API_KEY",
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "N8N_URL",
        "N8N_API_KEY",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "OPENROUTER_API_KEY",
        "GITHUB_TOKEN",
        "ALEX_AI_ENVIRONMENT",
        "ALEX_AI_VERSION",
        "dev",
        "build",
        "test",
        "creds",
        "n8n"
      ],
      "imports": [
        "Creating",
        "Please",
        "~/.zshrc",
        "Reload",
        "~/.zshrc\"",
        "Start",
        "Or"
      ],
      "classes": [],
      "total_lines": 119,
      "code_lines": 86,
      "complexity_score": 12,
      "purpose": "General utility script"
    },
    "scripts/n8n-sync-monitor.py": {
      "file_name": "n8n-sync-monitor.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "N8NSyncMonitor",
            "run_monitor",
            "getenv",
            "print",
            "exit"
          ],
          "variables": [
            "monitor"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "getenv",
            "getenv",
            "int",
            "int",
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "check_n8n_health",
          "parameters": [
            "self"
          ],
          "lines": 19,
          "complexity": 2,
          "calls": [
            "get",
            "error"
          ],
          "variables": [
            "headers",
            "response"
          ]
        },
        {
          "name": "get_workflow_status",
          "parameters": [
            "self"
          ],
          "lines": 32,
          "complexity": 3,
          "calls": [
            "get",
            "json",
            "get",
            "error",
            "error",
            "len",
            "len",
            "get"
          ],
          "variables": [
            "headers",
            "response",
            "data",
            "workflows",
            "active_workflows"
          ]
        },
        {
          "name": "check_sync_health",
          "parameters": [
            "self"
          ],
          "lines": 66,
          "complexity": 10,
          "calls": [
            "check_n8n_health",
            "get_workflow_status",
            "exists",
            "SyncStatus",
            "measure_n8n_response_time",
            "calculate_sync_frequency",
            "error",
            "SyncStatus",
            "get",
            "get",
            "open",
            "load",
            "now",
            "timedelta",
            "get",
            "error",
            "locals",
            "max",
            "fromisoformat",
            "len",
            "replace",
            "get",
            "get"
          ],
          "variables": [
            "n8n_healthy",
            "workflow_status",
            "sync_history_file",
            "sync_errors",
            "last_sync",
            "performance_metrics",
            "is_healthy",
            "last_sync",
            "sync_operations",
            "cutoff_time",
            "sync_history",
            "op_time"
          ]
        },
        {
          "name": "measure_n8n_response_time",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 2,
          "calls": [
            "time",
            "get",
            "time",
            "error"
          ],
          "variables": [
            "start_time",
            "headers",
            "response",
            "end_time"
          ]
        },
        {
          "name": "calculate_sync_frequency",
          "parameters": [
            "self"
          ],
          "lines": 45,
          "complexity": 11,
          "calls": [
            "get",
            "sort",
            "range",
            "exists",
            "open",
            "load",
            "get",
            "len",
            "len",
            "append",
            "sum",
            "len",
            "error",
            "total_seconds",
            "fromisoformat",
            "append",
            "replace"
          ],
          "variables": [
            "sync_history_file",
            "sync_operations",
            "timestamps",
            "intervals",
            "avg_interval",
            "sync_history",
            "interval",
            "op_time"
          ]
        },
        {
          "name": "generate_dashboard_data",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 4,
          "calls": [
            "check_sync_health",
            "get_workflow_status",
            "exists",
            "isoformat",
            "generate_alerts",
            "error",
            "get",
            "str",
            "open",
            "load",
            "error",
            "now"
          ],
          "variables": [
            "sync_status",
            "workflow_status",
            "recent_operations",
            "sync_history_file",
            "dashboard_data",
            "sync_operations",
            "recent_operations",
            "sync_history"
          ]
        },
        {
          "name": "generate_alerts",
          "parameters": [
            "self",
            "sync_status"
          ],
          "lines": 43,
          "complexity": 6,
          "calls": [
            "append",
            "append",
            "get",
            "append",
            "append",
            "fromisoformat",
            "replace",
            "now",
            "replace",
            "timedelta",
            "append",
            "isoformat",
            "isoformat",
            "isoformat",
            "isoformat",
            "isoformat",
            "now",
            "now",
            "now",
            "now",
            "now"
          ],
          "variables": [
            "alerts",
            "last_sync_time",
            "time_since_sync"
          ]
        },
        {
          "name": "save_dashboard_data",
          "parameters": [
            "self",
            "dashboard_data"
          ],
          "lines": 11,
          "complexity": 2,
          "calls": [
            "info",
            "open",
            "dump",
            "error"
          ],
          "variables": [
            "dashboard_file"
          ]
        },
        {
          "name": "run_monitor",
          "parameters": [
            "self"
          ],
          "lines": 35,
          "complexity": 7,
          "calls": [
            "info",
            "generate_dashboard_data",
            "save_dashboard_data",
            "get",
            "info",
            "get",
            "sleep",
            "info",
            "error",
            "critical",
            "get",
            "get",
            "get",
            "get",
            "warning",
            "info"
          ],
          "variables": [
            "dashboard_data",
            "sync_status",
            "alerts"
          ]
        }
      ],
      "variables": [
        "logger",
        "monitor",
        "alerts",
        "headers",
        "response",
        "headers",
        "response",
        "n8n_healthy",
        "workflow_status",
        "sync_history_file",
        "sync_errors",
        "last_sync",
        "performance_metrics",
        "is_healthy",
        "start_time",
        "headers",
        "response",
        "end_time",
        "sync_history_file",
        "sync_operations",
        "timestamps",
        "intervals",
        "avg_interval",
        "sync_status",
        "workflow_status",
        "recent_operations",
        "sync_history_file",
        "dashboard_data",
        "last_sync_time",
        "time_since_sync",
        "dashboard_file",
        "data",
        "workflows",
        "active_workflows",
        "sync_history",
        "interval",
        "dashboard_data",
        "sync_status",
        "alerts",
        "last_sync",
        "sync_operations",
        "cutoff_time",
        "sync_operations",
        "recent_operations",
        "sync_history",
        "op_time",
        "sync_history",
        "op_time"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "time",
        "requests",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "logging",
        "dataclasses.dataclass"
      ],
      "classes": [
        "SyncStatus",
        "N8NSyncMonitor"
      ],
      "total_lines": 382,
      "code_lines": 295,
      "complexity_score": 41,
      "purpose": "Synchronization and data management"
    },
    "scripts/robust-test.sh": {
      "file_name": "robust-test.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "WORKFLOW_COUNT",
        "DEV_PID"
      ],
      "imports": [
        "~/.alexai-keys/api-keys.env",
        "alexai_env/bin/activate"
      ],
      "classes": [],
      "total_lines": 116,
      "code_lines": 95,
      "complexity_score": 23,
      "purpose": "Testing and validation"
    },
    "scripts/update-script-references.py": {
      "file_name": "update-script-references.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 30,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "ScriptReferenceUpdater",
            "update_all_references",
            "create_script_index",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "print",
            "len",
            "len"
          ],
          "variables": [
            "updater"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "scripts_dir"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "load_consolidation_mapping"
          ],
          "variables": []
        },
        {
          "name": "load_consolidation_mapping",
          "parameters": [
            "self"
          ],
          "lines": 9,
          "complexity": 2,
          "calls": [
            "open",
            "load",
            "get",
            "error"
          ],
          "variables": [
            "plan"
          ]
        },
        {
          "name": "update_all_references",
          "parameters": [
            "self"
          ],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "info",
            "update_script_files",
            "update_package_json",
            "update_documentation",
            "update_config_files",
            "info",
            "error",
            "len"
          ],
          "variables": []
        },
        {
          "name": "update_script_files",
          "parameters": [
            "self"
          ],
          "lines": 7,
          "complexity": 4,
          "calls": [
            "walk",
            "endswith",
            "join",
            "update_file_references"
          ],
          "variables": [
            "file_path"
          ]
        },
        {
          "name": "update_file_references",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 25,
          "complexity": 3,
          "calls": [
            "update_script_calls",
            "update_imports",
            "update_relative_paths",
            "open",
            "read",
            "append",
            "info",
            "error",
            "open",
            "write"
          ],
          "variables": [
            "original_content",
            "content",
            "content",
            "content",
            "content"
          ]
        },
        {
          "name": "update_script_calls",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 20,
          "complexity": 5,
          "calls": [
            "findall",
            "get_new_script_path",
            "replace"
          ],
          "variables": [
            "patterns",
            "matches",
            "old_path",
            "new_path",
            "content"
          ]
        },
        {
          "name": "update_imports",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 18,
          "complexity": 4,
          "calls": [
            "findall",
            "get_new_import_path",
            "replace"
          ],
          "variables": [
            "python_patterns",
            "matches",
            "old_import",
            "new_import",
            "content"
          ]
        },
        {
          "name": "update_relative_paths",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 17,
          "complexity": 5,
          "calls": [
            "findall",
            "get_new_script_path",
            "replace"
          ],
          "variables": [
            "path_patterns",
            "matches",
            "old_path",
            "new_path",
            "content"
          ]
        },
        {
          "name": "get_new_script_path",
          "parameters": [
            "self",
            "script_name"
          ],
          "lines": 12,
          "complexity": 5,
          "calls": [
            "items",
            "get",
            "items",
            "get"
          ],
          "variables": [
            "subcategory_groups"
          ]
        },
        {
          "name": "get_new_import_path",
          "parameters": [
            "self",
            "module_name"
          ],
          "lines": 12,
          "complexity": 5,
          "calls": [
            "items",
            "get",
            "items",
            "get"
          ],
          "variables": [
            "subcategory_groups"
          ]
        },
        {
          "name": "update_package_json",
          "parameters": [
            "self"
          ],
          "lines": 27,
          "complexity": 7,
          "calls": [
            "exists",
            "get",
            "items",
            "open",
            "load",
            "isinstance",
            "append",
            "info",
            "error",
            "update_script_calls",
            "open",
            "dump"
          ],
          "variables": [
            "package_json_path",
            "scripts",
            "updated",
            "package_data",
            "new_command",
            "updated"
          ]
        },
        {
          "name": "update_documentation",
          "parameters": [
            "self"
          ],
          "lines": 11,
          "complexity": 3,
          "calls": [
            "exists",
            "update_file_references"
          ],
          "variables": [
            "doc_files"
          ]
        },
        {
          "name": "update_config_files",
          "parameters": [
            "self"
          ],
          "lines": 11,
          "complexity": 3,
          "calls": [
            "exists",
            "update_file_references"
          ],
          "variables": [
            "config_files"
          ]
        },
        {
          "name": "create_script_index",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 9,
          "calls": [
            "items",
            "walk",
            "info",
            "get",
            "items",
            "open",
            "dump",
            "error",
            "len",
            "endswith",
            "join",
            "relpath",
            "len",
            "startswith",
            "determine_script_category",
            "get"
          ],
          "variables": [
            "script_index",
            "subcategory_groups",
            "file_path",
            "relative_path"
          ]
        },
        {
          "name": "determine_script_category",
          "parameters": [
            "self",
            "script_name"
          ],
          "lines": 16,
          "complexity": 10,
          "calls": [
            "lower"
          ],
          "variables": [
            "name_lower"
          ]
        }
      ],
      "variables": [
        "logger",
        "updater",
        "patterns",
        "python_patterns",
        "path_patterns",
        "package_json_path",
        "doc_files",
        "config_files",
        "name_lower",
        "original_content",
        "content",
        "content",
        "content",
        "matches",
        "matches",
        "matches",
        "subcategory_groups",
        "subcategory_groups",
        "script_index",
        "plan",
        "content",
        "old_path",
        "new_path",
        "old_import",
        "new_import",
        "old_path",
        "new_path",
        "scripts",
        "updated",
        "subcategory_groups",
        "file_path",
        "content",
        "content",
        "content",
        "package_data",
        "new_command",
        "file_path",
        "relative_path",
        "updated"
      ],
      "imports": [
        "os",
        "re",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "logging"
      ],
      "classes": [
        "ScriptReferenceUpdater"
      ],
      "total_lines": 320,
      "code_lines": 241,
      "complexity_score": 59,
      "purpose": "General utility script"
    },
    "scripts/production-readiness-assessment.sh": {
      "file_name": "production-readiness-assessment.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "assess_result",
          "parameters": [],
          "lines": 22,
          "complexity": 2,
          "calls": [],
          "variables": [
            "criterion",
            "result",
            "details",
            "TOTAL_CRITERIA",
            "PASSED_CRITERIA",
            "FAILED_CRITERIA",
            "WARNING_CRITERIA"
          ]
        },
        {
          "name": "assess_technical_requirements",
          "parameters": [],
          "lines": 39,
          "complexity": 7,
          "calls": [],
          "variables": [
            "dir",
            "dir"
          ]
        },
        {
          "name": "assess_security",
          "parameters": [],
          "lines": 36,
          "complexity": 6,
          "calls": [],
          "variables": [
            "key_perms",
            "dir",
            "dir",
            "dir",
            "dir"
          ]
        },
        {
          "name": "assess_documentation",
          "parameters": [],
          "lines": 41,
          "complexity": 7,
          "calls": [],
          "variables": [
            "guide_size",
            "deploy_size"
          ]
        },
        {
          "name": "assess_performance",
          "parameters": [],
          "lines": 37,
          "complexity": 6,
          "calls": [],
          "variables": [
            "start_time",
            "end_time",
            "duration",
            "start_time",
            "end_time",
            "duration"
          ]
        },
        {
          "name": "assess_integration",
          "parameters": [],
          "lines": 31,
          "complexity": 5,
          "calls": [],
          "variables": []
        },
        {
          "name": "assess_support_system",
          "parameters": [],
          "lines": 24,
          "complexity": 4,
          "calls": [],
          "variables": [
            "dir",
            "dir",
            "dir",
            "dir"
          ]
        },
        {
          "name": "generate_readiness_report",
          "parameters": [],
          "lines": 104,
          "complexity": 4,
          "calls": [
            "issue",
            "warning",
            "issue",
            "warning"
          ],
          "variables": [
            "report_file",
            "readiness_score"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 38,
          "complexity": 3,
          "calls": [],
          "variables": [
            "readiness_score"
          ]
        }
      ],
      "variables": [
        "ASSESSMENT_DIR",
        "LOG_FILE",
        "TOTAL_CRITERIA",
        "PASSED_CRITERIA",
        "FAILED_CRITERIA",
        "WARNING_CRITERIA",
        "criterion",
        "result",
        "details",
        "TOTAL_CRITERIA",
        "PASSED_CRITERIA",
        "FAILED_CRITERIA",
        "WARNING_CRITERIA",
        "dir",
        "dir",
        "key_perms",
        "dir",
        "dir",
        "dir",
        "dir",
        "guide_size",
        "deploy_size",
        "start_time",
        "end_time",
        "duration",
        "start_time",
        "end_time",
        "duration",
        "dir",
        "dir",
        "dir",
        "dir",
        "report_file",
        "readiness_score",
        "readiness_score"
      ],
      "imports": [
        "Technical",
        "Security",
        "Documentation",
        "Performance",
        "Integration",
        "Support",
        "###",
        "Deploy",
        "Conduct",
        "Prepare",
        "Launch",
        "###",
        "###",
        "###",
        "Address",
        "Significant"
      ],
      "classes": [],
      "total_lines": 418,
      "code_lines": 296,
      "complexity_score": 48,
      "purpose": "General utility script"
    },
    "scripts/alex-ai-universal-milestone-push.sh": {
      "file_name": "alex-ai-universal-milestone-push.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "print_header",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_step",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "TIMESTAMP",
        "MILESTONE_ID",
        "ARCHIVE_NAME",
        "SUMMARY_FILE",
        "LOG_FILE",
        "Log"
      ],
      "imports": [
        "optimization",
        "Deploy",
        "Activate",
        "Integrate",
        "Enable",
        "Cross-project",
        "Performance",
        "Advanced",
        "Quality",
        "Collective",
        "Self-improving",
        "Universal",
        "Advanced",
        "Deploy",
        "Activate",
        "Integrate",
        "Enable"
      ],
      "classes": [],
      "total_lines": 371,
      "code_lines": 260,
      "complexity_score": 20,
      "purpose": "General utility script"
    },
    "scripts/validate-api-keys.sh": {
      "file_name": "validate-api-keys.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "validate_key_format",
          "parameters": [],
          "lines": 24,
          "complexity": 4,
          "calls": [],
          "variables": [
            "key",
            "key_type"
          ]
        },
        {
          "name": "test_api_connectivity",
          "parameters": [],
          "lines": 51,
          "complexity": 6,
          "calls": [],
          "variables": [
            "key",
            "key_type",
            "response",
            "http_code",
            "response",
            "http_code"
          ]
        },
        {
          "name": "validate_all_keys",
          "parameters": [],
          "lines": 101,
          "complexity": 13,
          "calls": [
            "key",
            "Failed",
            "status"
          ],
          "variables": [
            "validation_results",
            "pass_count",
            "fail_count",
            "warn_count",
            "IFS"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 20,
          "complexity": 3,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "VALIDATION_LOG",
        "key",
        "key_type",
        "key",
        "key_type",
        "response",
        "http_code",
        "response",
        "http_code",
        "validation_results",
        "pass_count",
        "fail_count",
        "warn_count",
        "IFS"
      ],
      "imports": [
        "\"$HOME/.alexai-keys/api-keys.env\"",
        "Review"
      ],
      "classes": [],
      "total_lines": 222,
      "code_lines": 178,
      "complexity_score": 22,
      "purpose": "General utility script"
    },
    "scripts/quick-milestone.sh": {
      "file_name": "quick-milestone.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "MILESTONE_TITLE",
        "COMMIT_MSG_FILE"
      ],
      "imports": [
        "#",
        "management"
      ],
      "classes": [],
      "total_lines": 67,
      "code_lines": 41,
      "complexity_score": 2,
      "purpose": "General utility script"
    },
    "scripts/fix-e2e-issues.sh": {
      "file_name": "fix-e2e-issues.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "buttons",
        "button",
        "text",
        "puppeteer",
        "fs",
        "path",
        "CONFIG",
        "testResults",
        "details",
        "result",
        "status",
        "filename",
        "filepath",
        "heading",
        "el",
        "dashboardButtons",
        "buttonElement",
        "testid",
        "buttonElement",
        "buttons",
        "btn",
        "el",
        "resolve",
        "dashboardVisible",
        "resolve",
        "jobCards",
        "length",
        "firstJobCard",
        "resolve",
        "isSelected",
        "el",
        "applyButton",
        "buttonText",
        "el",
        "healthResponse",
        "response",
        "mockDataResponse",
        "response",
        "browser",
        "page",
        "reportPath",
        "main",
        "error",
        "exports",
        "addTestIds",
        "buttons",
        "button",
        "text",
        "readyState"
      ],
      "imports": [
        "Page",
        "Dashboard",
        "API",
        "Job",
        "Adding",
        "Creating",
        "Creating",
        "temp_page_fix.js",
        "scripts/testing/e2e_testing/consolidated_e2e_testing.py",
        "scripts/testing/unit_testing/consolidated_unit_testing.py",
        "Run",
        "Add",
        "Fix",
        "Improve"
      ],
      "classes": [],
      "total_lines": 396,
      "code_lines": 325,
      "complexity_score": 39,
      "purpose": "General utility script"
    },
    "scripts/add-architecture-memory.py": {
      "file_name": "add-architecture-memory.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 29,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "AlexAIArchitectureMemoryAdder",
            "add_memory",
            "print",
            "print",
            "items",
            "print",
            "print",
            "get",
            "print",
            "print",
            "print",
            "get",
            "len",
            "upper"
          ],
          "variables": [
            "memory_adder",
            "results",
            "success_count",
            "status"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 93,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "save_memory_to_file",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 2,
          "calls": [
            "strftime",
            "isoformat",
            "open",
            "dump",
            "now",
            "now",
            "str"
          ],
          "variables": [
            "timestamp",
            "filename",
            "memory_file"
          ]
        },
        {
          "name": "create_memory_summary",
          "parameters": [
            "self"
          ],
          "lines": 35,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "add_memory",
          "parameters": [
            "self"
          ],
          "lines": 38,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "save_memory_to_file",
            "get",
            "print",
            "create_memory_summary",
            "print",
            "print",
            "print",
            "print",
            "print",
            "strftime",
            "print",
            "open",
            "write",
            "print",
            "now",
            "str",
            "get",
            "get",
            "str"
          ],
          "variables": [
            "results",
            "file_result",
            "summary",
            "timestamp",
            "summary_filename"
          ]
        }
      ],
      "variables": [
        "memory_adder",
        "results",
        "success_count",
        "results",
        "file_result",
        "summary",
        "status",
        "timestamp",
        "filename",
        "memory_file",
        "timestamp",
        "summary_filename"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [
        "AlexAIArchitectureMemoryAdder"
      ],
      "total_lines": 248,
      "code_lines": 200,
      "complexity_score": 7,
      "purpose": "General utility script"
    },
    "scripts/analyze-production-changes.sh": {
      "file_name": "analyze-production-changes.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "analyze_production_changes",
          "parameters": [],
          "lines": 72,
          "complexity": 5,
          "calls": [
            "Production"
          ],
          "variables": [
            "summary_file",
            "total_workflows",
            "analyzed_workflows",
            "workflow_name"
          ]
        },
        {
          "name": "analyze_workflow_impact",
          "parameters": [],
          "lines": 49,
          "complexity": 2,
          "calls": [
            "select",
            "select",
            "select"
          ],
          "variables": [
            "workflow_name",
            "workflow_file",
            "summary_file",
            "node_count",
            "connection_count",
            "webhook_count",
            "type",
            "function_count",
            "type",
            "http_request_count",
            "type",
            "complexity_score",
            "risk_level",
            "risk_level",
            "risk_level"
          ]
        },
        {
          "name": "get_workflow_analysis",
          "parameters": [],
          "lines": 50,
          "complexity": 17,
          "calls": [
            "select",
            "select",
            "select",
            "select",
            "select"
          ],
          "variables": [
            "workflow_file",
            "issues",
            "recommendations",
            "type",
            "type",
            "type",
            "type",
            "error_handling",
            "type",
            "type",
            "result",
            "result",
            "result",
            "result"
          ]
        },
        {
          "name": "get_security_analysis",
          "parameters": [],
          "lines": 29,
          "complexity": 8,
          "calls": [
            "select",
            "select",
            "detected",
            "select"
          ],
          "variables": [
            "workflow_file",
            "security_issues",
            "auth_nodes",
            "http_urls",
            "sensitive_patterns"
          ]
        },
        {
          "name": "get_performance_analysis",
          "parameters": [],
          "lines": 29,
          "complexity": 10,
          "calls": [
            "workflow",
            "connections",
            "select",
            "nodes"
          ],
          "variables": [
            "workflow_file",
            "performance_issues",
            "node_count",
            "connection_count",
            "function_count",
            "type"
          ]
        },
        {
          "name": "get_dependency_analysis",
          "parameters": [],
          "lines": 29,
          "complexity": 8,
          "calls": [
            "select",
            "dependencies",
            "select",
            "contains",
            "contains",
            "dependencies",
            "select",
            "dependencies"
          ],
          "variables": [
            "workflow_file",
            "dependencies",
            "api_calls",
            "type",
            "db_connections",
            "file_access",
            "type",
            "type"
          ]
        },
        {
          "name": "assess_overall_risk",
          "parameters": [],
          "lines": 28,
          "complexity": 5,
          "calls": [
            "then",
            "then",
            "else"
          ],
          "variables": [
            "high_risk_count",
            "medium_risk_count",
            "low_risk_count",
            "node_count",
            "complexity_score"
          ]
        },
        {
          "name": "generate_risk_assessment",
          "parameters": [],
          "lines": 11,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "count_risk_level",
          "parameters": [],
          "lines": 31,
          "complexity": 7,
          "calls": [
            "then",
            "then",
            "then"
          ],
          "variables": [
            "risk_level",
            "count",
            "node_count",
            "complexity_score"
          ]
        },
        {
          "name": "generate_impact_matrix",
          "parameters": [],
          "lines": 38,
          "complexity": 7,
          "calls": [
            "select",
            "select"
          ],
          "variables": [
            "workflow_name",
            "node_count",
            "complexity_score",
            "risk_level",
            "risk_level",
            "risk_level",
            "security_status",
            "security_status",
            "performance_status",
            "performance_status",
            "dependency_status",
            "type",
            "dependency_status"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 14,
          "complexity": 2,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "ANALYSIS_DIR",
        "WORKFLOWS_DIR",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "summary_file",
        "total_workflows",
        "analyzed_workflows",
        "workflow_name",
        "workflow_name",
        "workflow_file",
        "summary_file",
        "node_count",
        "connection_count",
        "webhook_count",
        "type",
        "function_count",
        "type",
        "http_request_count",
        "type",
        "complexity_score",
        "risk_level",
        "risk_level",
        "risk_level",
        "workflow_file",
        "issues",
        "recommendations",
        "type",
        "type",
        "type",
        "type",
        "error_handling",
        "type",
        "type",
        "result",
        "result",
        "result",
        "result",
        "workflow_file",
        "security_issues",
        "auth_nodes",
        "http_urls",
        "sensitive_patterns",
        "workflow_file",
        "performance_issues",
        "node_count",
        "connection_count",
        "function_count",
        "type",
        "workflow_file",
        "dependencies",
        "api_calls",
        "type",
        "db_connections",
        "file_access",
        "type",
        "type",
        "high_risk_count",
        "medium_risk_count",
        "low_risk_count",
        "node_count",
        "complexity_score",
        "risk_level",
        "count",
        "node_count",
        "complexity_score",
        "workflow_name",
        "node_count",
        "complexity_score",
        "risk_level",
        "risk_level",
        "risk_level",
        "security_status",
        "security_status",
        "performance_status",
        "performance_status",
        "dependency_status",
        "type",
        "dependency_status"
      ],
      "imports": [
        "##",
        "**Review",
        "**Test",
        "**Security",
        "**Dependency",
        "**Performance",
        "**Integration"
      ],
      "classes": [],
      "total_lines": 438,
      "code_lines": 295,
      "complexity_score": 63,
      "purpose": "General utility script"
    },
    "scripts/comprehensive-string-fix.sh": {
      "file_name": "comprehensive-string-fix.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_echo",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "fix_script",
          "parameters": [],
          "lines": 20,
          "complexity": 1,
          "calls": [
            "safe_echo"
          ],
          "variables": [
            "script"
          ]
        },
        {
          "name": "safe_echo",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "safe_status",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": [
            "component",
            "status",
            "icon"
          ]
        },
        {
          "name": "safe_milestone",
          "parameters": [],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "safe_progress",
          "parameters": [],
          "lines": 11,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        },
        {
          "name": "safe_list",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "items"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_master_safe_script",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [
            "safe_echo"
          ],
          "variables": []
        },
        {
          "name": "safe_echo",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "safe_status",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": [
            "component",
            "status",
            "icon"
          ]
        },
        {
          "name": "safe_milestone",
          "parameters": [],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "safe_progress",
          "parameters": [],
          "lines": 11,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        },
        {
          "name": "safe_list",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "items"
          ]
        },
        {
          "name": "safe_execute",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "command",
            "description"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "demonstrate_fix",
          "parameters": [],
          "lines": 24,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "script",
        "component",
        "status",
        "icon",
        "title",
        "description",
        "step",
        "status",
        "title",
        "items",
        "component",
        "status",
        "icon",
        "title",
        "description",
        "step",
        "status",
        "title",
        "items",
        "command",
        "description"
      ],
      "imports": [
        "scripts/master-safe-execute.sh",
        "scripts/master-safe-execute.sh'"
      ],
      "classes": [],
      "total_lines": 253,
      "code_lines": 171,
      "complexity_score": 8,
      "purpose": "General utility script"
    },
    "scripts/credential-validator.sh": {
      "file_name": "credential-validator.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "required_vars",
        "missing_vars",
        "optional_vars",
        "available_optional"
      ],
      "imports": [
        "./scripts/deployment/general/consolidated_general.py"
      ],
      "classes": [],
      "total_lines": 76,
      "code_lines": 55,
      "complexity_score": 8,
      "purpose": "General utility script"
    },
    "scripts/alex-ai-universal-git-milestone-push.sh": {
      "file_name": "alex-ai-universal-git-milestone-push.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "print_header",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_step",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_git_repo",
          "parameters": [],
          "lines": 6,
          "complexity": 2,
          "calls": [],
          "variables": []
        },
        {
          "name": "get_current_branch",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_git_status",
          "parameters": [],
          "lines": 8,
          "complexity": 2,
          "calls": [],
          "variables": [
            "status"
          ]
        },
        {
          "name": "commit_and_push",
          "parameters": [],
          "lines": 46,
          "complexity": 4,
          "calls": [],
          "variables": [
            "project_name",
            "commit_message",
            "tag_message",
            "current_branch",
            "git_status"
          ]
        },
        {
          "name": "create_milestone_summary",
          "parameters": [],
          "lines": 138,
          "complexity": 9,
          "calls": [
            "Push",
            "System",
            "Development",
            "system",
            "main",
            "Benefits",
            "Benefits",
            "Project"
          ],
          "variables": [
            "summary_file"
          ]
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "TIMESTAMP",
        "MILESTONE_TAG",
        "status",
        "project_name",
        "commit_message",
        "tag_message",
        "current_branch",
        "git_status",
        "summary_file",
        "COMMIT_MESSAGE",
        "TAG_MESSAGE"
      ],
      "imports": [
        "#",
        "optimization"
      ],
      "classes": [],
      "total_lines": 326,
      "code_lines": 219,
      "complexity_score": 21,
      "purpose": "General utility script"
    },
    "scripts/claude-api-fix-final.sh": {
      "file_name": "claude-api-fix-final.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY"
      ],
      "imports": [
        "\ud83c\udf10",
        "\ud83d\udd11",
        "\ud83d\udcdd",
        "\ud83d\udd04",
        "~/.zshrc\"",
        "\ud83e\uddea",
        "This"
      ],
      "classes": [],
      "total_lines": 77,
      "code_lines": 64,
      "complexity_score": 4,
      "purpose": "General utility script"
    },
    "scripts/script-analyzer.py": {
      "file_name": "script-analyzer.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 39,
          "complexity": 6,
          "calls": [
            "print",
            "print",
            "ScriptAnalyzer",
            "print",
            "generate_analysis_report",
            "save_analysis",
            "save_memory",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "analyzer",
            "analysis"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "scripts_dir"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "define_categories"
          ],
          "variables": []
        },
        {
          "name": "define_categories",
          "parameters": [
            "self"
          ],
          "lines": 139,
          "complexity": 1,
          "calls": [
            "ScriptCategory",
            "ScriptCategory",
            "ScriptCategory",
            "ScriptCategory",
            "ScriptCategory",
            "ScriptCategory",
            "ScriptCategory",
            "ScriptCategory"
          ],
          "variables": []
        },
        {
          "name": "analyze_script",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 60,
          "complexity": 2,
          "calls": [
            "stat",
            "basename",
            "lower",
            "split",
            "len",
            "extract_functions",
            "extract_variables",
            "extract_comments",
            "determine_purpose",
            "categorize_script",
            "calculate_complexity",
            "extract_tags",
            "find_related_scripts",
            "ScriptMetadata",
            "open",
            "read",
            "hexdigest",
            "error",
            "isoformat",
            "isoformat",
            "extract_dependencies",
            "split",
            "sha256",
            "encode",
            "fromtimestamp",
            "fromtimestamp"
          ],
          "variables": [
            "file_stat",
            "file_name",
            "file_type",
            "file_hash",
            "lines",
            "line_count",
            "functions",
            "variables",
            "comments",
            "purpose",
            "complexity_score",
            "tags",
            "related_scripts",
            "content"
          ]
        },
        {
          "name": "extract_functions",
          "parameters": [
            "self",
            "content",
            "file_type"
          ],
          "lines": 19,
          "complexity": 6,
          "calls": [
            "findall",
            "findall",
            "findall"
          ],
          "variables": [
            "functions",
            "pattern",
            "functions",
            "pattern",
            "functions",
            "pattern",
            "matches",
            "functions"
          ]
        },
        {
          "name": "extract_variables",
          "parameters": [
            "self",
            "content",
            "file_type"
          ],
          "lines": 18,
          "complexity": 4,
          "calls": [
            "list",
            "findall",
            "set",
            "findall",
            "findall"
          ],
          "variables": [
            "variables",
            "pattern",
            "variables",
            "pattern",
            "variables",
            "pattern",
            "variables"
          ]
        },
        {
          "name": "extract_comments",
          "parameters": [
            "self",
            "content",
            "file_type"
          ],
          "lines": 19,
          "complexity": 6,
          "calls": [
            "findall",
            "strip",
            "findall",
            "strip",
            "findall"
          ],
          "variables": [
            "comments",
            "pattern",
            "comments",
            "pattern",
            "comments",
            "pattern",
            "matches",
            "comments"
          ]
        },
        {
          "name": "determine_purpose",
          "parameters": [
            "self",
            "content",
            "file_name"
          ],
          "lines": 27,
          "complexity": 7,
          "calls": [
            "search",
            "lower",
            "strip",
            "lower",
            "lower",
            "group",
            "lower"
          ],
          "variables": [
            "purpose_indicators",
            "match"
          ]
        },
        {
          "name": "categorize_script",
          "parameters": [
            "self",
            "content",
            "file_name"
          ],
          "lines": 27,
          "complexity": 11,
          "calls": [
            "lower",
            "lower",
            "items",
            "search",
            "search",
            "items",
            "any",
            "list",
            "split",
            "keys",
            "lower"
          ],
          "variables": [
            "content_lower",
            "file_name_lower",
            "best_subcategory",
            "best_score",
            "score",
            "best_score",
            "best_subcategory"
          ]
        },
        {
          "name": "calculate_complexity",
          "parameters": [
            "self",
            "content",
            "file_type"
          ],
          "lines": 29,
          "complexity": 2,
          "calls": [
            "split",
            "min",
            "min",
            "len",
            "len",
            "findall"
          ],
          "variables": [
            "score",
            "lines",
            "complexity_patterns",
            "matches"
          ]
        },
        {
          "name": "extract_tags",
          "parameters": [
            "self",
            "content",
            "file_name"
          ],
          "lines": 24,
          "complexity": 4,
          "calls": [
            "lower",
            "items",
            "list",
            "set",
            "search",
            "append",
            "lower"
          ],
          "variables": [
            "tags",
            "tag_patterns",
            "content_lower"
          ]
        },
        {
          "name": "find_related_scripts",
          "parameters": [
            "self",
            "content",
            "file_name"
          ],
          "lines": 17,
          "complexity": 4,
          "calls": [
            "findall",
            "extend",
            "list",
            "lower",
            "extend",
            "lower",
            "extend",
            "lower",
            "extend",
            "set",
            "listdir",
            "listdir",
            "listdir",
            "lower",
            "lower",
            "lower"
          ],
          "variables": [
            "related",
            "script_refs"
          ]
        },
        {
          "name": "extract_dependencies",
          "parameters": [
            "self",
            "content",
            "file_type"
          ],
          "lines": 19,
          "complexity": 5,
          "calls": [
            "list",
            "extend",
            "set",
            "findall",
            "extend",
            "findall",
            "findall",
            "extend"
          ],
          "variables": [
            "dependencies",
            "pattern",
            "pattern",
            "pattern",
            "matches"
          ]
        },
        {
          "name": "analyze_all_scripts",
          "parameters": [
            "self"
          ],
          "lines": 20,
          "complexity": 6,
          "calls": [
            "info",
            "walk",
            "info",
            "analyze_script",
            "endswith",
            "append",
            "info",
            "append",
            "len",
            "join"
          ],
          "variables": [
            "script_files",
            "metadata"
          ]
        },
        {
          "name": "generate_analysis_report",
          "parameters": [
            "self"
          ],
          "lines": 47,
          "complexity": 4,
          "calls": [
            "find_potential_duplicates",
            "find_redundant_scripts",
            "generate_recommendations",
            "analyze_all_scripts",
            "append",
            "isoformat",
            "len",
            "sum",
            "sum",
            "asdict",
            "now"
          ],
          "variables": [
            "category_stats",
            "duplicates",
            "redundant",
            "recommendations",
            "category"
          ]
        },
        {
          "name": "find_potential_duplicates",
          "parameters": [
            "self"
          ],
          "lines": 31,
          "complexity": 8,
          "calls": [
            "items",
            "enumerate",
            "append",
            "len",
            "append",
            "are_scripts_similar",
            "append"
          ],
          "variables": [
            "duplicates",
            "hash_groups"
          ]
        },
        {
          "name": "are_scripts_similar",
          "parameters": [
            "self",
            "script1",
            "script2"
          ],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "set",
            "set",
            "set",
            "set",
            "split",
            "split",
            "len",
            "len",
            "split",
            "split",
            "len",
            "len",
            "intersection",
            "union",
            "intersection",
            "union",
            "replace",
            "replace",
            "lower",
            "lower",
            "lower",
            "lower"
          ],
          "variables": [
            "name1_words",
            "name2_words",
            "name_similarity",
            "purpose1_words",
            "purpose2_words",
            "purpose_similarity"
          ]
        },
        {
          "name": "find_redundant_scripts",
          "parameters": [
            "self"
          ],
          "lines": 23,
          "complexity": 5,
          "calls": [
            "items",
            "append",
            "len",
            "append",
            "len",
            "len"
          ],
          "variables": [
            "redundant",
            "category_groups",
            "key"
          ]
        },
        {
          "name": "generate_recommendations",
          "parameters": [
            "self"
          ],
          "lines": 38,
          "complexity": 6,
          "calls": [
            "items",
            "append",
            "append",
            "get",
            "append",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "recommendations",
            "category_counts",
            "complex_scripts",
            "dependency_heavy"
          ]
        },
        {
          "name": "save_analysis",
          "parameters": [
            "self",
            "analysis"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "info",
            "open",
            "dump"
          ],
          "variables": []
        },
        {
          "name": "save_memory",
          "parameters": [
            "self",
            "analysis"
          ],
          "lines": 14,
          "complexity": 1,
          "calls": [
            "info",
            "isoformat",
            "open",
            "dump",
            "now"
          ],
          "variables": [
            "memory_data"
          ]
        },
        {
          "name": "search_scripts",
          "parameters": [
            "self",
            "query"
          ],
          "lines": 30,
          "complexity": 7,
          "calls": [
            "lower",
            "sort",
            "any",
            "any",
            "lower",
            "lower",
            "append",
            "lower",
            "lower"
          ],
          "variables": [
            "query_lower",
            "results",
            "score"
          ]
        }
      ],
      "variables": [
        "logger",
        "analyzer",
        "analysis",
        "functions",
        "variables",
        "comments",
        "purpose_indicators",
        "content_lower",
        "file_name_lower",
        "score",
        "lines",
        "complexity_patterns",
        "tags",
        "tag_patterns",
        "content_lower",
        "related",
        "script_refs",
        "dependencies",
        "script_files",
        "category_stats",
        "duplicates",
        "redundant",
        "recommendations",
        "duplicates",
        "hash_groups",
        "name1_words",
        "name2_words",
        "name_similarity",
        "purpose1_words",
        "purpose2_words",
        "purpose_similarity",
        "redundant",
        "category_groups",
        "recommendations",
        "category_counts",
        "complex_scripts",
        "dependency_heavy",
        "memory_data",
        "query_lower",
        "results",
        "file_stat",
        "file_name",
        "file_type",
        "file_hash",
        "lines",
        "line_count",
        "functions",
        "variables",
        "comments",
        "purpose",
        "complexity_score",
        "tags",
        "related_scripts",
        "pattern",
        "functions",
        "pattern",
        "variables",
        "pattern",
        "comments",
        "match",
        "matches",
        "pattern",
        "metadata",
        "category",
        "key",
        "score",
        "content",
        "pattern",
        "functions",
        "pattern",
        "variables",
        "pattern",
        "comments",
        "pattern",
        "pattern",
        "matches",
        "functions",
        "pattern",
        "variables",
        "pattern",
        "matches",
        "comments",
        "best_subcategory",
        "best_score",
        "pattern",
        "matches",
        "score",
        "best_score",
        "best_subcategory"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "hashlib",
        "re",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional",
        "logging",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "pathlib.Path"
      ],
      "classes": [
        "ScriptMetadata",
        "ScriptCategory",
        "ScriptAnalyzer"
      ],
      "total_lines": 743,
      "code_lines": 579,
      "complexity_score": 93,
      "purpose": "\\s*(.+)',\n            r'# Description:\\s*(.+)',\n            r'# This script\\s*(.+)',\n            r'# TODO:\\s*(.+)',\n            r'# NOTE:\\s*(.+)'\n        ]\n        \n        for pattern in purpose_indicators:\n            match = re.search(pattern, content, re.IGNORECASE)\n            if match:\n                return match.group(1).strip()\n        \n        # Fallback to filename analysis\n        if 'test' in file_name.lower():\n            return \"Testing and validation\"\n        elif 'deploy' in file_name.lower():\n            return \"Deployment and setup\"\n        elif 'sync' in file_name.lower():\n            return \"Synchronization and data management\"\n        elif 'monitor' in file_name.lower():\n            return \"Monitoring and health checking\"\n        else:\n            return \"General utility script\"\n    \n    def categorize_script(self, content: str, file_name: str) -> Tuple[str, str]:\n        \"\"\"Categorize script based on content and filename\"\"\"\n        content_lower = content.lower()\n        file_name_lower = file_name.lower()\n        \n        # Check each category\n        for category_name, category in self.categories.items():\n            for pattern in category.patterns:\n                if re.search(pattern, content_lower) or re.search(pattern, file_name_lower):\n                    # Find best subcategory\n                    best_subcategory = None\n                    best_score = 0\n                    \n                    for subcat_name, subcat_desc in category.subcategories.items():\n                        score = 0\n                        if subcat_name in content_lower or subcat_name in file_name_lower:\n                            score += 2\n                        if any(word in content_lower for word in subcat_desc.lower().split()):\n                            score += 1\n                        \n                        if score > best_score:\n                            best_score = score\n                            best_subcategory = subcat_name\n                    \n                    return category_name, best_subcategory or list(category.subcategories.keys())[0]\n        \n        return \"utilities\", \"general\"\n    \n    def calculate_complexity(self, content: str, file_type: str) -> int:\n        \"\"\"Calculate complexity score for the script\"\"\"\n        score = 0\n        \n        # Base score from line count\n        lines = content.split('\\n')\n        score += min(len(lines) // 10, 10)  # Max 10 points for length\n        \n        # Add points for complexity indicators\n        complexity_patterns = [\n            (r'if\\s+', 1),  # Conditionals\n            (r'for\\s+', 1),  # Loops\n            (r'while\\s+', 1),  # While loops\n            (r'function\\s+', 2),  # Functions\n            (r'def\\s+', 2),  # Python functions\n            (r'class\\s+', 3),  # Classes\n            (r'try\\s*\\{', 2),  # Error handling\n            (r'catch\\s*\\(', 2),  # Error handling\n            (r'except\\s+', 2),  # Python error handling\n            (r'curl\\s+', 1),  # API calls\n            (r'requests\\.', 1),  # Python requests\n            (r'axios\\.', 1),  # JavaScript axios\n        ]\n        \n        for pattern, points in complexity_patterns:\n            matches = len(re.findall(pattern, content, re.IGNORECASE))\n            score += matches * points\n        \n        return min(score, 100)  # Cap at 100\n    \n    def extract_tags(self, content: str, file_name: str) -> List[str]:\n        \"\"\"Extract relevant tags from script content\"\"\"\n        tags = []\n        \n        # Common tags based on content\n        tag_patterns = {\n            'api': r'api|endpoint|http|curl|requests',\n            'database': r'database|sql|supabase|postgres|mysql',\n            'ai': r'ai|claude|openai|llm|prompt|intelligence',\n            'n8n': r'n8n|workflow|automation',\n            'security': r'security|auth|credential|key|token',\n            'testing': r'test|validate|check|verify',\n            'deployment': r'deploy|setup|install|configure',\n            'monitoring': r'monitor|log|health|status|alert',\n            'data': r'data|sync|migrate|import|export',\n            'utility': r'util|helper|tool|cleanup|optimize'\n        }\n        \n        content_lower = content.lower()\n        for tag, pattern in tag_patterns.items():\n            if re.search(pattern, content_lower) or tag in file_name.lower():\n                tags.append(tag)\n        \n        return list(set(tags))\n    \n    def find_related_scripts(self, content: str, file_name: str) -> List[str]:\n        \"\"\"Find scripts that might be related to this one\"\"\"\n        related = []\n        \n        # Look for script references in content\n        script_refs = re.findall(r'\\./([a-zA-Z0-9_-]+\\.(?:sh|py|js))', content)\n        related.extend(script_refs)\n        \n        # Look for common patterns that might indicate relationships\n        if 'n8n' in content.lower():\n            related.extend([f for f in os.listdir(self.scripts_dir) if 'n8n' in f.lower()])\n        if 'test' in file_name.lower():\n            related.extend([f for f in os.listdir(self.scripts_dir) if 'test' in f.lower()])\n        if 'deploy' in file_name.lower():\n            related.extend([f for f in os.listdir(self.scripts_dir) if 'deploy' in f.lower()])\n        \n        return list(set(related))\n    \n    def extract_dependencies(self, content: str, file_type: str) -> List[str]:\n        \"\"\"Extract dependencies from script content\"\"\"\n        dependencies = []\n        \n        if file_type == 'py':\n            # Python imports\n            pattern = r'import\\s+([a-zA-Z_][a-zA-Z0-9_]*)'\n            dependencies.extend(re.findall(pattern, content))\n        elif file_type == 'sh':\n            # Bash dependencies (commands)\n            pattern = r'^([a-zA-Z_][a-zA-Z0-9_-]*)\\s*$'\n            dependencies.extend(re.findall(pattern, content, re.MULTILINE))\n        elif file_type == 'js':\n            # JavaScript requires/imports\n            pattern = r'require\\([\\'\"]([^\\'\"]+)[\\'\"]\\)|import\\s+.*from\\s+[\\'\"]([^\\'\"]+)[\\'\"]'\n            matches = re.findall(pattern, content)\n            dependencies.extend([match[0] or match[1] for match in matches])\n        \n        return list(set(dependencies))\n    \n    def analyze_all_scripts(self) -> List[ScriptMetadata]:\n        \"\"\"Analyze all scripts in the directory\"\"\"\n        logger.info(f\"Analyzing scripts in {self.scripts_dir}...\")\n        \n        script_files = []\n        for root, dirs, files in os.walk(self.scripts_dir):\n            for file in files:\n                if file.endswith(('.sh', '.py', '.js')):\n                    script_files.append(os.path.join(root, file))\n        \n        logger.info(f\"Found {len(script_files)} script files\")\n        \n        self.scripts_metadata = []\n        for script_file in script_files:\n            metadata = self.analyze_script(script_file)\n            if metadata:\n                self.scripts_metadata.append(metadata)\n                logger.info(f\"Analyzed: {metadata.file_name}\")\n        \n        return self.scripts_metadata\n    \n    def generate_analysis_report(self) -> Dict:\n        \"\"\"Generate comprehensive analysis report\"\"\"\n        if not self.scripts_metadata:\n            self.analyze_all_scripts()\n        \n        # Categorize scripts\n        category_stats = {}\n        for script in self.scripts_metadata:\n            category = script.category\n            if category not in category_stats:\n                category_stats[category] = {\n                    'count': 0,\n                    'total_lines': 0,\n                    'total_size': 0,\n                    'scripts': []\n                }\n            \n            category_stats[category]['count'] += 1\n            category_stats[category]['total_lines'] += script.line_count\n            category_stats[category]['total_size'] += script.size_bytes\n            category_stats[category]['scripts'].append({\n                'name': script.file_name,\n                'path': script.file_path,\n                'lines': script.line_count,\n                'purpose': script.purpose\n            })\n        \n        # Find potential duplicates\n        duplicates = self.find_potential_duplicates()\n        \n        # Find redundant scripts\n        redundant = self.find_redundant_scripts()\n        \n        # Generate recommendations\n        recommendations = self.generate_recommendations()\n        \n        return {\n            'analysis_timestamp': datetime.now().isoformat(),\n            'total_scripts': len(self.scripts_metadata),\n            'total_lines': sum(s.line_count for s in self.scripts_metadata),\n            'total_size': sum(s.size_bytes for s in self.scripts_metadata),\n            'categories': category_stats,\n            'potential_duplicates': duplicates,\n            'redundant_scripts': redundant,\n            'recommendations': recommendations,\n            'scripts': [asdict(script) for script in self.scripts_metadata]\n        }\n    \n    def find_potential_duplicates(self) -> List[Dict]:\n        \"\"\"Find potentially duplicate scripts\"\"\"\n        duplicates = []\n        \n        # Group by hash\n        hash_groups = {}\n        for script in self.scripts_metadata:\n            if script.hash not in hash_groups:\n                hash_groups[script.hash] = []\n            hash_groups[script.hash].append(script)\n        \n        # Find groups with multiple scripts\n        for hash_val, scripts in hash_groups.items():\n            if len(scripts) > 1:\n                duplicates.append({\n                    'hash': hash_val,\n                    'scripts': [s.file_name for s in scripts],\n                    'similarity': 'exact'\n                })\n        \n        # Find scripts with similar names and purposes\n        for i, script1 in enumerate(self.scripts_metadata):\n            for script2 in self.scripts_metadata[i+1:]:\n                if self.are_scripts_similar(script1, script2):\n                    duplicates.append({\n                        'scripts': [script1.file_name, script2.file_name],\n                        'similarity': 'name_and_purpose',\n                        'reason': f\"Similar names and purposes: {script1.purpose} vs {script2.purpose}\"\n                    })\n        \n        return duplicates\n    \n    def are_scripts_similar(self, script1: ScriptMetadata, script2: ScriptMetadata) -> bool:\n        \"\"\"Check if two scripts are similar\"\"\"\n        # Check name similarity\n        name1_words = set(script1.file_name.lower().replace('.', ' ').split())\n        name2_words = set(script2.file_name.lower().replace('.', ' ').split())\n        name_similarity = len(name1_words.intersection(name2_words)) / len(name1_words.union(name2_words))\n        \n        # Check purpose similarity\n        purpose1_words = set(script1.purpose.lower().split())\n        purpose2_words = set(script2.purpose.lower().split())\n        purpose_similarity = len(purpose1_words.intersection(purpose2_words)) / len(purpose1_words.union(purpose2_words))\n        \n        return name_similarity > 0.5 or purpose_similarity > 0.7\n    \n    def find_redundant_scripts(self) -> List[Dict]:\n        \"\"\"Find potentially redundant scripts\"\"\"\n        redundant = []\n        \n        # Group by category and subcategory\n        category_groups = {}\n        for script in self.scripts_metadata:\n            key = f\"{script.category}_{script.subcategory}\"\n            if key not in category_groups:\n                category_groups[key] = []\n            category_groups[key].append(script)\n        \n        # Find categories with many similar scripts\n        for key, scripts in category_groups.items():\n            if len(scripts) > 3:  # More than 3 scripts in same category\n                redundant.append({\n                    'category': key,\n                    'count': len(scripts),\n                    'scripts': [s.file_name for s in scripts],\n                    'recommendation': f\"Consider consolidating {len(scripts)} scripts in {key}\"\n                })\n        \n        return redundant\n    \n    def generate_recommendations(self) -> List[Dict]:\n        \"\"\"Generate recommendations for script management\"\"\"\n        recommendations = []\n        \n        # Analyze categories\n        category_counts = {}\n        for script in self.scripts_metadata:\n            category_counts[script.category] = category_counts.get(script.category, 0) + 1\n        \n        # Find over-represented categories\n        for category, count in category_counts.items():\n            if count > 10:  # More than 10 scripts in one category\n                recommendations.append({\n                    'type': 'consolidation',\n                    'category': category,\n                    'count': count,\n                    'message': f\"Consider consolidating {count} scripts in {category} category\"\n                })\n        \n        # Find scripts with high complexity\n        complex_scripts = [s for s in self.scripts_metadata if s.complexity_score > 50]\n        if complex_scripts:\n            recommendations.append({\n                'type': 'refactoring',\n                'scripts': [s.file_name for s in complex_scripts],\n                'message': f\"Consider refactoring {len(complex_scripts)} high-complexity scripts\"\n            })\n        \n        # Find scripts with many dependencies\n        dependency_heavy = [s for s in self.scripts_metadata if len(s.dependencies) > 5]\n        if dependency_heavy:\n            recommendations.append({\n                'type': 'dependency_management',\n                'scripts': [s.file_name for s in dependency_heavy],\n                'message': f\"Consider reducing dependencies in {len(dependency_heavy)} scripts\"\n            })\n        \n        return recommendations\n    \n    def save_analysis(self, analysis: Dict):\n        \"\"\"Save analysis to file\"\"\"\n        with open(self.analysis_file, 'w') as f:\n            json.dump(analysis, f, indent=2)\n        logger.info(f\"Analysis saved to {self.analysis_file}\")\n    \n    def save_memory(self, analysis: Dict):\n        \"\"\"Save analysis to memory system for future reference\"\"\"\n        memory_data = {\n            'timestamp': datetime.now().isoformat(),\n            'total_scripts': analysis['total_scripts'],\n            'categories': analysis['categories'],\n            'duplicates': analysis['potential_duplicates'],\n            'redundant': analysis['redundant_scripts'],\n            'recommendations': analysis['recommendations']\n        }\n        \n        with open(self.memory_file, 'w') as f:\n            json.dump(memory_data, f, indent=2)\n        logger.info(f\"Memory saved to {self.memory_file}\")\n    \n    def search_scripts(self, query: str) -> List[ScriptMetadata]:\n        \"\"\"Search for scripts based on query\"\"\"\n        query_lower = query.lower()\n        results = []\n        \n        for script in self.scripts_metadata:\n            score = 0\n            \n            # Check filename\n            if query_lower in script.file_name.lower():\n                score += 3\n            \n            # Check purpose\n            if query_lower in script.purpose.lower():\n                score += 2\n            \n            # Check tags\n            if any(query_lower in tag.lower() for tag in script.tags):\n                score += 2\n            \n            # Check functions\n            if any(query_lower in func.lower() for func in script.functions):\n                score += 1\n            \n            if score > 0:\n                results.append((script, score))\n        \n        # Sort by score\n        results.sort(key=lambda x: x[1], reverse=True)\n        return [script for script, score in results]\n\ndef main():\n    \"\"\"Main function\"\"\"\n    print(\"\ud83d\udd0d Script Analyzer & Memory System\")\n    print(\"=\" * 50)\n    \n    analyzer = ScriptAnalyzer()\n    \n    # Analyze all scripts\n    print(\"\ud83d\udcca Analyzing scripts...\")\n    analysis = analyzer.generate_analysis_report()\n    \n    # Save analysis\n    analyzer.save_analysis(analysis)\n    analyzer.save_memory(analysis)\n    \n    # Print summary\n    print(f\"\\n\ud83d\udcc8 Analysis Summary:\")\n    print(f\"  Total Scripts: {analysis['total_scripts']}\")\n    print(f\"  Total Lines: {analysis['total_lines']:,}\")\n    print(f\"  Total Size: {analysis['total_size']:,} bytes\")\n    print(f\"  Categories: {len(analysis['categories'])}\")\n    print(f\"  Potential Duplicates: {len(analysis['potential_duplicates'])}\")\n    print(f\"  Redundant Scripts: {len(analysis['redundant_scripts'])}\")\n    \n    print(f\"\\n\ud83d\udcc1 Categories:\")\n    for category, stats in analysis['categories'].items():\n        print(f\"  {category}: {stats['count']} scripts\")\n    \n    if analysis['potential_duplicates']:\n        print(f\"\\n\u26a0\ufe0f  Potential Duplicates:\")\n        for dup in analysis['potential_duplicates'][:5]:  # Show first 5\n            print(f\"  {dup['scripts']}\")\n    \n    if analysis['recommendations']:\n        print(f\"\\n\ud83d\udca1 Recommendations:\")\n        for rec in analysis['recommendations'][:5]:  # Show first 5\n            print(f\"  {rec['message']}\")\n    \n    print(f\"\\n\u2705 Analysis complete! Check {analyzer.analysis_file} for details.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    "scripts/cursor-extension-milestone.sh": {
      "file_name": "cursor-extension-milestone.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [],
      "imports": [
        "##",
        "Deploy",
        "Test",
        "Monitor",
        "Iterate",
        "##",
        "Create",
        "Initialize",
        "git",
        "Create",
        "Deploy",
        "Update",
        "Configure",
        "Test"
      ],
      "classes": [],
      "total_lines": 150,
      "code_lines": 93,
      "complexity_score": 10,
      "purpose": "General utility script"
    },
    "scripts/setup-bidirectional-sync.sh": {
      "file_name": "setup-bidirectional-sync.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_step",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_automation",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_prerequisites",
          "parameters": [],
          "lines": 36,
          "complexity": 8,
          "calls": [],
          "variables": [
            "tools"
          ]
        },
        {
          "name": "configure_github_secrets",
          "parameters": [],
          "lines": 52,
          "complexity": 7,
          "calls": [],
          "variables": [
            "repo_url",
            "repo_name",
            "repo_owner",
            "secrets"
          ]
        },
        {
          "name": "enable_scheduled_workflows",
          "parameters": [],
          "lines": 40,
          "complexity": 8,
          "calls": [],
          "variables": [
            "workflow_file",
            "repo_url",
            "repo_name",
            "repo_owner",
            "workflow_runs"
          ]
        },
        {
          "name": "test_system_with_sample_change",
          "parameters": [],
          "lines": 106,
          "complexity": 4,
          "calls": [
            "Date",
            "toISOString",
            "N8N"
          ],
          "variables": [
            "test_workflow",
            "response",
            "http_code",
            "workflow_id",
            "webhook_response",
            "repo_url",
            "repo_name",
            "repo_owner",
            "sync_direction"
          ]
        },
        {
          "name": "setup_dashboard_monitoring",
          "parameters": [],
          "lines": 21,
          "complexity": 2,
          "calls": [],
          "variables": []
        },
        {
          "name": "verify_system",
          "parameters": [],
          "lines": 59,
          "complexity": 6,
          "calls": [
            "failed"
          ],
          "variables": [
            "components",
            "response",
            "http_code",
            "repo_url",
            "repo_name",
            "repo_owner",
            "secrets"
          ]
        },
        {
          "name": "generate_final_report",
          "parameters": [],
          "lines": 90,
          "complexity": 3,
          "calls": [],
          "variables": [
            "report_file",
            "sync_direction"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 28,
          "complexity": 2,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "tools",
        "repo_url",
        "repo_name",
        "repo_owner",
        "secrets",
        "workflow_file",
        "repo_url",
        "repo_name",
        "repo_owner",
        "workflow_runs",
        "test_workflow",
        "response",
        "http_code",
        "workflow_id",
        "webhook_response",
        "repo_url",
        "repo_name",
        "repo_owner",
        "sync_direction",
        "components",
        "response",
        "http_code",
        "repo_url",
        "repo_name",
        "repo_owner",
        "secrets",
        "report_file",
        "sync_direction"
      ],
      "imports": [
        "Run:",
        "Open",
        "The",
        "##",
        "**Monitor**:",
        "**Test**:",
        "**Review**:",
        "**Optimize**:",
        "Monitor",
        "Check",
        "View"
      ],
      "classes": [],
      "total_lines": 491,
      "code_lines": 352,
      "complexity_score": 39,
      "purpose": "Synchronization and data management"
    },
    "scripts/master-safe-execute.sh": {
      "file_name": "master-safe-execute.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_echo",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "safe_status",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": [
            "component",
            "status",
            "icon"
          ]
        },
        {
          "name": "safe_milestone",
          "parameters": [],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "safe_progress",
          "parameters": [],
          "lines": 11,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        },
        {
          "name": "safe_list",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "items"
          ]
        },
        {
          "name": "safe_execute",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "command",
            "description"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "component",
        "status",
        "icon",
        "title",
        "description",
        "step",
        "status",
        "title",
        "items",
        "command",
        "description"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 90,
      "code_lines": 65,
      "complexity_score": 4,
      "purpose": "General utility script"
    },
    "scripts/deploy-missing-n8n-webhooks.sh": {
      "file_name": "deploy-missing-n8n-webhooks.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "create_webhook_workflow",
          "parameters": [],
          "lines": 59,
          "complexity": 2,
          "calls": [],
          "variables": [
            "webhook_name",
            "webhook_path",
            "description",
            "webhook_id",
            "webhook_path_clean"
          ]
        },
        {
          "name": "test_webhook",
          "parameters": [],
          "lines": 21,
          "complexity": 2,
          "calls": [
            "found"
          ],
          "variables": [
            "webhook_name",
            "webhook_path",
            "response",
            "http_code",
            "body"
          ]
        }
      ],
      "variables": [
        "IFS",
        "line",
        "N8N_URL",
        "N8N_API_KEY",
        "webhook_name",
        "webhook_path",
        "description",
        "webhook_id",
        "webhook_path_clean",
        "response",
        "workflow_id",
        "activate_response",
        "webhook_name",
        "webhook_path",
        "response",
        "http_code",
        "body"
      ],
      "imports": [
        "Test",
        "Check",
        "Verify"
      ],
      "classes": [],
      "total_lines": 179,
      "code_lines": 142,
      "complexity_score": 9,
      "purpose": "Deployment and setup"
    },
    "scripts/test-intelligent-discovery.sh": {
      "file_name": "test-intelligent-discovery.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "deploy_n8n_workflows",
          "parameters": [],
          "lines": 11,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 8,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "SCRIPT_DIR",
        "LOG_FILE",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 62,
      "code_lines": 32,
      "complexity_score": 1,
      "purpose": "Testing and validation"
    },
    "scripts/setup-git-remote.sh": {
      "file_name": "setup-git-remote.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "REPO_URL"
      ],
      "imports": [
        "Go",
        "Repository",
        "Description:",
        "Don't",
        "Click",
        "Copy"
      ],
      "classes": [],
      "total_lines": 61,
      "code_lines": 48,
      "complexity_score": 6,
      "purpose": "General utility script"
    },
    "scripts/setup-hourly-scraping.sh": {
      "file_name": "setup-hourly-scraping.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "check_url",
          "parameters": [],
          "lines": 8,
          "complexity": 2,
          "calls": [],
          "variables": [
            "url"
          ]
        },
        {
          "name": "setup_database",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": []
        },
        {
          "name": "initialize_configs",
          "parameters": [],
          "lines": 14,
          "complexity": 2,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_cron_endpoint",
          "parameters": [],
          "lines": 14,
          "complexity": 2,
          "calls": [],
          "variables": [
            "action",
            "secret",
            "response",
            "action",
            "secret"
          ]
        },
        {
          "name": "create_cron_job",
          "parameters": [],
          "lines": 18,
          "complexity": 3,
          "calls": [
            "job"
          ],
          "variables": [
            "cron_command",
            "action",
            "secret"
          ]
        },
        {
          "name": "create_systemd_timer",
          "parameters": [],
          "lines": 38,
          "complexity": 1,
          "calls": [
            "timer"
          ],
          "variables": [
            "Description",
            "After",
            "Type",
            "ExecStart",
            "action",
            "secret",
            "User",
            "Group",
            "Description",
            "Requires",
            "OnCalendar",
            "Persistent",
            "WantedBy"
          ]
        },
        {
          "name": "create_webhook_scheduling",
          "parameters": [],
          "lines": 30,
          "complexity": 3,
          "calls": [
            "platforms",
            "hour"
          ],
          "variables": [
            "action",
            "secret",
            "action",
            "secret",
            "action",
            "secret",
            "action",
            "secret"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 73,
          "complexity": 4,
          "calls": [
            "job",
            "timer",
            "based",
            "choice"
          ],
          "variables": [
            "action",
            "secret",
            "action",
            "secret",
            "action",
            "secret"
          ]
        }
      ],
      "variables": [
        "APP_URL",
        "CRON_SECRET",
        "url",
        "action",
        "secret",
        "response",
        "action",
        "secret",
        "cron_command",
        "action",
        "secret",
        "Description",
        "After",
        "Type",
        "ExecStart",
        "action",
        "secret",
        "User",
        "Group",
        "Description",
        "Requires",
        "OnCalendar",
        "Persistent",
        "WantedBy",
        "action",
        "secret",
        "action",
        "secret",
        "action",
        "secret",
        "action",
        "secret",
        "action",
        "secret",
        "action",
        "secret",
        "action",
        "secret"
      ],
      "imports": [
        "**Cron-job.org**",
        "**EasyCron**",
        "**GitHub",
        "**Vercel",
        "Access",
        "Go",
        "Review",
        "Test",
        "Monitor"
      ],
      "classes": [],
      "total_lines": 243,
      "code_lines": 174,
      "complexity_score": 13,
      "purpose": "General utility script"
    },
    "scripts/setup-n8n-bidirectional-sync.sh": {
      "file_name": "setup-n8n-bidirectional-sync.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_prerequisites",
          "parameters": [],
          "lines": 25,
          "complexity": 6,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_directories",
          "parameters": [],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "setup_python_scripts",
          "parameters": [],
          "lines": 19,
          "complexity": 3,
          "calls": [
            "failed"
          ],
          "variables": []
        },
        {
          "name": "create_config_files",
          "parameters": [],
          "lines": 32,
          "complexity": 2,
          "calls": [],
          "variables": [
            "N8N_URL",
            "N8N_API_KEY",
            "WORKFLOWS_DIR",
            "ANALYSIS_DIR",
            "MONITOR_INTERVAL",
            "ALERT_THRESHOLD"
          ]
        },
        {
          "name": "setup_cron_jobs",
          "parameters": [],
          "lines": 28,
          "complexity": 7,
          "calls": [
            "job",
            "sync",
            "else",
            "added"
          ],
          "variables": [
            "CURRENT_DIR",
            "CRON_JOB",
            "MONITOR_CRON"
          ]
        },
        {
          "name": "create_management_scripts",
          "parameters": [],
          "lines": 82,
          "complexity": 6,
          "calls": [
            "open",
            "load",
            "get",
            "print",
            "get",
            "print",
            "get",
            "print",
            "get",
            "get",
            "print",
            "Errors",
            "get",
            "print",
            "open",
            "load",
            "get",
            "print",
            "get",
            "get",
            "get",
            "print"
          ],
          "variables": [
            "data",
            "sync_status",
            "data",
            "operations"
          ]
        },
        {
          "name": "test_setup",
          "parameters": [],
          "lines": 22,
          "complexity": 4,
          "calls": [
            "failed"
          ],
          "variables": []
        },
        {
          "name": "create_documentation",
          "parameters": [],
          "lines": 84,
          "complexity": 5,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 27,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "N8N_URL",
        "WORKFLOWS_DIR",
        "ANALYSIS_DIR",
        "SCRIPTS_DIR",
        "DASHBOARD_DIR",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "N8N_URL",
        "N8N_API_KEY",
        "WORKFLOWS_DIR",
        "ANALYSIS_DIR",
        "MONITOR_INTERVAL",
        "ALERT_THRESHOLD",
        "CURRENT_DIR",
        "CRON_JOB",
        "MONITOR_CRON",
        "data",
        "sync_status",
        "data",
        "operations"
      ],
      "imports": [
        "Please",
        "##",
        "Start",
        "Start",
        "View",
        "Check",
        "**Check",
        "**Check",
        "**Check",
        "**Manual",
        "EOF",
        "Run",
        "Run",
        "Run",
        "Run"
      ],
      "classes": [],
      "total_lines": 396,
      "code_lines": 266,
      "complexity_score": 33,
      "purpose": "Synchronization and data management"
    },
    "scripts/update-zshrc-with-placeholder.sh": {
      "file_name": "update-zshrc-with-placeholder.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "TEMP_FILE",
        "ANTHROPIC_API_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY",
        "CLAUDE_API_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY"
      ],
      "imports": [
        "Go",
        "Create",
        "Replace",
        "Run:",
        "~/.zshrc\"",
        "Test"
      ],
      "classes": [],
      "total_lines": 42,
      "code_lines": 27,
      "complexity_score": 1,
      "purpose": "General utility script"
    },
    "scripts/sync-dashboard.sh": {
      "file_name": "sync-dashboard.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_dashboard",
          "parameters": [],
          "lines": 281,
          "complexity": 5,
          "calls": [
            "rgba",
            "gradient",
            "setTimeout",
            "function",
            "reload",
            "addEventListener",
            "function",
            "log",
            "querySelectorAll",
            "forEach",
            "addEventListener",
            "function",
            "scale",
            "setTimeout",
            "scale"
          ],
          "variables": [
            "dashboard_file",
            "charset",
            "name",
            "content",
            "width",
            "scale",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "change_count",
            "workflow_name",
            "timestamp",
            "change_source",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "class",
            "metrics",
            "metric",
            "transform",
            "transform"
          ]
        },
        {
          "name": "generate_json_data",
          "parameters": [],
          "lines": 64,
          "complexity": 5,
          "calls": [
            "EOF"
          ],
          "variables": [
            "json_file",
            "change_count",
            "workflow_name",
            "timestamp",
            "change_source"
          ]
        },
        {
          "name": "generate_summary_report",
          "parameters": [],
          "lines": 68,
          "complexity": 3,
          "calls": [],
          "variables": [
            "summary_file",
            "activity_count",
            "workflow_name",
            "timestamp"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 17,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "DASHBOARD_DIR",
        "ANALYSIS_DIR",
        "CONFLICT_DIR",
        "WORKFLOWS_DIR",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "dashboard_file",
        "charset",
        "name",
        "content",
        "width",
        "scale",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "change_count",
        "workflow_name",
        "timestamp",
        "change_source",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "class",
        "metrics",
        "metric",
        "transform",
        "transform",
        "json_file",
        "change_count",
        "workflow_name",
        "timestamp",
        "change_source",
        "summary_file",
        "activity_count",
        "workflow_name",
        "timestamp"
      ],
      "imports": [
        "##",
        "Continue",
        "Review",
        "Optimize",
        "Enhance",
        "Implement",
        "Setup"
      ],
      "classes": [],
      "total_lines": 480,
      "code_lines": 399,
      "complexity_score": 12,
      "purpose": "Synchronization and data management"
    },
    "scripts/secure-credential-manager.sh": {
      "file_name": "secure-credential-manager.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "load_credentials",
          "parameters": [],
          "lines": 18,
          "complexity": 4,
          "calls": [],
          "variables": [
            "IFS",
            "line"
          ]
        },
        {
          "name": "validate_credentials",
          "parameters": [],
          "lines": 28,
          "complexity": 5,
          "calls": [],
          "variables": [
            "required_vars",
            "missing_vars"
          ]
        },
        {
          "name": "create_env_files",
          "parameters": [],
          "lines": 49,
          "complexity": 3,
          "calls": [],
          "variables": [
            "NEXT_PUBLIC_SUPABASE_URL",
            "NEXT_PUBLIC_SUPABASE_ANON_KEY",
            "SUPABASE_SERVICE_ROLE_KEY",
            "N8N_URL",
            "N8N_API_KEY",
            "OPENAI_API_KEY",
            "ANTHROPIC_API_KEY",
            "OPENROUTER_API_KEY",
            "GITHUB_TOKEN",
            "VERCEL_TOKEN",
            "NEXT_PUBLIC_SUPABASE_URL",
            "NEXT_PUBLIC_SUPABASE_ANON_KEY",
            "SUPABASE_SERVICE_ROLE_KEY",
            "N8N_URL",
            "N8N_API_KEY",
            "OPENAI_API_KEY",
            "ANTHROPIC_API_KEY",
            "OPENROUTER_API_KEY"
          ]
        },
        {
          "name": "create_supabase_client",
          "parameters": [],
          "lines": 15,
          "complexity": 3,
          "calls": [
            "if",
            "Error"
          ],
          "variables": [
            "supabaseUrl",
            "supabaseServiceKey"
          ]
        },
        {
          "name": "create_n8n_credentials",
          "parameters": [],
          "lines": 20,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_supabase_tables",
          "parameters": [],
          "lines": 108,
          "complexity": 5,
          "calls": [
            "job_opportunities",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW",
            "NOW",
            "contacts",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW",
            "NOW",
            "applications",
            "uuid_generate_v4",
            "job_opportunities",
            "VARCHAR",
            "NOW",
            "NOW",
            "NOW",
            "Table",
            "crew_memories",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW",
            "NOW",
            "user_analytics",
            "uuid_generate_v4",
            "VARCHAR",
            "VARCHAR",
            "VARCHAR",
            "NOW",
            "job_opportunities",
            "job_opportunities",
            "job_opportunities",
            "contacts",
            "applications",
            "crew_memories",
            "crew_memories",
            "user_analytics",
            "user_analytics",
            "Security",
            "policies",
            "USING",
            "USING",
            "USING",
            "USING",
            "USING"
          ],
          "variables": []
        },
        {
          "name": "deploy_n8n_workflows",
          "parameters": [],
          "lines": 136,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_setup",
          "parameters": [],
          "lines": 23,
          "complexity": 3,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 33,
          "complexity": 3,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "IFS",
        "line",
        "required_vars",
        "missing_vars",
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "SUPABASE_SERVICE_ROLE_KEY",
        "N8N_URL",
        "N8N_API_KEY",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "OPENROUTER_API_KEY",
        "GITHUB_TOKEN",
        "VERCEL_TOKEN",
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "SUPABASE_SERVICE_ROLE_KEY",
        "N8N_URL",
        "N8N_API_KEY",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "OPENROUTER_API_KEY",
        "supabaseUrl",
        "supabaseServiceKey",
        "supabaseAdmin"
      ],
      "imports": [
        "VARCHAR(100),",
        "Run:",
        "Deploy",
        "Test"
      ],
      "classes": [],
      "total_lines": 483,
      "code_lines": 394,
      "complexity_score": 23,
      "purpose": "General utility script"
    },
    "scripts/n8n-change-monitor.sh": {
      "file_name": "n8n-change-monitor.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_prerequisites",
          "parameters": [],
          "lines": 28,
          "complexity": 5,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_n8n_connection",
          "parameters": [],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "N8N"
          ],
          "variables": [
            "response",
            "http_code"
          ]
        },
        {
          "name": "get_n8n_workflows",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "response"
          ]
        },
        {
          "name": "compare_workflows",
          "parameters": [],
          "lines": 18,
          "complexity": 4,
          "calls": [],
          "variables": [
            "n8n_workflow",
            "local_file",
            "n8n_normalized",
            "local_normalized"
          ]
        },
        {
          "name": "backup_local_file",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": [
            "local_file",
            "backup_file"
          ]
        },
        {
          "name": "sync_workflow_to_dev",
          "parameters": [],
          "lines": 21,
          "complexity": 1,
          "calls": [],
          "variables": [
            "workflow_name",
            "n8n_workflow",
            "local_file"
          ]
        },
        {
          "name": "sync_new_workflow_to_dev",
          "parameters": [],
          "lines": 18,
          "complexity": 1,
          "calls": [],
          "variables": [
            "workflow_name",
            "n8n_workflow",
            "local_file"
          ]
        },
        {
          "name": "analyze_workflow_changes",
          "parameters": [],
          "lines": 53,
          "complexity": 4,
          "calls": [
            "select",
            "select",
            "select"
          ],
          "variables": [
            "workflow_name",
            "workflow_file",
            "analysis_file",
            "node_count",
            "connection_count",
            "webhook_count",
            "type",
            "function_count",
            "type",
            "http_request_count",
            "type"
          ]
        },
        {
          "name": "commit_workflow_changes",
          "parameters": [],
          "lines": 43,
          "complexity": 5,
          "calls": [
            "Production"
          ],
          "variables": [
            "workflow_name",
            "workflow_file",
            "analysis_file"
          ]
        },
        {
          "name": "monitor_n8n_changes",
          "parameters": [],
          "lines": 48,
          "complexity": 6,
          "calls": [
            "select",
            "select"
          ],
          "variables": [
            "n8n_workflows",
            "total_workflows",
            "changed_workflows",
            "new_workflows",
            "workflow_id",
            "name",
            "n8n_workflow",
            "name",
            "local_file"
          ]
        },
        {
          "name": "generate_sync_report",
          "parameters": [],
          "lines": 49,
          "complexity": 4,
          "calls": [
            "Production"
          ],
          "variables": [
            "report_file",
            "workflow_name",
            "timestamp"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 20,
          "complexity": 2,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "N8N_URL",
        "N8N_API_KEY",
        "WORKFLOWS_DIR",
        "CHANGE_LOG",
        "ANALYSIS_DIR",
        "BACKUP_DIR",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "NC",
        "response",
        "http_code",
        "response",
        "n8n_workflow",
        "local_file",
        "n8n_normalized",
        "local_normalized",
        "local_file",
        "backup_file",
        "workflow_name",
        "n8n_workflow",
        "local_file",
        "workflow_name",
        "n8n_workflow",
        "local_file",
        "workflow_name",
        "workflow_file",
        "analysis_file",
        "node_count",
        "connection_count",
        "webhook_count",
        "type",
        "function_count",
        "type",
        "http_request_count",
        "type",
        "workflow_name",
        "workflow_file",
        "analysis_file",
        "n8n_workflows",
        "total_workflows",
        "changed_workflows",
        "new_workflows",
        "workflow_id",
        "name",
        "n8n_workflow",
        "name",
        "local_file",
        "report_file",
        "workflow_name",
        "timestamp"
      ],
      "imports": [
        "\"$local_file\")",
        ">",
        ">",
        "Please",
        "**Review",
        "**Test",
        "**Security",
        "**Deploy**:"
      ],
      "classes": [],
      "total_lines": 403,
      "code_lines": 264,
      "complexity_score": 33,
      "purpose": "Monitoring and health checking"
    },
    "scripts/fix-claude-api.sh": {
      "file_name": "fix-claude-api.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "FIRST_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY"
      ],
      "imports": [
        "Generate",
        "Update",
        "Reload",
        "~/.zshrc\"",
        "Test"
      ],
      "classes": [],
      "total_lines": 56,
      "code_lines": 42,
      "complexity_score": 4,
      "purpose": "General utility script"
    },
    "scripts/setup-supabase-tables.sh": {
      "file_name": "setup-supabase-tables.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "IFS",
        "line",
        "select"
      ],
      "imports": [
        "Open",
        "Go",
        "Copy",
        "Click",
        "Verify"
      ],
      "classes": [],
      "total_lines": 72,
      "code_lines": 58,
      "complexity_score": 3,
      "purpose": "General utility script"
    },
    "scripts/deploy-n8n-webhooks.sh": {
      "file_name": "deploy-n8n-webhooks.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "deploy_workflow",
          "parameters": [],
          "lines": 75,
          "complexity": 7,
          "calls": [
            "select"
          ],
          "variables": [
            "workflow_file",
            "workflow_name",
            "existing_workflow",
            "name",
            "response",
            "workflow_id",
            "activate_response",
            "response",
            "workflow_id",
            "activate_response"
          ]
        }
      ],
      "variables": [
        "N8N_BASE_URL",
        "N8N_API_URL",
        "workflow_file",
        "workflow_name",
        "existing_workflow",
        "name",
        "response",
        "workflow_id",
        "activate_response",
        "response",
        "workflow_id",
        "activate_response",
        "test_response"
      ],
      "imports": [
        "./scripts/deployment/general/consolidated_general.py",
        "Verify",
        "Test",
        "Update"
      ],
      "classes": [],
      "total_lines": 133,
      "code_lines": 91,
      "complexity_score": 13,
      "purpose": "Deployment and setup"
    },
    "scripts/shell-prompt-safety-system.sh": {
      "file_name": "shell-prompt-safety-system.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_execute",
          "parameters": [],
          "lines": 23,
          "complexity": 5,
          "calls": [],
          "variables": [
            "command",
            "description",
            "safe_command"
          ]
        },
        {
          "name": "safe_multiline_output",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "content"
          ]
        },
        {
          "name": "test_shell_safety",
          "parameters": [],
          "lines": 23,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "show_safety_guidelines",
          "parameters": [],
          "lines": 49,
          "complexity": 3,
          "calls": [
            "Agents",
            "Agents",
            "Agents",
            "print_milestone",
            "Agents"
          ],
          "variables": [
            "System"
          ]
        },
        {
          "name": "print_milestone",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "Agents"
          ],
          "variables": []
        },
        {
          "name": "create_safe_templates",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "announce_milestone"
          ],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "announce_milestone",
          "parameters": [],
          "lines": 10,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "report_status",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": [
            "component",
            "status"
          ]
        },
        {
          "name": "track_progress",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        },
        {
          "name": "validate_scripts",
          "parameters": [],
          "lines": 31,
          "complexity": 9,
          "calls": [],
          "variables": [
            "issues_found",
            "issues_found",
            "issues_found"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 27,
          "complexity": 2,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "command",
        "description",
        "safe_command",
        "title",
        "content",
        "System",
        "title",
        "description",
        "component",
        "status",
        "step",
        "status",
        "issues_found",
        "issues_found",
        "issues_found"
      ],
      "imports": [
        "EOF"
      ],
      "classes": [],
      "total_lines": 264,
      "code_lines": 174,
      "complexity_score": 17,
      "purpose": "General utility script"
    },
    "scripts/production-shell-engine.sh": {
      "file_name": "production-shell-engine.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "handle_error",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": [
            "exit_code",
            "line_number"
          ]
        },
        {
          "name": "validate_script_name",
          "parameters": [],
          "lines": 8,
          "complexity": 2,
          "calls": [],
          "variables": [
            "name"
          ]
        },
        {
          "name": "validate_output_directory",
          "parameters": [],
          "lines": 8,
          "complexity": 2,
          "calls": [],
          "variables": [
            "dir"
          ]
        },
        {
          "name": "safe_output",
          "parameters": [],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": [
            "message"
          ]
        },
        {
          "name": "generate_basic_script",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "log"
          ],
          "variables": [
            "script_name",
            "output_path",
            "SCRIPT_NAME",
            "LOG_FILE"
          ]
        },
        {
          "name": "log",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "handle_error",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": [
            "exit_code",
            "line_number"
          ]
        },
        {
          "name": "generate_status_script",
          "parameters": [],
          "lines": 18,
          "complexity": 1,
          "calls": [
            "output"
          ],
          "variables": [
            "script_name",
            "output_path"
          ]
        },
        {
          "name": "output",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "show_status",
          "parameters": [],
          "lines": 15,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_progress_script",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "output"
          ],
          "variables": [
            "script_name",
            "output_path",
            "PROGRESS",
            "TOTAL_STEPS"
          ]
        },
        {
          "name": "output",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "update_progress",
          "parameters": [],
          "lines": 11,
          "complexity": 1,
          "calls": [],
          "variables": [
            "step",
            "description",
            "PROGRESS",
            "percentage"
          ]
        },
        {
          "name": "run_progress",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_script",
          "parameters": [],
          "lines": 27,
          "complexity": 4,
          "calls": [],
          "variables": [
            "script_path",
            "output"
          ]
        },
        {
          "name": "generate_script",
          "parameters": [],
          "lines": 42,
          "complexity": 5,
          "calls": [],
          "variables": [
            "script_name",
            "script_type",
            "output_dir",
            "output_path"
          ]
        },
        {
          "name": "generate_batch",
          "parameters": [],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "then"
          ],
          "variables": [
            "output_dir",
            "scripts",
            "success_count",
            "total_count",
            "IFS"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "SCRIPT_DIR",
        "TEMPLATES_DIR",
        "OUTPUT_DIR",
        "LOG_FILE",
        "exit_code",
        "line_number",
        "name",
        "dir",
        "message",
        "script_name",
        "output_path",
        "SCRIPT_NAME",
        "LOG_FILE",
        "exit_code",
        "line_number",
        "script_name",
        "output_path",
        "script_name",
        "output_path",
        "PROGRESS",
        "TOTAL_STEPS",
        "step",
        "description",
        "PROGRESS",
        "percentage",
        "script_path",
        "output",
        "script_name",
        "script_type",
        "output_dir",
        "output_path",
        "output_dir",
        "scripts",
        "success_count",
        "total_count",
        "IFS"
      ],
      "imports": [
        "Must"
      ],
      "classes": [],
      "total_lines": 370,
      "code_lines": 249,
      "complexity_score": 13,
      "purpose": "General utility script"
    },
    "scripts/shell-safety-guide.sh": {
      "file_name": "shell-safety-guide.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "messages",
        "message",
        "var",
        "var"
      ],
      "imports": [
        "Use",
        "Use",
        "Use",
        "Use",
        "Use",
        "Always",
        "Use"
      ],
      "classes": [],
      "total_lines": 86,
      "code_lines": 65,
      "complexity_score": 12,
      "purpose": "General utility script"
    },
    "scripts/add-test-ids.js": {
      "file_name": "add-test-ids.js",
      "file_type": "js",
      "functions": [
        {
          "name": "addTestIds",
          "parameters": [],
          "lines": 25,
          "complexity": 10,
          "calls": [
            "querySelectorAll",
            "forEach",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute",
            "if",
            "includes",
            "setAttribute"
          ],
          "variables": [
            "buttons",
            "text"
          ]
        }
      ],
      "variables": [
        "addTestIds",
        "buttons",
        "text"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 36,
      "code_lines": 33,
      "complexity_score": 10,
      "purpose": "Testing and validation"
    },
    "scripts/setup-database.js": {
      "file_name": "setup-database.js",
      "file_type": "js",
      "functions": [
        {
          "name": "setupDatabase",
          "parameters": [],
          "lines": 90,
          "complexity": 7,
          "calls": [
            "log",
            "split",
            "map",
            "trim",
            "filter",
            "startsWith",
            "log",
            "for",
            "if",
            "trim",
            "log",
            "rpc",
            "if",
            "expected",
            "if",
            "includes",
            "includes",
            "includes",
            "log",
            "error",
            "log",
            "catch",
            "error",
            "log",
            "log",
            "log",
            "log",
            "for",
            "from",
            "select",
            "limit",
            "if",
            "log",
            "log",
            "catch",
            "log",
            "log",
            "log",
            "catch",
            "error",
            "exit"
          ],
          "variables": [
            "statements",
            "successCount",
            "errorCount",
            "i",
            "statement",
            "tables",
            "table"
          ]
        }
      ],
      "variables": [
        "fs",
        "path",
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY",
        "supabase",
        "schemaPath",
        "schemaSQL",
        "statements",
        "statement",
        "tables",
        "table",
        "successCount",
        "errorCount",
        "i"
      ],
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path",
        "dotenv"
      ],
      "classes": [],
      "total_lines": 115,
      "code_lines": 92,
      "complexity_score": 9,
      "purpose": "General utility script"
    },
    "scripts/end-to-end-testing.sh": {
      "file_name": "end-to-end-testing.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "health_response",
        "crew_response",
        "cross_crew_response",
        "n8n_data_response",
        "contacts_response",
        "live_data_response",
        "mock_data_response",
        "scraping_response",
        "crew_members",
        "successful_crew",
        "total_crew",
        "crew_test_response"
      ],
      "imports": [
        "./scripts/deployment/general/consolidated_general.py",
        "System",
        "N8N",
        "Data",
        "Live",
        "Fallback",
        "Cross-Crew",
        "Louis,",
        "|",
        "Louis,",
        "Review",
        "Deploy",
        "Create",
        "Monitor",
        "Optimize"
      ],
      "classes": [],
      "total_lines": 246,
      "code_lines": 188,
      "complexity_score": 13,
      "purpose": "Testing and validation"
    },
    "scripts/deploy.sh": {
      "file_name": "deploy.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "TURBO_TOKEN",
        "TURBO_TEAM"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 36,
      "code_lines": 18,
      "complexity_score": 2,
      "purpose": "Deployment and setup"
    },
    "scripts/simple-e2e-test.js": {
      "file_name": "simple-e2e-test.js",
      "file_type": "js",
      "functions": [
        {
          "name": "logTest",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [
            "Date",
            "toISOString",
            "push",
            "if",
            "log",
            "log"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "takeScreenshot",
          "parameters": [],
          "lines": 10,
          "complexity": 2,
          "calls": [
            "if",
            "existsSync",
            "mkdirSync",
            "replace",
            "toLowerCase",
            "now",
            "join",
            "screenshot"
          ],
          "variables": [
            "filename",
            "filepath"
          ]
        },
        {
          "name": "waitForElement",
          "parameters": [],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "waitForSelector",
            "catch"
          ],
          "variables": []
        },
        {
          "name": "testPageLoad",
          "parameters": [],
          "lines": 28,
          "complexity": 3,
          "calls": [
            "log",
            "goto",
            "waitForElement",
            "if",
            "logTest",
            "eval",
            "if",
            "includes",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "mainContentLoaded",
            "heading"
          ]
        },
        {
          "name": "testDashboardButtons",
          "parameters": [],
          "lines": 61,
          "complexity": 6,
          "calls": [
            "log",
            "for",
            "evaluate",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "if",
            "logTest",
            "evaluate",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "if",
            "click",
            "Promise",
            "setTimeout",
            "if",
            "logTest",
            "takeScreenshot",
            "replace",
            "toLowerCase",
            "evaluate",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "if",
            "click",
            "Promise",
            "setTimeout",
            "logTest",
            "catch",
            "logTest"
          ],
          "variables": [
            "dashboardButtons",
            "buttonName",
            "buttonFound",
            "buttons",
            "buttons",
            "button",
            "dashboardVisible",
            "buttons",
            "button"
          ]
        },
        {
          "name": "testJobCards",
          "parameters": [],
          "lines": 60,
          "complexity": 6,
          "calls": [
            "log",
            "waitForElement",
            "if",
            "logTest",
            "if",
            "logTest",
            "logTest",
            "click",
            "Promise",
            "setTimeout",
            "evaluate",
            "contains",
            "contains",
            "if",
            "logTest",
            "logTest",
            "if",
            "evaluate",
            "if",
            "includes",
            "includes",
            "logTest",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "jobCardsLoaded",
            "jobCards",
            "firstJobCard",
            "isSelected",
            "applyButton",
            "buttonText"
          ]
        },
        {
          "name": "testFilterSidebar",
          "parameters": [],
          "lines": 42,
          "complexity": 4,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "if",
            "select",
            "Promise",
            "setTimeout",
            "logTest",
            "logTest",
            "if",
            "evaluate",
            "dispatchEvent",
            "Event",
            "Promise",
            "setTimeout",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "filterSidebar",
            "locationSelect",
            "scoreSlider"
          ]
        },
        {
          "name": "testResumeUpload",
          "parameters": [],
          "lines": 38,
          "complexity": 3,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "join",
            "writeFileSync",
            "uploadFile",
            "Promise",
            "setTimeout",
            "if",
            "logTest",
            "logTest",
            "unlinkSync",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "resumeUpload",
            "dummyFile",
            "analysisIndicator"
          ]
        },
        {
          "name": "testStatsDashboard",
          "parameters": [],
          "lines": 42,
          "complexity": 4,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "from",
            "querySelectorAll",
            "filter",
            "includes",
            "includes",
            "if",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "statsDashboard",
            "statsNumbers",
            "exportButtons",
            "buttons"
          ]
        },
        {
          "name": "testApplicationTracker",
          "parameters": [],
          "lines": 48,
          "complexity": 4,
          "calls": [
            "log",
            "evaluate",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "from",
            "querySelectorAll",
            "filter",
            "includes",
            "includes",
            "if",
            "evaluate",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "includes",
            "if",
            "click",
            "Promise",
            "setTimeout",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "appTracker",
            "headings",
            "statusButtons",
            "buttons",
            "buttons",
            "statusButton"
          ]
        },
        {
          "name": "testDataSourceIndicator",
          "parameters": [],
          "lines": 38,
          "complexity": 4,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "if",
            "evaluate",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "if",
            "click",
            "Promise",
            "setTimeout",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "dataSourceIndicator",
            "refreshButton",
            "buttons",
            "buttons",
            "refreshBtn"
          ]
        },
        {
          "name": "testResponsiveDesign",
          "parameters": [],
          "lines": 30,
          "complexity": 3,
          "calls": [
            "log",
            "for",
            "setViewport",
            "Promise",
            "setTimeout",
            "if",
            "logTest",
            "takeScreenshot",
            "toLowerCase",
            "logTest",
            "catch",
            "logTest",
            "setViewport"
          ],
          "variables": [
            "viewports",
            "viewport",
            "mainContent"
          ]
        },
        {
          "name": "testAPIConnectivity",
          "parameters": [],
          "lines": 63,
          "complexity": 4,
          "calls": [
            "log",
            "evaluate",
            "async",
            "fetch",
            "json",
            "catch",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "async",
            "fetch",
            "json",
            "catch",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "async",
            "fetch",
            "stringify",
            "json",
            "catch",
            "if",
            "logTest",
            "logTest",
            "catch",
            "logTest"
          ],
          "variables": [
            "healthResponse",
            "response",
            "jobsResponse",
            "response",
            "n8nResponse",
            "response"
          ]
        },
        {
          "name": "runAllTests",
          "parameters": [],
          "lines": 56,
          "complexity": 1,
          "calls": [
            "log",
            "log",
            "launch",
            "newPage",
            "setViewport",
            "on",
            "log",
            "on",
            "log",
            "url",
            "failure",
            "testPageLoad",
            "testDashboardButtons",
            "testJobCards",
            "testFilterSidebar",
            "testResumeUpload",
            "testStatsDashboard",
            "testApplicationTracker",
            "testDataSourceIndicator",
            "testResponsiveDesign",
            "testAPIConnectivity",
            "catch",
            "log",
            "close",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "toFixed",
            "join",
            "now",
            "writeFileSync",
            "stringify",
            "log",
            "exit"
          ],
          "variables": [
            "browser",
            "page",
            "reportPath"
          ]
        }
      ],
      "variables": [
        "puppeteer",
        "fs",
        "path",
        "CONFIG",
        "testResults",
        "result",
        "filename",
        "filepath",
        "mainContentLoaded",
        "heading",
        "dashboardButtons",
        "buttonName",
        "buttonFound",
        "buttons",
        "buttons",
        "button",
        "dashboardVisible",
        "buttons",
        "button",
        "jobCardsLoaded",
        "jobCards",
        "firstJobCard",
        "isSelected",
        "applyButton",
        "buttonText",
        "filterSidebar",
        "locationSelect",
        "scoreSlider",
        "resumeUpload",
        "dummyFile",
        "analysisIndicator",
        "statsDashboard",
        "statsNumbers",
        "exportButtons",
        "buttons",
        "appTracker",
        "headings",
        "statusButtons",
        "buttons",
        "buttons",
        "statusButton",
        "dataSourceIndicator",
        "refreshButton",
        "buttons",
        "buttons",
        "refreshBtn",
        "viewports",
        "viewport",
        "mainContent",
        "healthResponse",
        "response",
        "jobsResponse",
        "response",
        "n8nResponse",
        "response",
        "browser",
        "page",
        "reportPath"
      ],
      "imports": [
        "puppeteer",
        "fs",
        "path"
      ],
      "classes": [],
      "total_lines": 588,
      "code_lines": 485,
      "complexity_score": 51,
      "purpose": "Testing and validation"
    },
    "scripts/intelligent-script-purge.py": {
      "file_name": "intelligent-script-purge.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 53,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "IntelligentScriptPurge",
            "analyze_scripts_for_purging",
            "len",
            "len",
            "len",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "input",
            "print",
            "print",
            "print",
            "lower",
            "execute_purge",
            "print",
            "len",
            "len",
            "len",
            "len",
            "len",
            "print",
            "print"
          ],
          "variables": [
            "purger",
            "purge_plan",
            "total_purge",
            "total_keep",
            "total_consolidate",
            "response"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "scripts_dir"
          ],
          "lines": 18,
          "complexity": 1,
          "calls": [
            "set",
            "set",
            "set",
            "set",
            "set"
          ],
          "variables": []
        },
        {
          "name": "analyze_scripts_for_purging",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 1,
          "calls": [
            "info",
            "load_analysis_data",
            "identify_bloated_scripts",
            "identify_duplicate_scripts",
            "identify_obsolete_scripts",
            "identify_minimal_scripts",
            "identify_consolidation_candidates",
            "perform_safety_checks",
            "generate_purging_recommendations"
          ],
          "variables": [
            "analysis_data"
          ]
        },
        {
          "name": "load_analysis_data",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 2,
          "calls": [
            "open",
            "load",
            "error"
          ],
          "variables": []
        },
        {
          "name": "identify_bloated_scripts",
          "parameters": [
            "self"
          ],
          "lines": 23,
          "complexity": 6,
          "calls": [
            "info",
            "walk",
            "endswith",
            "join",
            "startswith",
            "calculate_bloat_score",
            "append"
          ],
          "variables": [
            "file_path",
            "bloat_score"
          ]
        },
        {
          "name": "calculate_bloat_score",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 45,
          "complexity": 9,
          "calls": [
            "split",
            "len",
            "sum",
            "sum",
            "find_repeated_patterns",
            "find_long_functions",
            "find_unused_items",
            "min",
            "open",
            "read",
            "error",
            "strip",
            "startswith",
            "startswith",
            "strip",
            "strip"
          ],
          "variables": [
            "lines",
            "total_lines",
            "bloat_indicators",
            "empty_lines",
            "comment_lines",
            "repeated_patterns",
            "long_functions",
            "unused_items",
            "content"
          ]
        },
        {
          "name": "find_repeated_patterns",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "findall",
            "sum",
            "get",
            "values"
          ],
          "variables": [
            "patterns",
            "function_calls",
            "pattern_counts",
            "repeated"
          ]
        },
        {
          "name": "find_long_functions",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 19,
          "complexity": 5,
          "calls": [
            "findall",
            "findall",
            "count",
            "count"
          ],
          "variables": [
            "long_functions",
            "python_functions",
            "bash_functions",
            "lines",
            "lines"
          ]
        },
        {
          "name": "find_unused_items",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 23,
          "complexity": 7,
          "calls": [
            "findall",
            "findall",
            "set",
            "set",
            "count",
            "count",
            "count"
          ],
          "variables": [
            "unused_count",
            "variables",
            "functions",
            "var_usage",
            "func_usage"
          ]
        },
        {
          "name": "identify_duplicate_scripts",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 6,
          "calls": [
            "info",
            "walk",
            "endswith",
            "join",
            "calculate_file_hash",
            "startswith",
            "append"
          ],
          "variables": [
            "script_hashes",
            "file_path",
            "file_hash"
          ]
        },
        {
          "name": "calculate_file_hash",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "sub",
            "str",
            "open",
            "read",
            "strip",
            "hash",
            "error"
          ],
          "variables": [
            "normalized",
            "content"
          ]
        },
        {
          "name": "identify_obsolete_scripts",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 7,
          "calls": [
            "info",
            "walk",
            "endswith",
            "join",
            "lower",
            "startswith",
            "append"
          ],
          "variables": [
            "obsolete_indicators",
            "file_path",
            "file_lower"
          ]
        },
        {
          "name": "identify_minimal_scripts",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 6,
          "calls": [
            "info",
            "walk",
            "endswith",
            "join",
            "is_minimal_script",
            "startswith",
            "append"
          ],
          "variables": [
            "file_path"
          ]
        },
        {
          "name": "is_minimal_script",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 30,
          "complexity": 8,
          "calls": [
            "split",
            "all",
            "all",
            "all",
            "open",
            "read",
            "len",
            "error",
            "startswith",
            "startswith",
            "strip",
            "startswith",
            "startswith",
            "strip",
            "startswith",
            "strip",
            "strip",
            "strip",
            "strip",
            "strip"
          ],
          "variables": [
            "lines",
            "non_empty_lines",
            "content"
          ]
        },
        {
          "name": "identify_consolidation_candidates",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 3,
          "calls": [
            "info",
            "group_similar_scripts",
            "len",
            "sort",
            "append",
            "extend",
            "getsize"
          ],
          "variables": [
            "script_groups",
            "keep_script",
            "consolidate_scripts"
          ]
        },
        {
          "name": "group_similar_scripts",
          "parameters": [
            "self"
          ],
          "lines": 33,
          "complexity": 13,
          "calls": [
            "set",
            "walk",
            "endswith",
            "join",
            "add",
            "walk",
            "startswith",
            "len",
            "append",
            "endswith",
            "join",
            "are_scripts_similar",
            "startswith",
            "append",
            "add"
          ],
          "variables": [
            "script_groups",
            "processed_scripts",
            "file_path",
            "similar_scripts",
            "other_path"
          ]
        },
        {
          "name": "are_scripts_similar",
          "parameters": [
            "self",
            "script1",
            "script2"
          ],
          "lines": 28,
          "complexity": 4,
          "calls": [
            "sub",
            "sub",
            "open",
            "read",
            "open",
            "read",
            "lower",
            "lower",
            "set",
            "set",
            "set",
            "set",
            "error",
            "len",
            "len",
            "split",
            "split",
            "split",
            "split",
            "len",
            "len",
            "strip",
            "strip"
          ],
          "variables": [
            "content1_norm",
            "content2_norm",
            "common_words",
            "total_words",
            "similarity",
            "content1",
            "content2"
          ]
        },
        {
          "name": "perform_safety_checks",
          "parameters": [
            "self"
          ],
          "lines": 18,
          "complexity": 1,
          "calls": [
            "info",
            "find_essential_functions",
            "find_referenced_scripts",
            "find_api_endpoints",
            "find_database_operations",
            "find_critical_workflows"
          ],
          "variables": []
        },
        {
          "name": "find_essential_functions",
          "parameters": [
            "self"
          ],
          "lines": 23,
          "complexity": 7,
          "calls": [
            "walk",
            "endswith",
            "join",
            "open",
            "read",
            "search",
            "error",
            "add"
          ],
          "variables": [
            "essential_patterns",
            "file_path",
            "content"
          ]
        },
        {
          "name": "find_referenced_scripts",
          "parameters": [
            "self"
          ],
          "lines": 19,
          "complexity": 7,
          "calls": [
            "walk",
            "endswith",
            "join",
            "findall",
            "open",
            "read",
            "join",
            "exists",
            "error",
            "add"
          ],
          "variables": [
            "file_path",
            "script_refs",
            "content",
            "ref_path"
          ]
        },
        {
          "name": "find_api_endpoints",
          "parameters": [
            "self"
          ],
          "lines": 22,
          "complexity": 7,
          "calls": [
            "walk",
            "endswith",
            "join",
            "open",
            "read",
            "search",
            "error",
            "add"
          ],
          "variables": [
            "api_patterns",
            "file_path",
            "content"
          ]
        },
        {
          "name": "find_database_operations",
          "parameters": [
            "self"
          ],
          "lines": 23,
          "complexity": 7,
          "calls": [
            "walk",
            "endswith",
            "join",
            "open",
            "read",
            "search",
            "error",
            "add"
          ],
          "variables": [
            "db_patterns",
            "file_path",
            "content"
          ]
        },
        {
          "name": "find_critical_workflows",
          "parameters": [
            "self"
          ],
          "lines": 22,
          "complexity": 7,
          "calls": [
            "walk",
            "endswith",
            "join",
            "open",
            "read",
            "search",
            "error",
            "add"
          ],
          "variables": [
            "critical_patterns",
            "file_path",
            "content"
          ]
        },
        {
          "name": "generate_purging_recommendations",
          "parameters": [
            "self"
          ],
          "lines": 39,
          "complexity": 7,
          "calls": [
            "info",
            "extend",
            "extend",
            "extend",
            "extend",
            "append"
          ],
          "variables": [
            "all_purge_candidates",
            "safe_to_purge",
            "script_path"
          ]
        },
        {
          "name": "execute_purge",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 4,
          "calls": [
            "info",
            "create_backup",
            "info",
            "exists",
            "error",
            "remove",
            "info"
          ],
          "variables": [
            "purged_count",
            "script_path"
          ]
        },
        {
          "name": "create_backup",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "copytree",
            "info",
            "strftime",
            "now"
          ],
          "variables": [
            "backup_dir"
          ]
        },
        {
          "name": "generate_purge_report",
          "parameters": [
            "self"
          ],
          "lines": 35,
          "complexity": 3,
          "calls": [
            "append",
            "append",
            "append",
            "len",
            "len",
            "len",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "join",
            "append",
            "append",
            "append",
            "len",
            "len",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "report",
            "total_purge",
            "total_keep",
            "total_consolidate"
          ]
        }
      ],
      "variables": [
        "logger",
        "purger",
        "purge_plan",
        "total_purge",
        "total_keep",
        "total_consolidate",
        "analysis_data",
        "patterns",
        "function_calls",
        "pattern_counts",
        "repeated",
        "long_functions",
        "python_functions",
        "bash_functions",
        "unused_count",
        "variables",
        "functions",
        "script_hashes",
        "obsolete_indicators",
        "script_groups",
        "script_groups",
        "processed_scripts",
        "essential_patterns",
        "api_patterns",
        "db_patterns",
        "critical_patterns",
        "all_purge_candidates",
        "safe_to_purge",
        "backup_dir",
        "report",
        "total_purge",
        "total_keep",
        "total_consolidate",
        "response",
        "lines",
        "total_lines",
        "bloat_indicators",
        "empty_lines",
        "comment_lines",
        "repeated_patterns",
        "long_functions",
        "unused_items",
        "lines",
        "lines",
        "normalized",
        "lines",
        "non_empty_lines",
        "content1_norm",
        "content2_norm",
        "common_words",
        "total_words",
        "similarity",
        "script_path",
        "purged_count",
        "content",
        "var_usage",
        "func_usage",
        "content",
        "content",
        "keep_script",
        "consolidate_scripts",
        "content1",
        "content2",
        "script_path",
        "file_path",
        "bloat_score",
        "file_path",
        "file_hash",
        "file_path",
        "file_lower",
        "file_path",
        "file_path",
        "similar_scripts",
        "file_path",
        "file_path",
        "file_path",
        "file_path",
        "file_path",
        "script_refs",
        "content",
        "content",
        "ref_path",
        "content",
        "content",
        "content",
        "other_path"
      ],
      "imports": [
        "os",
        "json",
        "shutil",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "logging",
        "re"
      ],
      "classes": [
        "IntelligentScriptPurge"
      ],
      "total_lines": 687,
      "code_lines": 486,
      "complexity_score": 115,
      "purpose": "General utility script"
    },
    "scripts/enhanced-ai-prompts-dual-milestone-push.sh": {
      "file_name": "enhanced-ai-prompts-dual-milestone-push.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "print_header",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "print_step",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "TIMESTAMP",
        "MILESTONE_ID",
        "ARCHIVE_NAME",
        "SUMMARY_FILE",
        "LOG_FILE",
        "Log"
      ],
      "imports": [
        "**Supabase",
        "**N8N",
        "**Claude",
        "**Multi-System",
        "**Market",
        "**Business",
        "**Environment",
        "**Error",
        "**Security**:",
        "**Integration**:",
        "**Monitoring**:",
        "**Automation**:",
        "**Real-time",
        "**AI",
        "**Supabase",
        "**Claude",
        "**N8N",
        "**Real-time",
        "**Automated",
        "Deploy",
        "Test",
        "Monitor",
        "Document",
        "Build",
        "Implement",
        "Create",
        "Scale",
        "Advanced",
        "Machine",
        "Self-improving",
        "Universal",
        "Deploy",
        "Test",
        "Monitor",
        "Scale"
      ],
      "classes": [],
      "total_lines": 300,
      "code_lines": 206,
      "complexity_score": 25,
      "purpose": "General utility script"
    },
    "scripts/deep-code-analyzer.py": {
      "file_name": "deep-code-analyzer.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 41,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "DeepCodeAnalyzer",
            "print",
            "analyze_all_scripts",
            "print",
            "print",
            "find_duplicate_functions",
            "find_redundant_scripts",
            "print",
            "print",
            "generate_consolidation_recommendations",
            "print",
            "print",
            "print",
            "print",
            "print",
            "save_analysis",
            "save_recommendations",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "analyzer",
            "analyses",
            "duplicate_functions",
            "redundant_scripts",
            "recommendations"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "scripts_dir"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "defaultdict"
          ],
          "variables": []
        },
        {
          "name": "analyze_all_scripts",
          "parameters": [
            "self"
          ],
          "lines": 15,
          "complexity": 6,
          "calls": [
            "info",
            "walk",
            "info",
            "endswith",
            "join",
            "analyze_script",
            "len",
            "startswith",
            "register_functions"
          ],
          "variables": [
            "file_path",
            "analysis"
          ]
        },
        {
          "name": "analyze_script",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 28,
          "complexity": 6,
          "calls": [
            "basename",
            "lower",
            "split",
            "len",
            "len",
            "len",
            "open",
            "read",
            "analyze_python_script",
            "error",
            "analyze_bash_script",
            "split",
            "startswith",
            "analyze_javascript_script",
            "strip",
            "startswith",
            "strip",
            "strip"
          ],
          "variables": [
            "file_name",
            "file_type",
            "lines",
            "total_lines",
            "code_lines",
            "comment_lines",
            "content"
          ]
        },
        {
          "name": "analyze_python_script",
          "parameters": [
            "self",
            "file_path",
            "content",
            "file_name",
            "total_lines",
            "code_lines",
            "comment_lines"
          ],
          "lines": 53,
          "complexity": 12,
          "calls": [
            "parse",
            "walk",
            "calculate_python_complexity",
            "determine_script_purpose",
            "ScriptAnalysis",
            "isinstance",
            "error",
            "extract_python_function",
            "append",
            "isinstance",
            "isinstance",
            "append",
            "isinstance",
            "append",
            "append",
            "isinstance",
            "isinstance",
            "append"
          ],
          "variables": [
            "tree",
            "functions",
            "variables",
            "imports",
            "classes",
            "complexity",
            "purpose",
            "func_info"
          ]
        },
        {
          "name": "analyze_bash_script",
          "parameters": [
            "self",
            "file_path",
            "content",
            "file_name",
            "total_lines",
            "code_lines",
            "comment_lines"
          ],
          "lines": 47,
          "complexity": 5,
          "calls": [
            "finditer",
            "finditer",
            "finditer",
            "calculate_bash_complexity",
            "determine_script_purpose",
            "ScriptAnalysis",
            "group",
            "extract_bash_function",
            "append",
            "append",
            "append",
            "group",
            "group",
            "group"
          ],
          "variables": [
            "functions",
            "variables",
            "imports",
            "classes",
            "func_pattern",
            "var_pattern",
            "import_pattern",
            "complexity",
            "purpose",
            "func_name",
            "func_info",
            "import_file"
          ]
        },
        {
          "name": "analyze_javascript_script",
          "parameters": [
            "self",
            "file_path",
            "content",
            "file_name",
            "total_lines",
            "code_lines",
            "comment_lines"
          ],
          "lines": 69,
          "complexity": 8,
          "calls": [
            "finditer",
            "calculate_javascript_complexity",
            "determine_script_purpose",
            "ScriptAnalysis",
            "finditer",
            "finditer",
            "finditer",
            "append",
            "group",
            "extract_javascript_function",
            "append",
            "append",
            "append",
            "group",
            "group",
            "group"
          ],
          "variables": [
            "functions",
            "variables",
            "imports",
            "classes",
            "func_patterns",
            "var_patterns",
            "import_patterns",
            "class_pattern",
            "complexity",
            "purpose",
            "func_name",
            "func_info"
          ]
        },
        {
          "name": "extract_python_function",
          "parameters": [
            "self",
            "node",
            "file_path",
            "content"
          ],
          "lines": 45,
          "complexity": 10,
          "calls": [
            "split",
            "walk",
            "walk",
            "calculate_function_complexity",
            "FunctionInfo",
            "hasattr",
            "get_docstring",
            "isinstance",
            "isinstance",
            "isinstance",
            "append",
            "isinstance",
            "isinstance",
            "append",
            "append"
          ],
          "variables": [
            "lines",
            "start_line",
            "end_line",
            "parameters",
            "docstring",
            "calls",
            "variables",
            "complexity"
          ]
        },
        {
          "name": "extract_bash_function",
          "parameters": [
            "self",
            "func_name",
            "file_path",
            "content"
          ],
          "lines": 46,
          "complexity": 2,
          "calls": [
            "search",
            "group",
            "split",
            "findall",
            "findall",
            "calculate_bash_function_complexity",
            "FunctionInfo",
            "FunctionInfo",
            "len"
          ],
          "variables": [
            "func_pattern",
            "match",
            "func_body",
            "lines",
            "calls",
            "variables",
            "complexity"
          ]
        },
        {
          "name": "extract_javascript_function",
          "parameters": [
            "self",
            "func_name",
            "file_path",
            "content"
          ],
          "lines": 56,
          "complexity": 4,
          "calls": [
            "split",
            "findall",
            "findall",
            "calculate_javascript_function_complexity",
            "FunctionInfo",
            "search",
            "FunctionInfo",
            "group",
            "len"
          ],
          "variables": [
            "func_patterns",
            "func_body",
            "lines",
            "calls",
            "variables",
            "complexity",
            "match",
            "func_body"
          ]
        },
        {
          "name": "calculate_python_complexity",
          "parameters": [
            "self",
            "tree"
          ],
          "lines": 13,
          "complexity": 5,
          "calls": [
            "walk",
            "isinstance",
            "isinstance",
            "isinstance",
            "len"
          ],
          "variables": [
            "complexity"
          ]
        },
        {
          "name": "calculate_bash_complexity",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 14,
          "complexity": 2,
          "calls": [
            "len",
            "findall"
          ],
          "variables": [
            "complexity",
            "patterns"
          ]
        },
        {
          "name": "calculate_javascript_complexity",
          "parameters": [
            "self",
            "content"
          ],
          "lines": 14,
          "complexity": 2,
          "calls": [
            "len",
            "findall"
          ],
          "variables": [
            "complexity",
            "patterns"
          ]
        },
        {
          "name": "calculate_function_complexity",
          "parameters": [
            "self",
            "node"
          ],
          "lines": 11,
          "complexity": 4,
          "calls": [
            "walk",
            "isinstance",
            "isinstance",
            "len"
          ],
          "variables": [
            "complexity"
          ]
        },
        {
          "name": "calculate_bash_function_complexity",
          "parameters": [
            "self",
            "func_body"
          ],
          "lines": 9,
          "complexity": 2,
          "calls": [
            "len",
            "findall"
          ],
          "variables": [
            "complexity",
            "patterns"
          ]
        },
        {
          "name": "calculate_javascript_function_complexity",
          "parameters": [
            "self",
            "func_body"
          ],
          "lines": 9,
          "complexity": 2,
          "calls": [
            "len",
            "findall"
          ],
          "variables": [
            "complexity",
            "patterns"
          ]
        },
        {
          "name": "determine_script_purpose",
          "parameters": [
            "self",
            "content",
            "file_name"
          ],
          "lines": 28,
          "complexity": 7,
          "calls": [
            "search",
            "lower",
            "strip",
            "lower",
            "lower",
            "group",
            "lower"
          ],
          "variables": [
            "purpose_patterns",
            "match"
          ]
        },
        {
          "name": "register_functions",
          "parameters": [
            "self",
            "analysis"
          ],
          "lines": 4,
          "complexity": 2,
          "calls": [
            "append"
          ],
          "variables": []
        },
        {
          "name": "find_duplicate_functions",
          "parameters": [
            "self"
          ],
          "lines": 18,
          "complexity": 8,
          "calls": [
            "items",
            "len",
            "enumerate",
            "are_functions_similar",
            "append"
          ],
          "variables": [
            "duplicates",
            "similar_functions"
          ]
        },
        {
          "name": "are_functions_similar",
          "parameters": [
            "self",
            "func1",
            "func2"
          ],
          "lines": 20,
          "complexity": 4,
          "calls": [
            "set",
            "set",
            "set",
            "set",
            "abs",
            "abs",
            "len",
            "len"
          ],
          "variables": [
            "calls1",
            "calls2",
            "call_similarity"
          ]
        },
        {
          "name": "find_redundant_scripts",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 7,
          "calls": [
            "set",
            "items",
            "add",
            "items",
            "are_scripts_redundant",
            "len",
            "append",
            "append",
            "add"
          ],
          "variables": [
            "redundant_groups",
            "processed_scripts",
            "redundant_group"
          ]
        },
        {
          "name": "are_scripts_redundant",
          "parameters": [
            "self",
            "analysis1",
            "analysis2"
          ],
          "lines": 42,
          "complexity": 9,
          "calls": [
            "set",
            "set",
            "set",
            "set",
            "set",
            "set",
            "len",
            "len",
            "split",
            "split",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "lower",
            "lower"
          ],
          "variables": [
            "funcs1",
            "funcs2",
            "func_overlap",
            "vars1",
            "vars2",
            "imports1",
            "imports2",
            "purpose1_words",
            "purpose2_words",
            "similarity",
            "var_overlap",
            "var_overlap",
            "import_overlap",
            "import_overlap",
            "purpose_overlap",
            "purpose_overlap"
          ]
        },
        {
          "name": "generate_consolidation_recommendations",
          "parameters": [
            "self"
          ],
          "lines": 19,
          "complexity": 1,
          "calls": [
            "info",
            "find_duplicate_functions",
            "find_redundant_scripts",
            "create_consolidation_plan",
            "calculate_estimated_savings"
          ],
          "variables": [
            "duplicate_functions",
            "redundant_scripts",
            "recommendations"
          ]
        },
        {
          "name": "create_consolidation_plan",
          "parameters": [
            "self",
            "duplicate_functions",
            "redundant_scripts"
          ],
          "lines": 37,
          "complexity": 5,
          "calls": [
            "items",
            "len",
            "max",
            "append",
            "len",
            "max",
            "append",
            "len",
            "len"
          ],
          "variables": [
            "plan",
            "best_func",
            "other_funcs",
            "analyses",
            "best_script",
            "other_scripts"
          ]
        },
        {
          "name": "calculate_estimated_savings",
          "parameters": [
            "self",
            "duplicate_functions",
            "redundant_scripts"
          ],
          "lines": 25,
          "complexity": 5,
          "calls": [
            "items",
            "len",
            "len",
            "len",
            "sum",
            "len",
            "sum"
          ],
          "variables": [
            "function_savings",
            "script_savings",
            "analyses"
          ]
        },
        {
          "name": "save_analysis",
          "parameters": [
            "self",
            "output_file"
          ],
          "lines": 44,
          "complexity": 1,
          "calls": [
            "info",
            "isoformat",
            "len",
            "open",
            "dump",
            "now",
            "items",
            "items"
          ],
          "variables": [
            "analysis_data"
          ]
        },
        {
          "name": "save_recommendations",
          "parameters": [
            "self",
            "recommendations",
            "output_file"
          ],
          "lines": 26,
          "complexity": 1,
          "calls": [
            "info",
            "open",
            "dump",
            "items"
          ],
          "variables": [
            "serializable_recommendations"
          ]
        }
      ],
      "variables": [
        "logger",
        "analyzer",
        "analyses",
        "duplicate_functions",
        "redundant_scripts",
        "recommendations",
        "functions",
        "variables",
        "imports",
        "classes",
        "func_pattern",
        "var_pattern",
        "import_pattern",
        "complexity",
        "purpose",
        "functions",
        "variables",
        "imports",
        "classes",
        "func_patterns",
        "var_patterns",
        "import_patterns",
        "class_pattern",
        "complexity",
        "purpose",
        "lines",
        "start_line",
        "end_line",
        "parameters",
        "docstring",
        "calls",
        "variables",
        "complexity",
        "func_pattern",
        "match",
        "func_body",
        "lines",
        "calls",
        "variables",
        "complexity",
        "func_patterns",
        "func_body",
        "lines",
        "calls",
        "variables",
        "complexity",
        "complexity",
        "complexity",
        "patterns",
        "complexity",
        "patterns",
        "complexity",
        "complexity",
        "patterns",
        "complexity",
        "patterns",
        "purpose_patterns",
        "duplicates",
        "calls1",
        "calls2",
        "call_similarity",
        "redundant_groups",
        "processed_scripts",
        "funcs1",
        "funcs2",
        "func_overlap",
        "vars1",
        "vars2",
        "imports1",
        "imports2",
        "purpose1_words",
        "purpose2_words",
        "similarity",
        "duplicate_functions",
        "redundant_scripts",
        "recommendations",
        "plan",
        "function_savings",
        "script_savings",
        "analysis_data",
        "serializable_recommendations",
        "file_name",
        "file_type",
        "lines",
        "total_lines",
        "code_lines",
        "comment_lines",
        "tree",
        "functions",
        "variables",
        "imports",
        "classes",
        "complexity",
        "purpose",
        "func_name",
        "func_info",
        "import_file",
        "match",
        "match",
        "redundant_group",
        "var_overlap",
        "var_overlap",
        "import_overlap",
        "import_overlap",
        "purpose_overlap",
        "purpose_overlap",
        "content",
        "func_name",
        "func_info",
        "func_body",
        "similar_functions",
        "best_func",
        "other_funcs",
        "analyses",
        "best_script",
        "other_scripts",
        "analyses",
        "file_path",
        "analysis",
        "func_info"
      ],
      "imports": [
        "os",
        "json",
        "ast",
        "re",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Any",
        "logging",
        "dataclasses.dataclass",
        "collections.defaultdict"
      ],
      "classes": [
        "FunctionInfo",
        "ScriptAnalysis",
        "DeepCodeAnalyzer"
      ],
      "total_lines": 847,
      "code_lines": 640,
      "complexity_score": 108,
      "purpose": "\\s*(.+)',\n            r'# Description:\\s*(.+)',\n            r'// Purpose:\\s*(.+)',\n            r'// Description:\\s*(.+)',\n            r'/\\*\\s*Purpose:\\s*(.+?)\\s*\\*/',\n            r'/\\*\\s*Description:\\s*(.+?)\\s*\\*/'\n        ]\n        \n        for pattern in purpose_patterns:\n            match = re.search(pattern, content, re.IGNORECASE | re.DOTALL)\n            if match:\n                return match.group(1).strip()\n        \n        # Fallback to filename analysis\n        if 'test' in file_name.lower():\n            return \"Testing and validation\"\n        elif 'deploy' in file_name.lower():\n            return \"Deployment and setup\"\n        elif 'sync' in file_name.lower():\n            return \"Synchronization and data management\"\n        elif 'monitor' in file_name.lower():\n            return \"Monitoring and health checking\"\n        else:\n            return \"General utility script\"\n    \n    def register_functions(self, analysis: ScriptAnalysis):\n        \"\"\"Register functions in the global registry\"\"\"\n        for func in analysis.functions:\n            self.function_registry[func.name].append(func)\n    \n    def find_duplicate_functions(self) -> Dict[str, List[FunctionInfo]]:\n        \"\"\"Find functions that appear in multiple scripts\"\"\"\n        duplicates = {}\n        \n        for func_name, func_list in self.function_registry.items():\n            if len(func_list) > 1:\n                # Check if functions are similar\n                similar_functions = []\n                for i, func1 in enumerate(func_list):\n                    for func2 in func_list[i+1:]:\n                        if self.are_functions_similar(func1, func2):\n                            if func_name not in similar_functions:\n                                similar_functions.append(func_name)\n                \n                if similar_functions:\n                    duplicates[func_name] = func_list\n        \n        return duplicates\n    \n    def are_functions_similar(self, func1: FunctionInfo, func2: FunctionInfo) -> bool:\n        \"\"\"Check if two functions are similar\"\"\"\n        # Check parameter similarity\n        if set(func1.parameters) != set(func2.parameters):\n            return False\n        \n        # Check complexity similarity\n        if abs(func1.complexity - func2.complexity) > 2:\n            return False\n        \n        # Check line count similarity\n        if abs(func1.lines - func2.lines) > 10:\n            return False\n        \n        # Check call similarity\n        calls1 = set(func1.calls)\n        calls2 = set(func2.calls)\n        call_similarity = len(calls1 & calls2) / len(calls1 | calls2) if (calls1 | calls2) else 1\n        \n        return call_similarity > 0.7\n    \n    def find_redundant_scripts(self) -> List[List[str]]:\n        \"\"\"Find scripts that have significant overlap\"\"\"\n        redundant_groups = []\n        processed_scripts = set()\n        \n        for script1_path, analysis1 in self.script_analyses.items():\n            if script1_path in processed_scripts:\n                continue\n            \n            redundant_group = [script1_path]\n            processed_scripts.add(script1_path)\n            \n            for script2_path, analysis2 in self.script_analyses.items():\n                if script2_path in processed_scripts:\n                    continue\n                \n                if self.are_scripts_redundant(analysis1, analysis2):\n                    redundant_group.append(script2_path)\n                    processed_scripts.add(script2_path)\n            \n            if len(redundant_group) > 1:\n                redundant_groups.append(redundant_group)\n        \n        return redundant_groups\n    \n    def are_scripts_redundant(self, analysis1: ScriptAnalysis, analysis2: ScriptAnalysis) -> bool:\n        \"\"\"Check if two scripts are redundant\"\"\"\n        # Check function overlap\n        funcs1 = {func.name for func in analysis1.functions}\n        funcs2 = {func.name for func in analysis2.functions}\n        \n        if not funcs1 or not funcs2:\n            return False\n        \n        func_overlap = len(funcs1 & funcs2) / len(funcs1 | funcs2)\n        \n        # Check variable overlap\n        vars1 = set(analysis1.variables)\n        vars2 = set(analysis2.variables)\n        \n        if vars1 and vars2:\n            var_overlap = len(vars1 & vars2) / len(vars1 | vars2)\n        else:\n            var_overlap = 0\n        \n        # Check import overlap\n        imports1 = set(analysis1.imports)\n        imports2 = set(analysis2.imports)\n        \n        if imports1 and imports2:\n            import_overlap = len(imports1 & imports2) / len(imports1 | imports2)\n        else:\n            import_overlap = 0\n        \n        # Check purpose similarity\n        purpose1_words = set(analysis1.purpose.lower().split())\n        purpose2_words = set(analysis2.purpose.lower().split())\n        \n        if purpose1_words and purpose2_words:\n            purpose_overlap = len(purpose1_words & purpose2_words) / len(purpose1_words | purpose2_words)\n        else:\n            purpose_overlap = 0\n        \n        # Calculate overall similarity\n        similarity = (func_overlap * 0.4 + var_overlap * 0.2 + import_overlap * 0.2 + purpose_overlap * 0.2)\n        \n        return similarity > 0.6\n    \n    def generate_consolidation_recommendations(self) -> Dict:\n        \"\"\"Generate consolidation recommendations based on deep analysis\"\"\"\n        logger.info(\"Generating consolidation recommendations...\")\n        \n        # Find duplicate functions\n        duplicate_functions = self.find_duplicate_functions()\n        \n        # Find redundant scripts\n        redundant_scripts = self.find_redundant_scripts()\n        \n        # Generate recommendations\n        recommendations = {\n            \"duplicate_functions\": duplicate_functions,\n            \"redundant_scripts\": redundant_scripts,\n            \"consolidation_plan\": self.create_consolidation_plan(duplicate_functions, redundant_scripts),\n            \"estimated_savings\": self.calculate_estimated_savings(duplicate_functions, redundant_scripts)\n        }\n        \n        return recommendations\n    \n    def create_consolidation_plan(self, duplicate_functions: Dict, redundant_scripts: List) -> Dict:\n        \"\"\"Create detailed consolidation plan\"\"\"\n        plan = {\n            \"function_consolidations\": [],\n            \"script_consolidations\": [],\n            \"merge_candidates\": []\n        }\n        \n        # Function consolidations\n        for func_name, func_list in duplicate_functions.items():\n            if len(func_list) > 1:\n                # Find the best implementation to keep\n                best_func = max(func_list, key=lambda f: f.complexity + f.lines)\n                other_funcs = [f for f in func_list if f != best_func]\n                \n                plan[\"function_consolidations\"].append({\n                    \"function_name\": func_name,\n                    \"keep_implementation\": best_func.file_path,\n                    \"remove_from\": [f.file_path for f in other_funcs],\n                    \"reason\": f\"Duplicate function found in {len(func_list)} scripts\"\n                })\n        \n        # Script consolidations\n        for script_group in redundant_scripts:\n            if len(script_group) > 1:\n                # Find the most comprehensive script to keep\n                analyses = [self.script_analyses[path] for path in script_group]\n                best_script = max(analyses, key=lambda a: a.complexity_score + a.code_lines)\n                other_scripts = [a for a in analyses if a != best_script]\n                \n                plan[\"script_consolidations\"].append({\n                    \"keep_script\": best_script.file_path,\n                    \"merge_from\": [a.file_path for a in other_scripts],\n                    \"reason\": f\"Redundant scripts with {len(script_group)} similar implementations\"\n                })\n        \n        return plan\n    \n    def calculate_estimated_savings(self, duplicate_functions: Dict, redundant_scripts: List) -> Dict:\n        \"\"\"Calculate estimated savings from consolidation\"\"\"\n        function_savings = 0\n        script_savings = 0\n        \n        # Calculate function savings\n        for func_name, func_list in duplicate_functions.items():\n            if len(func_list) > 1:\n                # Keep the best one, remove others\n                function_savings += sum(func.lines for func in func_list[1:])\n        \n        # Calculate script savings\n        for script_group in redundant_scripts:\n            if len(script_group) > 1:\n                analyses = [self.script_analyses[path] for path in script_group]\n                # Keep the best one, remove others\n                script_savings += sum(a.code_lines for a in analyses[1:])\n        \n        return {\n            \"function_savings_lines\": function_savings,\n            \"script_savings_lines\": script_savings,\n            \"total_savings_lines\": function_savings + script_savings,\n            \"duplicate_functions_count\": len(duplicate_functions),\n            \"redundant_scripts_count\": len(redundant_scripts)\n        }\n    \n    def save_analysis(self, output_file: str = \"deep-code-analysis.json\"):\n        \"\"\"Save analysis results to file\"\"\"\n        analysis_data = {\n            \"timestamp\": datetime.now().isoformat(),\n            \"total_scripts\": len(self.script_analyses),\n            \"script_analyses\": {\n                path: {\n                    \"file_name\": analysis.file_name,\n                    \"file_type\": analysis.file_type,\n                    \"functions\": [\n                        {\n                            \"name\": func.name,\n                            \"parameters\": func.parameters,\n                            \"lines\": func.lines,\n                            \"complexity\": func.complexity,\n                            \"calls\": func.calls,\n                            \"variables\": func.variables\n                        } for func in analysis.functions\n                    ],\n                    \"variables\": analysis.variables,\n                    \"imports\": analysis.imports,\n                    \"classes\": analysis.classes,\n                    \"total_lines\": analysis.total_lines,\n                    \"code_lines\": analysis.code_lines,\n                    \"complexity_score\": analysis.complexity_score,\n                    \"purpose\": analysis.purpose\n                } for path, analysis in self.script_analyses.items()\n            },\n            \"function_registry\": {\n                func_name: [\n                    {\n                        \"file_path\": func.file_path,\n                        \"parameters\": func.parameters,\n                        \"lines\": func.lines,\n                        \"complexity\": func.complexity\n                    } for func in func_list\n                ] for func_name, func_list in self.function_registry.items()\n            }\n        }\n        \n        with open(output_file, 'w') as f:\n            json.dump(analysis_data, f, indent=2)\n        \n        logger.info(f\"Analysis saved to {output_file}\")\n    \n    def save_recommendations(self, recommendations: Dict, output_file: str = \"consolidation-recommendations.json\"):\n        \"\"\"Save recommendations to file with proper serialization\"\"\"\n        # Convert FunctionInfo objects to dictionaries\n        serializable_recommendations = {\n            \"duplicate_functions\": {\n                func_name: [\n                    {\n                        \"name\": func.name,\n                        \"file_path\": func.file_path,\n                        \"parameters\": func.parameters,\n                        \"lines\": func.lines,\n                        \"complexity\": func.complexity,\n                        \"calls\": func.calls,\n                        \"variables\": func.variables\n                    } for func in func_list\n                ] for func_name, func_list in recommendations[\"duplicate_functions\"].items()\n            },\n            \"redundant_scripts\": recommendations[\"redundant_scripts\"],\n            \"consolidation_plan\": recommendations[\"consolidation_plan\"],\n            \"estimated_savings\": recommendations[\"estimated_savings\"]\n        }\n        \n        with open(output_file, 'w') as f:\n            json.dump(serializable_recommendations, f, indent=2)\n        \n        logger.info(f\"Recommendations saved to {output_file}\")\n\ndef main():\n    \"\"\"Main function\"\"\"\n    print(\"\ud83d\udd0d Deep Code Analyzer\")\n    print(\"=\" * 30)\n    \n    analyzer = DeepCodeAnalyzer()\n    \n    # Analyze all scripts\n    print(\"\ud83d\udcca Analyzing scripts...\")\n    analyses = analyzer.analyze_all_scripts()\n    \n    print(f\"\u2705 Analyzed {len(analyses)} scripts\")\n    \n    # Find duplicates and redundancies\n    print(\"\ud83d\udd0d Finding duplicates and redundancies...\")\n    duplicate_functions = analyzer.find_duplicate_functions()\n    redundant_scripts = analyzer.find_redundant_scripts()\n    \n    print(f\"\ud83d\udccb Found {len(duplicate_functions)} duplicate functions\")\n    print(f\"\ud83d\udccb Found {len(redundant_scripts)} redundant script groups\")\n    \n    # Generate recommendations\n    recommendations = analyzer.generate_consolidation_recommendations()\n    \n    # Print summary\n    print(f\"\\n\ud83d\udcca Analysis Summary:\")\n    print(f\"  Total Scripts: {len(analyses)}\")\n    print(f\"  Duplicate Functions: {len(duplicate_functions)}\")\n    print(f\"  Redundant Script Groups: {len(redundant_scripts)}\")\n    print(f\"  Estimated Savings: {recommendations['estimated_savings']['total_savings_lines']} lines\")\n    \n    # Save analysis\n    analyzer.save_analysis()\n    \n    # Save recommendations\n    analyzer.save_recommendations(recommendations)\n    \n    print(f\"\\n\u2705 Analysis complete!\")\n    print(f\"\ud83d\udcc1 Results saved to:\")\n    print(f\"  - deep-code-analysis.json\")\n    print(f\"  - consolidation-recommendations.json\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    "scripts/load-credentials.sh": {
      "file_name": "load-credentials.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "export_vars",
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "N8N_URL",
        "N8N_API_KEY",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "OPENROUTER_API_KEY",
        "ALEX_AI_ENVIRONMENT",
        "ALEX_AI_VERSION",
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY",
        "N8N_URL",
        "N8N_API_KEY",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "OPENROUTER_API_KEY",
        "GITHUB_TOKEN",
        "ALEX_AI_ENVIRONMENT",
        "ALEX_AI_VERSION"
      ],
      "imports": [
        "environment",
        "Run",
        "Credentials",
        "CI/CD"
      ],
      "classes": [],
      "total_lines": 133,
      "code_lines": 93,
      "complexity_score": 15,
      "purpose": "General utility script"
    },
    "scripts/validate-strings.sh": {
      "file_name": "validate-strings.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "validate_strings",
          "parameters": [],
          "lines": 32,
          "complexity": 8,
          "calls": [],
          "variables": [
            "file",
            "issues",
            "issues",
            "issues",
            "issues"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 14,
          "complexity": 3,
          "calls": [],
          "variables": [
            "total_issues",
            "total_issues"
          ]
        }
      ],
      "variables": [
        "file",
        "issues",
        "issues",
        "issues",
        "issues",
        "total_issues",
        "total_issues"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 54,
      "code_lines": 36,
      "complexity_score": 10,
      "purpose": "General utility script"
    },
    "scripts/add-quote-handling-memory-simple.py": {
      "file_name": "add-quote-handling-memory-simple.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 33,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "AlexAIMemoryAdder",
            "add_memory",
            "print",
            "print",
            "items",
            "print",
            "print",
            "get",
            "print",
            "print",
            "print",
            "items",
            "print",
            "get",
            "len",
            "get",
            "get",
            "print",
            "upper",
            "get"
          ],
          "variables": [
            "memory_adder",
            "results",
            "success_count",
            "status"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 91,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "save_memory_to_file",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 2,
          "calls": [
            "strftime",
            "isoformat",
            "open",
            "dump",
            "now",
            "now",
            "str"
          ],
          "variables": [
            "timestamp",
            "filename",
            "memory_file"
          ]
        },
        {
          "name": "create_memory_summary",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "add_memory",
          "parameters": [
            "self"
          ],
          "lines": 38,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "save_memory_to_file",
            "get",
            "print",
            "create_memory_summary",
            "print",
            "print",
            "print",
            "print",
            "print",
            "strftime",
            "print",
            "open",
            "write",
            "print",
            "now",
            "str",
            "get",
            "get",
            "str"
          ],
          "variables": [
            "results",
            "file_result",
            "summary",
            "timestamp",
            "summary_filename"
          ]
        }
      ],
      "variables": [
        "memory_adder",
        "results",
        "success_count",
        "results",
        "file_result",
        "summary",
        "status",
        "timestamp",
        "filename",
        "memory_file",
        "timestamp",
        "summary_filename"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "urllib.request",
        "urllib.parse",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [
        "AlexAIMemoryAdder"
      ],
      "total_lines": 246,
      "code_lines": 197,
      "complexity_score": 10,
      "purpose": "General utility script"
    },
    "scripts/production-testing-suite.sh": {
      "file_name": "production-testing-suite.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_result",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "test_name",
            "result",
            "details",
            "TOTAL_TESTS",
            "PASSED_TESTS",
            "FAILED_TESTS"
          ]
        },
        {
          "name": "test_shell_generation",
          "parameters": [],
          "lines": 29,
          "complexity": 4,
          "calls": [],
          "variables": [
            "test_script"
          ]
        },
        {
          "name": "test_api_key_management",
          "parameters": [],
          "lines": 36,
          "complexity": 5,
          "calls": [],
          "variables": [
            "key_file_perms"
          ]
        },
        {
          "name": "test_claude_api",
          "parameters": [],
          "lines": 32,
          "complexity": 4,
          "calls": [],
          "variables": [
            "api_response"
          ]
        },
        {
          "name": "test_nextjs_app",
          "parameters": [],
          "lines": 35,
          "complexity": 5,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_alexai_integration",
          "parameters": [],
          "lines": 35,
          "complexity": 5,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_error_handling",
          "parameters": [],
          "lines": 19,
          "complexity": 3,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_performance",
          "parameters": [],
          "lines": 21,
          "complexity": 3,
          "calls": [],
          "variables": [
            "start_time",
            "end_time",
            "duration"
          ]
        },
        {
          "name": "generate_test_report",
          "parameters": [],
          "lines": 52,
          "complexity": 4,
          "calls": [
            "test"
          ],
          "variables": [
            "report_file"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 33,
          "complexity": 3,
          "calls": [
            "test"
          ],
          "variables": []
        }
      ],
      "variables": [
        "SCRIPT_DIR",
        "TEST_RESULTS_DIR",
        "LOG_FILE",
        "TOTAL_TESTS",
        "PASSED_TESTS",
        "FAILED_TESTS",
        "test_name",
        "result",
        "details",
        "TOTAL_TESTS",
        "PASSED_TESTS",
        "FAILED_TESTS",
        "test_script",
        "key_file_perms",
        "api_response",
        "start_time",
        "end_time",
        "duration",
        "report_file"
      ],
      "imports": [
        "\"$HOME/.alexai-keys/manage-keys.sh\"",
        "\"$HOME/.alexai-keys/manage-keys.sh\"",
        "###",
        "Deploy",
        "Conduct",
        "Prepare",
        "Review"
      ],
      "classes": [],
      "total_lines": 355,
      "code_lines": 243,
      "complexity_score": 35,
      "purpose": "Testing and validation"
    },
    "scripts/automate-bidirectional-setup.sh": {
      "file_name": "automate-bidirectional-setup.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_warning",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_error",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_step",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_automation",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "load_credentials",
          "parameters": [],
          "lines": 35,
          "complexity": 9,
          "calls": [],
          "variables": []
        },
        {
          "name": "check_prerequisites",
          "parameters": [],
          "lines": 29,
          "complexity": 8,
          "calls": [
            "branch"
          ],
          "variables": [
            "tools",
            "current_branch"
          ]
        },
        {
          "name": "configure_github_secrets",
          "parameters": [],
          "lines": 52,
          "complexity": 7,
          "calls": [],
          "variables": [
            "repo_url",
            "repo_name",
            "repo_owner",
            "secrets"
          ]
        },
        {
          "name": "enable_scheduled_workflows",
          "parameters": [],
          "lines": 50,
          "complexity": 10,
          "calls": [],
          "variables": [
            "workflow_file",
            "repo_url",
            "repo_name",
            "repo_owner",
            "workflows",
            "workflow_runs"
          ]
        },
        {
          "name": "test_system_with_sample_change",
          "parameters": [],
          "lines": 111,
          "complexity": 7,
          "calls": [
            "Date",
            "toISOString",
            "N8N"
          ],
          "variables": [
            "test_workflow",
            "response",
            "http_code",
            "workflow_id",
            "webhook_response",
            "repo_url",
            "repo_name",
            "repo_owner",
            "sync_direction"
          ]
        },
        {
          "name": "setup_dashboard_monitoring",
          "parameters": [],
          "lines": 36,
          "complexity": 3,
          "calls": [
            "log_info"
          ],
          "variables": [
            "DASHBOARD_DIR",
            "ANALYSIS_DIR",
            "WORKFLOWS_DIR",
            "GREEN",
            "BLUE",
            "NC"
          ]
        },
        {
          "name": "log_info",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "log_success",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "monitor_dashboard",
          "parameters": [],
          "lines": 33,
          "complexity": 7,
          "calls": [],
          "variables": [
            "recent_changes",
            "workflow_count",
            "dashboard_file"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "verify_system",
          "parameters": [],
          "lines": 69,
          "complexity": 7,
          "calls": [
            "failed",
            "available"
          ],
          "variables": [
            "components",
            "response",
            "http_code",
            "repo_url",
            "repo_name",
            "repo_owner",
            "secrets",
            "workflows"
          ]
        },
        {
          "name": "generate_final_report",
          "parameters": [],
          "lines": 90,
          "complexity": 3,
          "calls": [],
          "variables": [
            "report_file",
            "sync_direction"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "PURPLE",
        "CYAN",
        "NC",
        "tools",
        "current_branch",
        "repo_url",
        "repo_name",
        "repo_owner",
        "secrets",
        "workflow_file",
        "repo_url",
        "repo_name",
        "repo_owner",
        "workflows",
        "workflow_runs",
        "test_workflow",
        "response",
        "http_code",
        "workflow_id",
        "webhook_response",
        "repo_url",
        "repo_name",
        "repo_owner",
        "sync_direction",
        "DASHBOARD_DIR",
        "ANALYSIS_DIR",
        "WORKFLOWS_DIR",
        "GREEN",
        "BLUE",
        "NC",
        "recent_changes",
        "workflow_count",
        "dashboard_file",
        "components",
        "response",
        "http_code",
        "repo_url",
        "repo_name",
        "repo_owner",
        "secrets",
        "workflows",
        "report_file",
        "sync_direction"
      ],
      "imports": [
        "~/.zshrc",
        "Run:",
        "Open",
        "The",
        "##",
        "**Monitor**:",
        "**Test**:",
        "**Review**:",
        "**Optimize**:",
        "Monitor",
        "Check",
        "View"
      ],
      "classes": [],
      "total_lines": 641,
      "code_lines": 449,
      "complexity_score": 61,
      "purpose": "General utility script"
    },
    "scripts/setup-secure-api-keys.sh": {
      "file_name": "setup-secure-api-keys.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "SECURE_DIR",
        "API_KEYS_FILE",
        "WORKING_KEY",
        "POTENTIAL_KEY",
        "ANTHROPIC_API_KEY",
        "TEST_RESULT",
        "WORKING_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY",
        "OPENAI_API_KEY",
        "OPENROUTER_API_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY",
        "OPENAI_API_KEY",
        "OPENROUTER_API_KEY",
        "ANTHROPIC_API_KEY",
        "CLAUDE_API_KEY",
        "SECURE_DIR",
        "API_KEYS_FILE",
        "TEST_RESULT",
        "BACKUP_FILE",
        "keys",
        "status",
        "edit",
        "reload"
      ],
      "imports": [
        "(${#POTENTIAL_KEY}",
        "Please",
        "the",
        "\"$API_KEYS_FILE\"",
        "\"$API_KEYS_FILE\"",
        "(${#ANTHROPIC_API_KEY}",
        "\"$API_KEYS_FILE\"",
        "\"$API_KEYS_FILE\"",
        "source",
        "alexai-status\"",
        "If"
      ],
      "classes": [],
      "total_lines": 236,
      "code_lines": 156,
      "complexity_score": 21,
      "purpose": "General utility script"
    },
    "scripts/monitor-performance.js": {
      "file_name": "monitor-performance.js",
      "file_type": "js",
      "functions": [],
      "variables": [
        "fs",
        "path",
        "startTime",
        "buildOutput",
        "endTime",
        "duration",
        "metrics",
        "metrics",
        "cacheHitMatches",
        "cacheMissMatches",
        "totalCacheOperations",
        "timestamp",
        "metricsFile",
        "timestamp",
        "reportFile",
        "report",
        "recommendations",
        "monitor"
      ],
      "imports": [
        "fs",
        "path",
        "child_process"
      ],
      "classes": [
        "TurborepoPerformanceMonitor"
      ],
      "total_lines": 154,
      "code_lines": 111,
      "complexity_score": 11,
      "purpose": "Monitoring and health checking"
    },
    "scripts/begin-live-scraping.sh": {
      "file_name": "begin-live-scraping.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "supabase_test",
        "select",
        "n8n_test",
        "scraping_response",
        "scheduled_response",
        "mcp_response",
        "live_data",
        "mock_data"
      ],
      "imports": [
        "./scripts/deployment/general/consolidated_general.py",
        "Starting",
        "Louis,",
        "Setting",
        "Louis",
        "Louis,",
        "Starting",
        "|",
        "Monitor",
        "Verify",
        "Test",
        "Check"
      ],
      "classes": [],
      "total_lines": 160,
      "code_lines": 124,
      "complexity_score": 10,
      "purpose": "General utility script"
    },
    "scripts/deploy-complete-n8n-infrastructure.sh": {
      "file_name": "deploy-complete-n8n-infrastructure.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "test_n8n_connection",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "response"
          ]
        },
        {
          "name": "test_supabase_connection",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "response"
          ]
        },
        {
          "name": "activate_n8n_workflows",
          "parameters": [],
          "lines": 22,
          "complexity": 3,
          "calls": [],
          "variables": [
            "workflows",
            "response"
          ]
        },
        {
          "name": "test_webhook_endpoints",
          "parameters": [],
          "lines": 13,
          "complexity": 2,
          "calls": [],
          "variables": [
            "job_response"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 33,
          "complexity": 5,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "IFS",
        "line",
        "response",
        "response",
        "workflows",
        "response",
        "job_response"
      ],
      "imports": [
        "Please",
        "Please",
        "Execute",
        "Start",
        "Test"
      ],
      "classes": [],
      "total_lines": 130,
      "code_lines": 88,
      "complexity_score": 14,
      "purpose": "Deployment and setup"
    },
    "scripts/improved-e2e-test.js": {
      "file_name": "improved-e2e-test.js",
      "file_type": "js",
      "functions": [
        {
          "name": "logTest",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [
            "Date",
            "toISOString",
            "push",
            "if",
            "log",
            "log"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "takeScreenshot",
          "parameters": [],
          "lines": 10,
          "complexity": 2,
          "calls": [
            "if",
            "existsSync",
            "mkdirSync",
            "replace",
            "toLowerCase",
            "now",
            "join",
            "screenshot"
          ],
          "variables": [
            "filename",
            "filepath"
          ]
        },
        {
          "name": "testPageLoad",
          "parameters": [],
          "lines": 33,
          "complexity": 3,
          "calls": [
            "log",
            "setRequestInterception",
            "on",
            "if",
            "url",
            "includes",
            "abort",
            "continue",
            "goto",
            "waitForSelector",
            "eval",
            "if",
            "includes",
            "logTest",
            "takeScreenshot",
            "logTest",
            "catch",
            "logTest"
          ],
          "variables": [
            "heading"
          ]
        },
        {
          "name": "testDashboardButtons",
          "parameters": [],
          "lines": 54,
          "complexity": 5,
          "calls": [
            "log",
            "for",
            "if",
            "evaluateHandle",
            "from",
            "querySelectorAll",
            "find",
            "includes",
            "if",
            "evaluate",
            "logTest",
            "click",
            "Promise",
            "setTimeout",
            "if",
            "logTest",
            "takeScreenshot",
            "replace",
            "toLowerCase",
            "click",
            "Promise",
            "setTimeout",
            "logTest",
            "catch",
            "logTest"
          ],
          "variables": [
            "dashboardButtons",
            "button",
            "buttonElement",
            "buttons",
            "dashboardVisible"
          ]
        },
        {
          "name": "testJobCards",
          "parameters": [],
          "lines": 54,
          "complexity": 5,
          "calls": [
            "log",
            "waitForSelector",
            "if",
            "logTest",
            "logTest",
            "click",
            "Promise",
            "setTimeout",
            "evaluate",
            "contains",
            "contains",
            "if",
            "logTest",
            "logTest",
            "if",
            "evaluate",
            "if",
            "includes",
            "includes",
            "logTest",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "jobCards",
            "firstJobCard",
            "isSelected",
            "applyButton",
            "buttonText"
          ]
        },
        {
          "name": "testAPIConnectivity",
          "parameters": [],
          "lines": 40,
          "complexity": 3,
          "calls": [
            "log",
            "evaluate",
            "async",
            "fetch",
            "json",
            "catch",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "async",
            "fetch",
            "json",
            "catch",
            "if",
            "isArray",
            "logTest",
            "logTest",
            "catch",
            "logTest"
          ],
          "variables": [
            "healthResponse",
            "response",
            "mockDataResponse",
            "response"
          ]
        },
        {
          "name": "runAllTests",
          "parameters": [],
          "lines": 39,
          "complexity": 1,
          "calls": [
            "log",
            "log",
            "launch",
            "newPage",
            "setViewport",
            "testPageLoad",
            "testDashboardButtons",
            "testJobCards",
            "testAPIConnectivity",
            "catch",
            "log",
            "close",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "toFixed",
            "join",
            "now",
            "writeFileSync",
            "stringify",
            "log",
            "exit"
          ],
          "variables": [
            "browser",
            "page",
            "reportPath"
          ]
        }
      ],
      "variables": [
        "puppeteer",
        "fs",
        "path",
        "CONFIG",
        "testResults",
        "result",
        "filename",
        "filepath",
        "heading",
        "dashboardButtons",
        "button",
        "buttons",
        "dashboardVisible",
        "jobCards",
        "firstJobCard",
        "isSelected",
        "applyButton",
        "buttonText",
        "healthResponse",
        "response",
        "mockDataResponse",
        "response",
        "browser",
        "page",
        "reportPath",
        "buttonElement"
      ],
      "imports": [
        "puppeteer",
        "fs",
        "path"
      ],
      "classes": [],
      "total_lines": 279,
      "code_lines": 228,
      "complexity_score": 24,
      "purpose": "Testing and validation"
    },
    "scripts/test-script.sh": {
      "file_name": "test-script.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [],
      "imports": [],
      "classes": [],
      "total_lines": 14,
      "code_lines": 10,
      "complexity_score": 0,
      "purpose": "Testing and validation"
    },
    "scripts/load_alex_ai_credentials.sh": {
      "file_name": "load_alex_ai_credentials.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "required_creds"
      ],
      "imports": [
        "~/.zshrc"
      ],
      "classes": [],
      "total_lines": 27,
      "code_lines": 14,
      "complexity_score": 6,
      "purpose": "General utility script"
    },
    "scripts/safe-milestone-push.sh": {
      "file_name": "safe-milestone-push.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "escape_quotes",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": [
            "message"
          ]
        },
        {
          "name": "create_safe_commit_message",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": [
            "milestone",
            "timestamp"
          ]
        },
        {
          "name": "safe_commit",
          "parameters": [],
          "lines": 15,
          "complexity": 1,
          "calls": [],
          "variables": [
            "milestone",
            "files",
            "commit_msg"
          ]
        },
        {
          "name": "safe_push",
          "parameters": [],
          "lines": 8,
          "complexity": 1,
          "calls": [],
          "variables": [
            "branch"
          ]
        },
        {
          "name": "milestone_push",
          "parameters": [],
          "lines": 31,
          "complexity": 2,
          "calls": [],
          "variables": [
            "milestone",
            "files",
            "branch"
          ]
        }
      ],
      "variables": [
        "message",
        "milestone",
        "timestamp",
        "milestone",
        "files",
        "commit_msg",
        "branch",
        "milestone",
        "files",
        "branch"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 91,
      "code_lines": 53,
      "complexity_score": 3,
      "purpose": "General utility script"
    },
    "scripts/setup-database-simple.js": {
      "file_name": "setup-database-simple.js",
      "file_type": "js",
      "functions": [
        {
          "name": "setupDatabase",
          "parameters": [],
          "lines": 125,
          "complexity": 7,
          "calls": [
            "log",
            "log",
            "data",
            "for",
            "from",
            "insert",
            "select",
            "if",
            "log",
            "log",
            "catch",
            "log",
            "log",
            "from",
            "select",
            "limit",
            "if",
            "log",
            "log",
            "if",
            "log",
            "forEach",
            "log",
            "catch",
            "log",
            "for",
            "from",
            "select",
            "limit",
            "if",
            "log",
            "log",
            "catch",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "catch",
            "error",
            "log",
            "log",
            "log",
            "log",
            "log",
            "exit"
          ],
          "variables": [
            "sampleJobs",
            "job",
            "tables",
            "table"
          ]
        }
      ],
      "variables": [
        "path",
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY",
        "supabase",
        "sampleJobs",
        "job",
        "tables",
        "table"
      ],
      "imports": [
        "@supabase/supabase-js",
        "path",
        "dotenv"
      ],
      "classes": [],
      "total_lines": 145,
      "code_lines": 124,
      "complexity_score": 10,
      "purpose": "General utility script"
    },
    "scripts/alexai-init.sh": {
      "file_name": "alexai-init.sh",
      "file_type": "sh",
      "functions": [],
      "variables": [
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY",
        "N8N_BASE_URL",
        "N8N_API_KEY",
        "ANTHROPIC_API_KEY",
        "OPENAI_API_KEY",
        "OPENROUTER_API_KEY"
      ],
      "imports": [
        "~/.zshrc",
        "AlexAI",
        "Project"
      ],
      "classes": [],
      "total_lines": 46,
      "code_lines": 31,
      "complexity_score": 5,
      "purpose": "General utility script"
    },
    "scripts/string-manipulation-fix.sh": {
      "file_name": "string-manipulation-fix.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_output",
          "parameters": [],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": [
            "text"
          ]
        },
        {
          "name": "safe_multiline",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "lines"
          ]
        },
        {
          "name": "fix_existing_scripts",
          "parameters": [],
          "lines": 42,
          "complexity": 6,
          "calls": [],
          "variables": [
            "fixed_count",
            "fixed_count",
            "fixed_count"
          ]
        },
        {
          "name": "create_safe_templates",
          "parameters": [],
          "lines": 19,
          "complexity": 1,
          "calls": [
            "safe_status"
          ],
          "variables": [
            "component",
            "status",
            "icon"
          ]
        },
        {
          "name": "safe_status",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": [
            "component",
            "status",
            "icon"
          ]
        },
        {
          "name": "safe_milestone",
          "parameters": [],
          "lines": 10,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "safe_progress",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        },
        {
          "name": "safe_list",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "items"
          ]
        },
        {
          "name": "create_validation_system",
          "parameters": [],
          "lines": 40,
          "complexity": 9,
          "calls": [
            "validate_strings"
          ],
          "variables": [
            "file",
            "issues",
            "issues",
            "issues",
            "issues"
          ]
        },
        {
          "name": "validate_strings",
          "parameters": [],
          "lines": 32,
          "complexity": 8,
          "calls": [],
          "variables": [
            "file",
            "issues",
            "issues",
            "issues",
            "issues"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 14,
          "complexity": 3,
          "calls": [],
          "variables": [
            "total_issues",
            "total_issues"
          ]
        },
        {
          "name": "create_safe_execution",
          "parameters": [],
          "lines": 32,
          "complexity": 5,
          "calls": [
            "safe_execute"
          ],
          "variables": [
            "command",
            "description",
            "safe_command"
          ]
        },
        {
          "name": "safe_execute",
          "parameters": [],
          "lines": 23,
          "complexity": 4,
          "calls": [],
          "variables": [
            "command",
            "description",
            "safe_command"
          ]
        },
        {
          "name": "safe_status",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": [
            "component",
            "status",
            "icon"
          ]
        },
        {
          "name": "safe_milestone",
          "parameters": [],
          "lines": 10,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        },
        {
          "name": "safe_progress",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        },
        {
          "name": "safe_list",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "items"
          ]
        },
        {
          "name": "demonstrate_safe_output",
          "parameters": [],
          "lines": 27,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_fix_documentation",
          "parameters": [],
          "lines": 94,
          "complexity": 5,
          "calls": [
            "safe_output",
            "safe_multiline",
            "safe_status",
            "safe_milestone",
            "safe_progress",
            "safe_list",
            "Agents"
          ],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 14,
          "complexity": 3,
          "calls": [],
          "variables": [
            "total_issues",
            "total_issues"
          ]
        }
      ],
      "variables": [
        "text",
        "title",
        "lines",
        "fixed_count",
        "fixed_count",
        "fixed_count",
        "component",
        "status",
        "icon",
        "title",
        "description",
        "step",
        "status",
        "title",
        "items",
        "file",
        "issues",
        "issues",
        "issues",
        "issues",
        "total_issues",
        "total_issues",
        "command",
        "description",
        "safe_command",
        "component",
        "status",
        "icon",
        "title",
        "description",
        "step",
        "status",
        "title",
        "items"
      ],
      "imports": [
        "scripts/testing/general/consolidated_general.py",
        "Safe",
        "String",
        "Safe",
        "Safe",
        "scripts/testing/general/consolidated_general.py",
        "**Always",
        "**Validate",
        "**Use",
        "**Test",
        "**Avoid",
        "EOF"
      ],
      "classes": [],
      "total_lines": 509,
      "code_lines": 313,
      "complexity_score": 30,
      "purpose": "General utility script"
    },
    "scripts/puppeteer-e2e-test.js": {
      "file_name": "puppeteer-e2e-test.js",
      "file_type": "js",
      "functions": [
        {
          "name": "logTest",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [
            "Date",
            "toISOString",
            "push",
            "if",
            "log",
            "log"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "takeScreenshot",
          "parameters": [],
          "lines": 10,
          "complexity": 2,
          "calls": [
            "if",
            "existsSync",
            "mkdirSync",
            "replace",
            "toLowerCase",
            "now",
            "join",
            "screenshot"
          ],
          "variables": [
            "filename",
            "filepath"
          ]
        },
        {
          "name": "waitForElement",
          "parameters": [],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "waitForSelector",
            "catch"
          ],
          "variables": []
        },
        {
          "name": "testPageLoad",
          "parameters": [],
          "lines": 28,
          "complexity": 3,
          "calls": [
            "log",
            "goto",
            "waitForElement",
            "if",
            "logTest",
            "eval",
            "if",
            "includes",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "mainContentLoaded",
            "heading"
          ]
        },
        {
          "name": "testDashboardButtons",
          "parameters": [],
          "lines": 47,
          "complexity": 4,
          "calls": [
            "log",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "text",
            "for",
            "x",
            "contains",
            "text",
            "if",
            "logTest",
            "click",
            "waitForTimeout",
            "if",
            "logTest",
            "takeScreenshot",
            "replace",
            "toLowerCase",
            "click",
            "waitForTimeout",
            "logTest",
            "catch",
            "logTest"
          ],
          "variables": [
            "dashboardButtons",
            "button",
            "buttonElement",
            "dashboardVisible"
          ]
        },
        {
          "name": "testJobCards",
          "parameters": [],
          "lines": 55,
          "complexity": 5,
          "calls": [
            "log",
            "waitForElement",
            "if",
            "logTest",
            "if",
            "logTest",
            "logTest",
            "click",
            "waitForTimeout",
            "selected",
            "evaluate",
            "contains",
            "contains",
            "if",
            "logTest",
            "logTest",
            "text",
            "text",
            "if",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "jobCardsLoaded",
            "jobCards",
            "firstJobCard",
            "isSelected",
            "applyButton"
          ]
        },
        {
          "name": "testFilterSidebar",
          "parameters": [],
          "lines": 42,
          "complexity": 4,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "if",
            "select",
            "waitForTimeout",
            "logTest",
            "logTest",
            "if",
            "evaluate",
            "dispatchEvent",
            "Event",
            "waitForTimeout",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "filterSidebar",
            "locationSelect",
            "scoreSlider"
          ]
        },
        {
          "name": "testResumeUpload",
          "parameters": [],
          "lines": 38,
          "complexity": 3,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "join",
            "writeFileSync",
            "uploadFile",
            "waitForTimeout",
            "if",
            "logTest",
            "logTest",
            "unlinkSync",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "resumeUpload",
            "dummyFile",
            "analysisIndicator"
          ]
        },
        {
          "name": "testStatsDashboard",
          "parameters": [],
          "lines": 35,
          "complexity": 4,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "if",
            "logTest",
            "logTest",
            "text",
            "text",
            "if",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "statsDashboard",
            "statsNumbers",
            "exportButtons"
          ]
        },
        {
          "name": "testApplicationTracker",
          "parameters": [],
          "lines": 29,
          "complexity": 3,
          "calls": [
            "log",
            "text",
            "if",
            "logTest",
            "logTest",
            "text",
            "text",
            "if",
            "click",
            "waitForTimeout",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "appTracker",
            "statusButtons"
          ]
        },
        {
          "name": "testDataSourceIndicator",
          "parameters": [],
          "lines": 29,
          "complexity": 3,
          "calls": [
            "log",
            "if",
            "logTest",
            "logTest",
            "text",
            "if",
            "click",
            "waitForTimeout",
            "logTest",
            "logTest",
            "takeScreenshot",
            "catch",
            "logTest"
          ],
          "variables": [
            "dataSourceIndicator",
            "refreshButton"
          ]
        },
        {
          "name": "testResponsiveDesign",
          "parameters": [],
          "lines": 30,
          "complexity": 3,
          "calls": [
            "log",
            "for",
            "setViewport",
            "waitForTimeout",
            "if",
            "logTest",
            "takeScreenshot",
            "toLowerCase",
            "logTest",
            "catch",
            "logTest",
            "setViewport"
          ],
          "variables": [
            "viewports",
            "viewport",
            "mainContent"
          ]
        },
        {
          "name": "testAPIConnectivity",
          "parameters": [],
          "lines": 63,
          "complexity": 4,
          "calls": [
            "log",
            "evaluate",
            "async",
            "fetch",
            "json",
            "catch",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "async",
            "fetch",
            "json",
            "catch",
            "if",
            "logTest",
            "logTest",
            "evaluate",
            "async",
            "fetch",
            "stringify",
            "json",
            "catch",
            "if",
            "logTest",
            "logTest",
            "catch",
            "logTest"
          ],
          "variables": [
            "healthResponse",
            "response",
            "jobsResponse",
            "response",
            "n8nResponse",
            "response"
          ]
        },
        {
          "name": "runAllTests",
          "parameters": [],
          "lines": 56,
          "complexity": 1,
          "calls": [
            "log",
            "log",
            "launch",
            "newPage",
            "setViewport",
            "on",
            "log",
            "on",
            "log",
            "url",
            "failure",
            "testPageLoad",
            "testDashboardButtons",
            "testJobCards",
            "testFilterSidebar",
            "testResumeUpload",
            "testStatsDashboard",
            "testApplicationTracker",
            "testDataSourceIndicator",
            "testResponsiveDesign",
            "testAPIConnectivity",
            "catch",
            "log",
            "close",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "toFixed",
            "join",
            "now",
            "writeFileSync",
            "stringify",
            "log",
            "exit"
          ],
          "variables": [
            "browser",
            "page",
            "reportPath"
          ]
        }
      ],
      "variables": [
        "puppeteer",
        "fs",
        "path",
        "CONFIG",
        "testResults",
        "result",
        "filename",
        "filepath",
        "mainContentLoaded",
        "heading",
        "dashboardButtons",
        "button",
        "buttonElement",
        "dashboardVisible",
        "jobCardsLoaded",
        "jobCards",
        "firstJobCard",
        "isSelected",
        "applyButton",
        "filterSidebar",
        "locationSelect",
        "scoreSlider",
        "resumeUpload",
        "dummyFile",
        "analysisIndicator",
        "statsDashboard",
        "statsNumbers",
        "exportButtons",
        "appTracker",
        "statusButtons",
        "dataSourceIndicator",
        "refreshButton",
        "viewports",
        "viewport",
        "mainContent",
        "healthResponse",
        "response",
        "jobsResponse",
        "response",
        "n8nResponse",
        "response",
        "browser",
        "page",
        "reportPath"
      ],
      "imports": [
        "puppeteer",
        "fs",
        "path"
      ],
      "classes": [],
      "total_lines": 534,
      "code_lines": 438,
      "complexity_score": 46,
      "purpose": "Testing and validation"
    },
    "scripts/generated/test-basic.sh": {
      "file_name": "test-basic.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "log",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "handle_error",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": [
            "exit_code",
            "line_number"
          ]
        }
      ],
      "variables": [
        "SCRIPT_NAME",
        "LOG_FILE",
        "exit_code",
        "line_number"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 38,
      "code_lines": 18,
      "complexity_score": 0,
      "purpose": "Testing and validation"
    },
    "scripts/generated/test-status.sh": {
      "file_name": "test-status.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "output",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "show_status",
          "parameters": [],
          "lines": 15,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [],
      "imports": [],
      "classes": [],
      "total_lines": 32,
      "code_lines": 20,
      "complexity_score": 0,
      "purpose": "Testing and validation"
    },
    "scripts/generated/test-progress.sh": {
      "file_name": "test-progress.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "output",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "update_progress",
          "parameters": [],
          "lines": 11,
          "complexity": 1,
          "calls": [],
          "variables": [
            "step",
            "description",
            "PROGRESS",
            "percentage"
          ]
        },
        {
          "name": "run_progress",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "PROGRESS",
        "TOTAL_STEPS",
        "step",
        "description",
        "PROGRESS",
        "percentage"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 56,
      "code_lines": 32,
      "complexity_score": 0,
      "purpose": "Testing and validation"
    },
    "scripts/python/youtube_scraper_crew_integration.py": {
      "file_name": "youtube_scraper_crew_integration.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 19,
          "complexity": 3,
          "calls": [
            "YouTubeScraperCrewIntegration",
            "request_youtube_analysis",
            "print",
            "len",
            "print",
            "print",
            "YouTubeScraperCrewIntegration",
            "list_crew_members",
            "items",
            "exit",
            "dumps",
            "print",
            "len"
          ],
          "variables": [
            "crew_member_id",
            "video_url",
            "analysis_focus",
            "scraper",
            "result",
            "scraper",
            "crew_list"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 62,
          "complexity": 1,
          "calls": [
            "getenv",
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "request_youtube_analysis",
          "parameters": [
            "self",
            "crew_member_id",
            "video_url",
            "analysis_focus"
          ],
          "lines": 75,
          "complexity": 7,
          "calls": [
            "_extract_video_id",
            "_is_already_processed",
            "post",
            "_is_valid_youtube_url",
            "_get_existing_analysis",
            "_generate_request_id",
            "isoformat",
            "json",
            "now",
            "str"
          ],
          "variables": [
            "video_id",
            "request_data",
            "response",
            "result"
          ]
        },
        {
          "name": "batch_analyze_videos",
          "parameters": [
            "self",
            "crew_member_id",
            "video_urls",
            "analysis_focus"
          ],
          "lines": 38,
          "complexity": 3,
          "calls": [
            "request_youtube_analysis",
            "append",
            "len",
            "isoformat",
            "now"
          ],
          "variables": [
            "results",
            "successful",
            "failed",
            "result"
          ]
        },
        {
          "name": "get_crew_analysis_history",
          "parameters": [
            "self",
            "crew_member_id"
          ],
          "lines": 44,
          "complexity": 4,
          "calls": [
            "get",
            "json",
            "len",
            "json",
            "str"
          ],
          "variables": [
            "url",
            "headers",
            "params",
            "response"
          ]
        },
        {
          "name": "_is_valid_youtube_url",
          "parameters": [
            "self",
            "url"
          ],
          "lines": 13,
          "complexity": 3,
          "calls": [
            "search"
          ],
          "variables": [
            "youtube_patterns"
          ]
        },
        {
          "name": "_extract_video_id",
          "parameters": [
            "self",
            "url"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "search",
            "group"
          ],
          "variables": [
            "match"
          ]
        },
        {
          "name": "_is_already_processed",
          "parameters": [
            "self",
            "video_id"
          ],
          "lines": 15,
          "complexity": 3,
          "calls": [
            "get",
            "len",
            "json"
          ],
          "variables": [
            "url",
            "headers",
            "params",
            "response"
          ]
        },
        {
          "name": "_get_existing_analysis",
          "parameters": [
            "self",
            "video_id"
          ],
          "lines": 32,
          "complexity": 4,
          "calls": [
            "get",
            "json",
            "json",
            "str"
          ],
          "variables": [
            "url",
            "headers",
            "params",
            "response"
          ]
        },
        {
          "name": "_generate_request_id",
          "parameters": [
            "self",
            "crew_member_id",
            "video_url"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "hexdigest",
            "isoformat",
            "md5",
            "encode",
            "now"
          ],
          "variables": [
            "content"
          ]
        },
        {
          "name": "list_crew_members",
          "parameters": [
            "self"
          ],
          "lines": 15,
          "complexity": 1,
          "calls": [
            "len",
            "items"
          ],
          "variables": []
        }
      ],
      "variables": [
        "crew_member_id",
        "video_url",
        "analysis_focus",
        "scraper",
        "result",
        "results",
        "successful",
        "failed",
        "youtube_patterns",
        "match",
        "content",
        "scraper",
        "crew_list",
        "video_id",
        "request_data",
        "response",
        "result",
        "url",
        "headers",
        "params",
        "response",
        "url",
        "headers",
        "params",
        "response",
        "url",
        "headers",
        "params",
        "response",
        "result"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "requests",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "hashlib",
        "re",
        "re"
      ],
      "classes": [
        "YouTubeScraperCrewIntegration"
      ],
      "total_lines": 351,
      "code_lines": 300,
      "complexity_score": 21,
      "purpose": "General utility script"
    },
    "scripts/python/final_monorepo_cleanup.py": {
      "file_name": "final_monorepo_cleanup.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 28,
          "complexity": 4,
          "calls": [
            "FinalMonorepoCleanup",
            "run_final_cleanup",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "items",
            "print",
            "len",
            "len"
          ],
          "variables": [
            "cleanup",
            "results",
            "by_type",
            "project_type"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "Path"
          ],
          "variables": []
        },
        {
          "name": "create_backup",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "strftime",
            "mkdir",
            "log",
            "str",
            "now"
          ],
          "variables": [
            "timestamp"
          ]
        },
        {
          "name": "log",
          "parameters": [
            "self",
            "message"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "strftime",
            "append",
            "print",
            "now"
          ],
          "variables": [
            "timestamp",
            "log_entry"
          ]
        },
        {
          "name": "safe_remove_file",
          "parameters": [
            "self",
            "file_path",
            "reason"
          ],
          "lines": 14,
          "complexity": 2,
          "calls": [
            "copy2",
            "unlink",
            "append",
            "log",
            "exists",
            "str"
          ],
          "variables": [
            "backup_path"
          ]
        },
        {
          "name": "identify_sub_projects",
          "parameters": [
            "self"
          ],
          "lines": 74,
          "complexity": 14,
          "calls": [
            "walk",
            "any",
            "relpath",
            "items",
            "basename",
            "append",
            "len",
            "len",
            "append",
            "lower",
            "lower",
            "len",
            "round",
            "join",
            "getsize",
            "lower",
            "lower"
          ],
          "variables": [
            "sub_projects",
            "sub_project_indicators",
            "relative_path",
            "project_type",
            "indicators",
            "dir_name",
            "file_count",
            "dir_count",
            "total_size",
            "project_type",
            "project_type",
            "file_path"
          ]
        },
        {
          "name": "categorize_main_folder_files",
          "parameters": [
            "self"
          ],
          "lines": 59,
          "complexity": 18,
          "calls": [
            "listdir",
            "lower",
            "is_dir",
            "startswith",
            "splitext",
            "append",
            "append",
            "splitext",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "any",
            "lower",
            "lower",
            "append",
            "append"
          ],
          "variables": [
            "main_files",
            "file_path",
            "ext",
            "base_name"
          ]
        },
        {
          "name": "identify_excess_files",
          "parameters": [
            "self",
            "categorized_files"
          ],
          "lines": 31,
          "complexity": 6,
          "calls": [
            "extend",
            "extend",
            "extend",
            "extend",
            "values",
            "len",
            "sort",
            "extend",
            "any",
            "lower",
            "append"
          ],
          "variables": [
            "excess_files",
            "analysis_files"
          ]
        },
        {
          "name": "organize_remaining_files",
          "parameters": [
            "self"
          ],
          "lines": 17,
          "complexity": 2,
          "calls": [
            "items",
            "mkdir",
            "log"
          ],
          "variables": [
            "organized_dirs",
            "dir_path"
          ]
        },
        {
          "name": "move_files_to_organized_structure",
          "parameters": [
            "self",
            "categorized_files"
          ],
          "lines": 66,
          "complexity": 22,
          "calls": [
            "exists",
            "exists",
            "exists",
            "exists",
            "exists",
            "exists",
            "exists",
            "move",
            "log",
            "move",
            "log",
            "move",
            "log",
            "move",
            "log",
            "move",
            "log",
            "lower",
            "move",
            "log",
            "lower",
            "move",
            "log",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str"
          ],
          "variables": [
            "workflow_files",
            "template_files",
            "src_path",
            "dst_path",
            "src_path",
            "dst_path",
            "src_path",
            "dst_path",
            "src_path",
            "dst_path",
            "src_path",
            "dst_path",
            "src_path",
            "dst_path",
            "src_path",
            "dst_path"
          ]
        },
        {
          "name": "generate_cleanup_report",
          "parameters": [
            "self"
          ],
          "lines": 92,
          "complexity": 8,
          "calls": [
            "items",
            "items",
            "log",
            "str",
            "append",
            "open",
            "write",
            "len",
            "len",
            "strftime",
            "len",
            "len",
            "strftime",
            "strftime",
            "len",
            "now",
            "join",
            "now",
            "now"
          ],
          "variables": [
            "report_path",
            "report_content",
            "by_type",
            "project_type"
          ]
        },
        {
          "name": "run_final_cleanup",
          "parameters": [
            "self"
          ],
          "lines": 68,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "create_backup",
            "print",
            "identify_sub_projects",
            "print",
            "items",
            "print",
            "categorize_main_folder_files",
            "sum",
            "print",
            "print",
            "identify_excess_files",
            "print",
            "print",
            "print",
            "organize_remaining_files",
            "move_files_to_organized_structure",
            "print",
            "generate_cleanup_report",
            "print",
            "print",
            "print",
            "print",
            "exists",
            "log",
            "print",
            "print",
            "len",
            "safe_remove_file",
            "len",
            "values",
            "len"
          ],
          "variables": [
            "backup_dir",
            "results",
            "categorized_files",
            "total_files",
            "excess_files",
            "report_path",
            "file_path"
          ]
        }
      ],
      "variables": [
        "cleanup",
        "results",
        "by_type",
        "timestamp",
        "timestamp",
        "log_entry",
        "backup_path",
        "sub_projects",
        "sub_project_indicators",
        "main_files",
        "excess_files",
        "analysis_files",
        "organized_dirs",
        "workflow_files",
        "template_files",
        "report_path",
        "report_content",
        "by_type",
        "backup_dir",
        "results",
        "project_type",
        "relative_path",
        "project_type",
        "indicators",
        "dir_name",
        "file_path",
        "ext",
        "base_name",
        "dir_path",
        "project_type",
        "categorized_files",
        "total_files",
        "excess_files",
        "report_path",
        "file_count",
        "dir_count",
        "total_size",
        "src_path",
        "dst_path",
        "src_path",
        "dst_path",
        "src_path",
        "dst_path",
        "src_path",
        "dst_path",
        "src_path",
        "dst_path",
        "src_path",
        "dst_path",
        "src_path",
        "dst_path",
        "file_path",
        "project_type",
        "project_type",
        "file_path"
      ],
      "imports": [
        "os",
        "sys",
        "shutil",
        "json",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Set",
        "re",
        "sys"
      ],
      "classes": [
        "FinalMonorepoCleanup"
      ],
      "total_lines": 505,
      "code_lines": 374,
      "complexity_score": 76,
      "purpose": "General utility script"
    },
    "scripts/python/turborepo_implementation_plan.py": {
      "file_name": "turborepo_implementation_plan.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 25,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "TurborepoImplementationPlan",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "generate_implementation_plan",
            "print",
            "save_implementation_data",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "implementation_plan",
            "plan_file",
            "data_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "_define_implementation_phases",
            "_analyze_current_structure",
            "_create_turborepo_config"
          ],
          "variables": []
        },
        {
          "name": "_analyze_current_structure",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_create_turborepo_config",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_define_implementation_phases",
          "parameters": [
            "self"
          ],
          "lines": 151,
          "complexity": 1,
          "calls": [
            "ImplementationPhase",
            "ImplementationPhase",
            "ImplementationPhase",
            "ImplementationPhase"
          ],
          "variables": []
        },
        {
          "name": "generate_implementation_plan",
          "parameters": [
            "self"
          ],
          "lines": 176,
          "complexity": 12,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "dumps",
            "int",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "split",
            "strftime",
            "len",
            "split",
            "now"
          ],
          "variables": [
            "timestamp",
            "plan_filename",
            "total_weeks",
            "duration",
            "weeks"
          ]
        },
        {
          "name": "save_implementation_data",
          "parameters": [
            "self"
          ],
          "lines": 26,
          "complexity": 1,
          "calls": [
            "strftime",
            "info",
            "isoformat",
            "open",
            "dump",
            "now",
            "now"
          ],
          "variables": [
            "timestamp",
            "data_filename",
            "implementation_data"
          ]
        }
      ],
      "variables": [
        "implementation_plan",
        "plan_file",
        "data_file",
        "timestamp",
        "plan_filename",
        "timestamp",
        "data_filename",
        "implementation_data",
        "total_weeks",
        "duration",
        "weeks"
      ],
      "imports": [
        "json",
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "dataclasses.dataclass"
      ],
      "classes": [
        "ImplementationPhase",
        "TurborepoConfig",
        "TurborepoImplementationPlan"
      ],
      "total_lines": 506,
      "code_lines": 446,
      "complexity_score": 14,
      "purpose": "General utility script"
    },
    "scripts/python/alex_ai_yolo_mode_integration_system.py": {
      "file_name": "alex_ai_yolo_mode_integration_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 41,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "AlexAIYOLOModeIntegrationSystem",
            "run_comprehensive_integration",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "integration",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "create_comprehensive_integration",
          "parameters": [
            "self"
          ],
          "lines": 153,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "integration"
          ]
        },
        {
          "name": "analyze_prompt_comprehensive",
          "parameters": [
            "self",
            "prompt"
          ],
          "lines": 108,
          "complexity": 10,
          "calls": [
            "create_comprehensive_integration",
            "isoformat",
            "search",
            "search",
            "search",
            "append",
            "append",
            "append",
            "now"
          ],
          "variables": [
            "analysis",
            "warning_engine",
            "patterns",
            "high_risk_patterns",
            "medium_risk_patterns",
            "low_risk_patterns"
          ]
        },
        {
          "name": "save_integration_system",
          "parameters": [
            "self",
            "integration"
          ],
          "lines": 7,
          "complexity": 1,
          "calls": [
            "info",
            "open",
            "dump"
          ],
          "variables": []
        },
        {
          "name": "create_integration_report",
          "parameters": [
            "self",
            "integration"
          ],
          "lines": 90,
          "complexity": 9,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "upper",
            "join",
            "title",
            "title",
            "title",
            "now",
            "replace",
            "replace",
            "replace"
          ],
          "variables": [
            "timestamp",
            "report_file"
          ]
        },
        {
          "name": "run_comprehensive_integration",
          "parameters": [
            "self"
          ],
          "lines": 39,
          "complexity": 2,
          "calls": [
            "info",
            "create_comprehensive_integration",
            "save_integration_system",
            "create_integration_report",
            "info",
            "info",
            "analyze_prompt_comprehensive",
            "info",
            "info",
            "info",
            "info",
            "info"
          ],
          "variables": [
            "integration",
            "integration_file",
            "report_file",
            "test_prompts",
            "analysis"
          ]
        }
      ],
      "variables": [
        "integration",
        "result",
        "integration",
        "analysis",
        "warning_engine",
        "patterns",
        "high_risk_patterns",
        "medium_risk_patterns",
        "low_risk_patterns",
        "timestamp",
        "report_file",
        "integration",
        "integration_file",
        "report_file",
        "test_prompts",
        "analysis"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "re"
      ],
      "classes": [
        "AlexAIYOLOModeIntegrationSystem"
      ],
      "total_lines": 475,
      "code_lines": 408,
      "complexity_score": 20,
      "purpose": "General utility script"
    },
    "scripts/python/comprehensive_market_research_system.py": {
      "file_name": "comprehensive_market_research_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 80,
          "complexity": 8,
          "calls": [
            "print",
            "print",
            "print",
            "MarketResearchSystem",
            "print",
            "keys",
            "print",
            "print",
            "print",
            "print",
            "print",
            "generate_market_research_report",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "len",
            "timestamp",
            "title",
            "title",
            "len",
            "len",
            "len",
            "len",
            "now"
          ],
          "variables": [
            "research_system",
            "report",
            "output_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 62,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_research_queries",
          "parameters": [
            "self",
            "market"
          ],
          "lines": 34,
          "complexity": 5,
          "calls": [
            "extend",
            "extend",
            "extend"
          ],
          "variables": [
            "market_data",
            "queries"
          ]
        },
        {
          "name": "simulate_web_research",
          "parameters": [
            "self",
            "queries",
            "market"
          ],
          "lines": 73,
          "complexity": 2,
          "calls": [
            "enumerate",
            "isoformat",
            "len",
            "append",
            "choice",
            "uniform",
            "now",
            "title",
            "randint",
            "randint",
            "split"
          ],
          "variables": [
            "research_results",
            "finding"
          ]
        },
        {
          "name": "analyze_cannabis_market",
          "parameters": [
            "self"
          ],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "simulate_web_research",
            "extend"
          ],
          "variables": [
            "cannabis_queries"
          ]
        },
        {
          "name": "generate_market_research_report",
          "parameters": [
            "self"
          ],
          "lines": 58,
          "complexity": 3,
          "calls": [
            "keys",
            "analyze_cannabis_market",
            "set",
            "values",
            "list",
            "isoformat",
            "list",
            "generate_research_queries",
            "simulate_web_research",
            "update",
            "keys",
            "int",
            "now",
            "timestamp",
            "now"
          ],
          "variables": [
            "report",
            "cannabis_analysis",
            "all_keywords",
            "queries",
            "analysis"
          ]
        }
      ],
      "variables": [
        "research_system",
        "report",
        "output_file",
        "market_data",
        "queries",
        "research_results",
        "cannabis_queries",
        "report",
        "cannabis_analysis",
        "all_keywords",
        "finding",
        "queries",
        "analysis"
      ],
      "imports": [
        "json",
        "datetime",
        "requests",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "time",
        "random"
      ],
      "classes": [
        "MarketResearchSystem"
      ],
      "total_lines": 343,
      "code_lines": 275,
      "complexity_score": 16,
      "purpose": "General utility script"
    },
    "scripts/python/phase2_turborepo_optimization.py": {
      "file_name": "phase2_turborepo_optimization.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 26,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "Phase2TurborepoOptimization",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "execute_phase2",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "optimization_system"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "log_step",
          "parameters": [
            "self",
            "step",
            "status",
            "details"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "append",
            "isoformat",
            "info",
            "error",
            "append",
            "info",
            "now"
          ],
          "variables": [
            "log_entry"
          ]
        },
        {
          "name": "run_command",
          "parameters": [
            "self",
            "command",
            "cwd"
          ],
          "lines": 24,
          "complexity": 5,
          "calls": [
            "run",
            "str"
          ],
          "variables": [
            "result",
            "cwd"
          ]
        },
        {
          "name": "configure_local_caching",
          "parameters": [
            "self"
          ],
          "lines": 65,
          "complexity": 1,
          "calls": [
            "log_step",
            "update",
            "log_step",
            "open",
            "load",
            "open",
            "dump"
          ],
          "variables": [
            "turbo_json_path",
            "turbo_config"
          ]
        },
        {
          "name": "setup_remote_caching",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 1,
          "calls": [
            "log_step",
            "mkdir",
            "log_step",
            "open",
            "dump",
            "open",
            "write"
          ],
          "variables": [
            "turbo_dir",
            "remote_config",
            "config_path",
            "env_example",
            "env_path"
          ]
        },
        {
          "name": "optimize_task_dependencies",
          "parameters": [
            "self"
          ],
          "lines": 57,
          "complexity": 1,
          "calls": [
            "log_step",
            "update",
            "log_step",
            "open",
            "load",
            "open",
            "dump"
          ],
          "variables": [
            "turbo_json_path",
            "turbo_config"
          ]
        },
        {
          "name": "implement_incremental_builds",
          "parameters": [
            "self"
          ],
          "lines": 53,
          "complexity": 1,
          "calls": [
            "log_step",
            "update",
            "update",
            "update",
            "log_step",
            "open",
            "load",
            "open",
            "dump"
          ],
          "variables": [
            "turbo_json_path",
            "turbo_config"
          ]
        },
        {
          "name": "configure_build_outputs",
          "parameters": [
            "self"
          ],
          "lines": 117,
          "complexity": 3,
          "calls": [
            "log_step",
            "exists",
            "log_step",
            "open",
            "read",
            "open",
            "write",
            "open",
            "write"
          ],
          "variables": [
            "gitignore_path",
            "gitignore_entries",
            "existing_content"
          ]
        },
        {
          "name": "setup_performance_monitoring",
          "parameters": [
            "self"
          ],
          "lines": 186,
          "complexity": 2,
          "calls": [
            "log_step",
            "mkdir",
            "chmod",
            "log_step",
            "open",
            "write",
            "open",
            "load",
            "open",
            "dump"
          ],
          "variables": [
            "monitoring_script",
            "monitoring_path",
            "package_json_path",
            "package_json"
          ]
        },
        {
          "name": "optimize_cicd_integration",
          "parameters": [
            "self"
          ],
          "lines": 175,
          "complexity": 1,
          "calls": [
            "log_step",
            "mkdir",
            "chmod",
            "log_step",
            "open",
            "write",
            "open",
            "dump",
            "open",
            "write"
          ],
          "variables": [
            "workflows_dir",
            "ci_workflow",
            "workflow_path",
            "vercel_config",
            "vercel_path",
            "deploy_script",
            "deploy_path"
          ]
        },
        {
          "name": "test_optimizations",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 4,
          "calls": [
            "log_step",
            "run_command",
            "run_command",
            "run_command",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step"
          ],
          "variables": []
        },
        {
          "name": "generate_phase2_report",
          "parameters": [
            "self"
          ],
          "lines": 97,
          "complexity": 5,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "now",
            "len"
          ],
          "variables": [
            "timestamp",
            "report_filename"
          ]
        },
        {
          "name": "execute_phase2",
          "parameters": [
            "self"
          ],
          "lines": 36,
          "complexity": 5,
          "calls": [
            "info",
            "generate_phase2_report",
            "info",
            "len",
            "info",
            "warning",
            "step_function",
            "len",
            "error",
            "log_step",
            "error",
            "len",
            "str"
          ],
          "variables": [
            "steps",
            "report_file",
            "success"
          ]
        }
      ],
      "variables": [
        "optimization_system",
        "log_entry",
        "turbo_json_path",
        "turbo_dir",
        "remote_config",
        "config_path",
        "env_example",
        "env_path",
        "turbo_json_path",
        "turbo_json_path",
        "gitignore_path",
        "gitignore_entries",
        "monitoring_script",
        "monitoring_path",
        "package_json_path",
        "workflows_dir",
        "ci_workflow",
        "workflow_path",
        "vercel_config",
        "vercel_path",
        "deploy_script",
        "deploy_path",
        "timestamp",
        "report_filename",
        "steps",
        "report_file",
        "result",
        "turbo_config",
        "turbo_config",
        "turbo_config",
        "package_json",
        "cwd",
        "existing_content",
        "success"
      ],
      "imports": [
        "os",
        "json",
        "subprocess",
        "logging",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple"
      ],
      "classes": [
        "Phase2TurborepoOptimization"
      ],
      "total_lines": 977,
      "code_lines": 721,
      "complexity_score": 22,
      "purpose": "General utility script"
    },
    "scripts/python/crew_coordination_update_system.py": {
      "file_name": "crew_coordination_update_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "simulate_crew_coordination_update",
          "parameters": [],
          "lines": 224,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "append",
            "print",
            "print",
            "print",
            "print",
            "print",
            "append",
            "print",
            "print",
            "print",
            "print",
            "print",
            "append",
            "print",
            "print",
            "print",
            "print",
            "print",
            "append",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "list",
            "isoformat",
            "print",
            "print",
            "print",
            "print",
            "print",
            "append",
            "len",
            "sum",
            "sum",
            "sum",
            "print",
            "open",
            "dump",
            "open",
            "load",
            "print",
            "keys",
            "print",
            "int",
            "int",
            "now",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "timestamp",
            "timestamp",
            "replace",
            "title",
            "len",
            "len",
            "len",
            "title",
            "len",
            "replace",
            "replace",
            "get",
            "now",
            "now",
            "replace",
            "replace",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "crew_insights",
            "workflow_integrations",
            "global_intelligence",
            "coordination_session",
            "picard_update",
            "riker_update",
            "data_update",
            "geordi_update",
            "remaining_crew",
            "unification_status",
            "framework_updates",
            "session_file",
            "update",
            "analysis_results"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "simulate_crew_coordination_update"
          ],
          "variables": []
        }
      ],
      "variables": [
        "crew_insights",
        "workflow_integrations",
        "global_intelligence",
        "coordination_session",
        "picard_update",
        "riker_update",
        "data_update",
        "geordi_update",
        "remaining_crew",
        "unification_status",
        "framework_updates",
        "session_file",
        "update",
        "analysis_results"
      ],
      "imports": [
        "json",
        "sys",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ],
      "classes": [],
      "total_lines": 243,
      "code_lines": 196,
      "complexity_score": 6,
      "purpose": "General utility script"
    },
    "scripts/python/youtube_crew_memory_integration.py": {
      "file_name": "youtube_crew_memory_integration.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 25,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "YouTubeCrewMemoryIntegration",
            "print",
            "items",
            "print",
            "run_demo_analysis",
            "print",
            "print",
            "print",
            "get",
            "print",
            "print",
            "print",
            "print",
            "exists",
            "get",
            "get"
          ],
          "variables": [
            "integration",
            "result",
            "status"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "resolve",
            "_locate_youtube_scripts",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "_locate_youtube_scripts",
          "parameters": [
            "self"
          ],
          "lines": 18,
          "complexity": 2,
          "calls": [
            "exists"
          ],
          "variables": [
            "scripts",
            "consolidated_dir"
          ]
        },
        {
          "name": "run_youtube_analysis",
          "parameters": [
            "self",
            "channel_url",
            "analysis_type"
          ],
          "lines": 38,
          "complexity": 5,
          "calls": [
            "info",
            "error",
            "run",
            "str",
            "info",
            "_parse_analysis_output",
            "error",
            "error",
            "error",
            "str"
          ],
          "variables": [
            "cmd",
            "result"
          ]
        },
        {
          "name": "_parse_analysis_output",
          "parameters": [
            "self",
            "output"
          ],
          "lines": 36,
          "complexity": 4,
          "calls": [
            "find",
            "loads",
            "_extract_crew_memories",
            "_parse_text_insights",
            "warning",
            "_parse_text_insights",
            "rfind",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "start",
            "end",
            "json_str",
            "analysis_data",
            "crew_memories",
            "crew_memories",
            "crew_memories"
          ]
        },
        {
          "name": "_extract_crew_memories",
          "parameters": [
            "self",
            "analysis_data"
          ],
          "lines": 23,
          "complexity": 3,
          "calls": [
            "append",
            "isoformat",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "now"
          ],
          "variables": [
            "memories",
            "memory"
          ]
        },
        {
          "name": "_parse_text_insights",
          "parameters": [
            "self",
            "output"
          ],
          "lines": 65,
          "complexity": 42,
          "calls": [
            "split",
            "strip",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory",
            "len",
            "append",
            "_create_memory",
            "lower",
            "append",
            "_create_memory"
          ],
          "variables": [
            "memories",
            "lines",
            "current_crew",
            "current_insight",
            "line",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight",
            "current_crew",
            "current_insight"
          ]
        },
        {
          "name": "_create_memory",
          "parameters": [
            "self",
            "crew_member",
            "content"
          ],
          "lines": 14,
          "complexity": 1,
          "calls": [
            "isoformat",
            "strip",
            "now"
          ],
          "variables": []
        },
        {
          "name": "store_crew_memories",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 25,
          "complexity": 2,
          "calls": [
            "info",
            "extend",
            "strftime",
            "info",
            "_store_in_mcp_system",
            "open",
            "dump",
            "error",
            "len",
            "now"
          ],
          "variables": [
            "timestamp",
            "memory_file"
          ]
        },
        {
          "name": "_store_in_mcp_system",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 25,
          "complexity": 5,
          "calls": [
            "exists",
            "warning",
            "run",
            "info",
            "warning",
            "str"
          ],
          "variables": [
            "mcp_script",
            "query",
            "result"
          ]
        },
        {
          "name": "generate_memory_report",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 42,
          "complexity": 5,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "get",
            "append",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "len",
            "len",
            "sum",
            "len",
            "now",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "timestamp",
            "report_file",
            "crew_memories",
            "crew"
          ]
        },
        {
          "name": "run_demo_analysis",
          "parameters": [
            "self"
          ],
          "lines": 26,
          "complexity": 3,
          "calls": [
            "info",
            "run_youtube_analysis",
            "get",
            "get",
            "info",
            "error",
            "store_crew_memories",
            "generate_memory_report",
            "len",
            "get"
          ],
          "variables": [
            "demo_channel",
            "result",
            "memories",
            "report_file"
          ]
        }
      ],
      "variables": [
        "integration",
        "result",
        "scripts",
        "consolidated_dir",
        "memories",
        "memories",
        "lines",
        "current_crew",
        "current_insight",
        "timestamp",
        "report_file",
        "demo_channel",
        "result",
        "status",
        "channel_url",
        "integration",
        "result",
        "cmd",
        "result",
        "line",
        "timestamp",
        "memory_file",
        "mcp_script",
        "crew_memories",
        "memories",
        "memories",
        "report_file",
        "start",
        "end",
        "json_str",
        "analysis_data",
        "crew_memories",
        "crew_memories",
        "crew_memories",
        "memory",
        "current_crew",
        "current_insight",
        "crew",
        "report_file",
        "current_crew",
        "current_insight",
        "query",
        "result",
        "current_crew",
        "current_insight",
        "current_crew",
        "current_insight",
        "current_crew",
        "current_insight",
        "current_crew",
        "current_insight",
        "current_crew",
        "current_insight",
        "current_crew",
        "current_insight",
        "current_crew",
        "current_insight"
      ],
      "imports": [
        "json",
        "logging",
        "subprocess",
        "sys",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "YouTubeCrewMemoryIntegration"
      ],
      "total_lines": 395,
      "code_lines": 306,
      "complexity_score": 70,
      "purpose": "General utility script"
    },
    "scripts/python/test_mcp_system.py": {
      "file_name": "test_mcp_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 120,
          "complexity": 8,
          "calls": [
            "print",
            "print",
            "SimpleMCPMemoryOptimizer",
            "print",
            "print",
            "items",
            "print",
            "optimize_memory_storage",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "generate_optimization_report",
            "strftime",
            "print",
            "print",
            "print",
            "MemoryVector",
            "print",
            "print",
            "open",
            "write",
            "find_similar_memories",
            "print",
            "print",
            "print",
            "now",
            "list",
            "generate_embedding",
            "now",
            "now",
            "len",
            "len",
            "values",
            "print",
            "len",
            "join"
          ],
          "variables": [
            "optimizer",
            "sample_memories",
            "results",
            "report",
            "timestamp",
            "report_file",
            "memory",
            "sample_memory",
            "similar_memories",
            "similar_memory"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_embedding",
          "parameters": [
            "self",
            "text"
          ],
          "lines": 16,
          "complexity": 4,
          "calls": [
            "sha256",
            "digest",
            "range",
            "encode",
            "len",
            "len",
            "append",
            "len",
            "from_bytes",
            "append"
          ],
          "variables": [
            "hash_obj",
            "hash_bytes",
            "embedding",
            "val"
          ]
        },
        {
          "name": "cosine_similarity",
          "parameters": [
            "self",
            "vec1",
            "vec2"
          ],
          "lines": 13,
          "complexity": 4,
          "calls": [
            "sum",
            "len",
            "len",
            "sum",
            "sum",
            "zip"
          ],
          "variables": [
            "dot_product",
            "norm1",
            "norm2"
          ]
        },
        {
          "name": "calculate_importance_score",
          "parameters": [
            "self",
            "memory"
          ],
          "lines": 35,
          "complexity": 1,
          "calls": [
            "max",
            "min",
            "len",
            "min",
            "min",
            "get",
            "min",
            "now",
            "len"
          ],
          "variables": [
            "score",
            "recency_days",
            "recency_factor",
            "access_factor",
            "content_length",
            "length_factor",
            "tag_factor",
            "type_weights",
            "type_factor"
          ]
        },
        {
          "name": "find_similar_memories",
          "parameters": [
            "self",
            "memory",
            "threshold"
          ],
          "lines": 18,
          "complexity": 5,
          "calls": [
            "items",
            "sort",
            "cosine_similarity",
            "append"
          ],
          "variables": [
            "similar_memories",
            "threshold",
            "similarity"
          ]
        },
        {
          "name": "consolidate_similar_memories",
          "parameters": [
            "self",
            "memory_group"
          ],
          "lines": 43,
          "complexity": 5,
          "calls": [
            "max",
            "_consolidate_content",
            "sum",
            "MemoryVector",
            "len",
            "range",
            "len",
            "sum",
            "append",
            "max",
            "min",
            "max",
            "sum",
            "list",
            "set",
            "enumerate"
          ],
          "variables": [
            "base_memory",
            "consolidated_content",
            "weights",
            "total_weight",
            "consolidated_memory",
            "weighted_embedding",
            "weighted_embedding",
            "weighted_sum"
          ]
        },
        {
          "name": "_consolidate_content",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 21,
          "complexity": 5,
          "calls": [
            "items",
            "join",
            "append",
            "len",
            "append",
            "_create_content_summary",
            "append"
          ],
          "variables": [
            "type_groups",
            "consolidated_parts",
            "contents",
            "summary"
          ]
        },
        {
          "name": "_create_content_summary",
          "parameters": [
            "self",
            "contents",
            "mem_type"
          ],
          "lines": 31,
          "complexity": 8,
          "calls": [
            "len",
            "join",
            "enumerate",
            "append",
            "append",
            "join",
            "join",
            "append",
            "append",
            "title",
            "enumerate"
          ],
          "variables": [
            "key_points",
            "implementations",
            "numbered_contents"
          ]
        },
        {
          "name": "optimize_memory_storage",
          "parameters": [
            "self"
          ],
          "lines": 82,
          "complexity": 18,
          "calls": [
            "values",
            "set",
            "set",
            "items",
            "items",
            "values",
            "items",
            "update",
            "len",
            "len",
            "isoformat",
            "calculate_importance_score",
            "find_similar_memories",
            "append",
            "len",
            "append",
            "add",
            "len",
            "sorted",
            "now",
            "len",
            "consolidate_similar_memories",
            "update",
            "add",
            "update",
            "add",
            "add",
            "len"
          ],
          "variables": [
            "optimization_results",
            "consolidated_memories",
            "memories_to_remove",
            "processed_memories",
            "project_counts",
            "final_count",
            "similar_memories",
            "similar_mem_ids",
            "group_memories",
            "sorted_memories",
            "excess_memories",
            "consolidated"
          ]
        },
        {
          "name": "generate_optimization_report",
          "parameters": [
            "self",
            "results"
          ],
          "lines": 47,
          "complexity": 7,
          "calls": [
            "values",
            "items",
            "values",
            "items",
            "values",
            "items",
            "len",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "report",
            "project_distribution",
            "crew_distribution",
            "type_distribution"
          ]
        }
      ],
      "variables": [
        "optimizer",
        "sample_memories",
        "results",
        "report",
        "timestamp",
        "report_file",
        "hash_obj",
        "hash_bytes",
        "embedding",
        "dot_product",
        "norm1",
        "norm2",
        "score",
        "recency_days",
        "recency_factor",
        "access_factor",
        "content_length",
        "length_factor",
        "tag_factor",
        "type_weights",
        "type_factor",
        "similar_memories",
        "base_memory",
        "consolidated_content",
        "weights",
        "total_weight",
        "consolidated_memory",
        "type_groups",
        "consolidated_parts",
        "optimization_results",
        "consolidated_memories",
        "memories_to_remove",
        "processed_memories",
        "project_counts",
        "final_count",
        "report",
        "project_distribution",
        "crew_distribution",
        "type_distribution",
        "memory",
        "sample_memory",
        "similar_memories",
        "threshold",
        "similarity",
        "weighted_embedding",
        "weighted_embedding",
        "key_points",
        "similar_memories",
        "similar_mem_ids",
        "val",
        "weighted_sum",
        "contents",
        "summary",
        "implementations",
        "numbered_contents",
        "group_memories",
        "sorted_memories",
        "excess_memories",
        "similar_memory",
        "consolidated"
      ],
      "imports": [
        "os",
        "json",
        "hashlib",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "dataclasses.dataclass",
        "dataclasses.asdict"
      ],
      "classes": [
        "MemoryVector",
        "SimpleMCPMemoryOptimizer"
      ],
      "total_lines": 480,
      "code_lines": 354,
      "complexity_score": 62,
      "purpose": "Testing and validation"
    },
    "scripts/python/enhanced_ai_prompts_system.py": {
      "file_name": "enhanced_ai_prompts_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 64,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "print",
            "EnhancedAIPromptsSystem",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "keys",
            "print",
            "print",
            "create_integration_guide",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "items",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "timestamp",
            "now"
          ],
          "variables": [
            "prompts_system",
            "integration_guide",
            "output_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 28,
          "complexity": 1,
          "calls": [
            "_get_supabase_integration_prompt",
            "_get_n8n_workflow_prompt",
            "_get_claude_analysis_prompt",
            "_get_system_integration_prompt",
            "_get_market_research_prompt",
            "_get_business_validation_prompt"
          ],
          "variables": []
        },
        {
          "name": "_get_supabase_integration_prompt",
          "parameters": [
            "self"
          ],
          "lines": 25,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_get_n8n_workflow_prompt",
          "parameters": [
            "self"
          ],
          "lines": 34,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_get_claude_analysis_prompt",
          "parameters": [
            "self"
          ],
          "lines": 44,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_get_system_integration_prompt",
          "parameters": [
            "self"
          ],
          "lines": 54,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_get_market_research_prompt",
          "parameters": [
            "self"
          ],
          "lines": 46,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_get_business_validation_prompt",
          "parameters": [
            "self"
          ],
          "lines": 44,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_enhanced_prompt",
          "parameters": [
            "self",
            "prompt_type",
            "context"
          ],
          "lines": 18,
          "complexity": 3,
          "calls": [
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "base_prompt",
            "context",
            "context_section",
            "base_prompt"
          ]
        },
        {
          "name": "create_integration_guide",
          "parameters": [
            "self"
          ],
          "lines": 31,
          "complexity": 1,
          "calls": [
            "isoformat",
            "int",
            "now",
            "timestamp",
            "now"
          ],
          "variables": []
        }
      ],
      "variables": [
        "prompts_system",
        "integration_guide",
        "output_file",
        "base_prompt",
        "context",
        "context_section",
        "base_prompt"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "EnhancedAIPromptsSystem"
      ],
      "total_lines": 412,
      "code_lines": 267,
      "complexity_score": 7,
      "purpose": "General utility script"
    },
    "scripts/python/alex_ai_credential_manager.py": {
      "file_name": "alex_ai_credential_manager.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "AlexAICredentialManager",
            "run_comprehensive_setup"
          ],
          "variables": [
            "manager",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 12,
          "complexity": 1,
          "calls": [
            "home",
            "home"
          ],
          "variables": []
        },
        {
          "name": "create_secure_directory",
          "parameters": [
            "self"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "mkdir",
            "print"
          ],
          "variables": []
        },
        {
          "name": "load_from_zshrc",
          "parameters": [
            "self"
          ],
          "lines": 31,
          "complexity": 8,
          "calls": [
            "print",
            "home",
            "exists",
            "print",
            "open",
            "readlines",
            "strip",
            "print",
            "startswith",
            "split",
            "len",
            "strip",
            "strip",
            "print",
            "strip",
            "strip"
          ],
          "variables": [
            "credentials",
            "zshrc_path",
            "lines",
            "line",
            "parts",
            "key",
            "value"
          ]
        },
        {
          "name": "load_from_environment",
          "parameters": [
            "self"
          ],
          "lines": 14,
          "complexity": 3,
          "calls": [
            "print",
            "getenv",
            "print",
            "print"
          ],
          "variables": [
            "credentials",
            "value"
          ]
        },
        {
          "name": "encrypt_credentials",
          "parameters": [
            "self",
            "credentials"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "dumps",
            "decode",
            "b64encode",
            "encode"
          ],
          "variables": [
            "json_str",
            "encoded"
          ]
        },
        {
          "name": "decrypt_credentials",
          "parameters": [
            "self",
            "encrypted_data"
          ],
          "lines": 8,
          "complexity": 2,
          "calls": [
            "decode",
            "loads",
            "print",
            "b64decode",
            "encode"
          ],
          "variables": [
            "decoded"
          ]
        },
        {
          "name": "save_credentials_securely",
          "parameters": [
            "self",
            "credentials"
          ],
          "lines": 28,
          "complexity": 3,
          "calls": [
            "create_secure_directory",
            "exists",
            "encrypt_credentials",
            "chmod",
            "print",
            "print",
            "open",
            "write",
            "print",
            "open",
            "read",
            "open",
            "write"
          ],
          "variables": [
            "encrypted",
            "backup_data"
          ]
        },
        {
          "name": "load_credentials_securely",
          "parameters": [
            "self"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "decrypt_credentials",
            "print",
            "exists",
            "print",
            "open",
            "read",
            "print",
            "len"
          ],
          "variables": [
            "credentials",
            "encrypted_data"
          ]
        },
        {
          "name": "validate_credentials",
          "parameters": [
            "self",
            "credentials"
          ],
          "lines": 32,
          "complexity": 10,
          "calls": [
            "print",
            "print",
            "print",
            "append",
            "append",
            "append",
            "len",
            "startswith",
            "append",
            "strip",
            "len"
          ],
          "variables": [
            "valid",
            "issues",
            "value",
            "valid",
            "valid",
            "valid",
            "valid"
          ]
        },
        {
          "name": "test_credential_access",
          "parameters": [
            "self",
            "credentials"
          ],
          "lines": 39,
          "complexity": 9,
          "calls": [
            "print",
            "print",
            "get",
            "print",
            "get",
            "print",
            "startswith",
            "print",
            "print",
            "len"
          ],
          "variables": [
            "results",
            "key",
            "url",
            "headers",
            "response",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "create_crew_memory",
          "parameters": [
            "self",
            "credentials"
          ],
          "lines": 41,
          "complexity": 6,
          "calls": [
            "get",
            "get",
            "post",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "supabase_url",
            "supabase_key",
            "memory_data",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "setup_environment_variables",
          "parameters": [
            "self",
            "credentials"
          ],
          "lines": 9,
          "complexity": 2,
          "calls": [
            "print",
            "items",
            "print"
          ],
          "variables": []
        },
        {
          "name": "generate_credential_report",
          "parameters": [
            "self",
            "credentials",
            "test_results"
          ],
          "lines": 15,
          "complexity": 1,
          "calls": [
            "isoformat",
            "len",
            "len",
            "all",
            "any",
            "exists",
            "any",
            "now",
            "values",
            "values",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "run_comprehensive_setup",
          "parameters": [
            "self"
          ],
          "lines": 62,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "load_from_zshrc",
            "load_from_environment",
            "print",
            "validate_credentials",
            "print",
            "test_credential_access",
            "print",
            "save_credentials_securely",
            "print",
            "setup_environment_variables",
            "print",
            "create_crew_memory",
            "print",
            "generate_credential_report",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "sum",
            "len",
            "values",
            "len"
          ],
          "variables": [
            "zshrc_creds",
            "env_creds",
            "all_credentials",
            "test_results",
            "save_success",
            "report",
            "status"
          ]
        }
      ],
      "variables": [
        "manager",
        "results",
        "credentials",
        "credentials",
        "json_str",
        "encoded",
        "valid",
        "issues",
        "results",
        "zshrc_creds",
        "env_creds",
        "all_credentials",
        "test_results",
        "save_success",
        "report",
        "zshrc_path",
        "value",
        "decoded",
        "encrypted",
        "credentials",
        "value",
        "key",
        "supabase_url",
        "supabase_key",
        "memory_data",
        "url",
        "headers",
        "response",
        "status",
        "lines",
        "line",
        "encrypted_data",
        "valid",
        "valid",
        "valid",
        "url",
        "headers",
        "response",
        "url",
        "headers",
        "response",
        "parts",
        "backup_data",
        "valid",
        "key",
        "value"
      ],
      "imports": [
        "os",
        "json",
        "subprocess",
        "requests",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "pathlib.Path",
        "base64",
        "hashlib"
      ],
      "classes": [
        "AlexAICredentialManager"
      ],
      "total_lines": 360,
      "code_lines": 273,
      "complexity_score": 42,
      "purpose": "General utility script"
    },
    "scripts/python/enhanced_prompts_test_suite.py": {
      "file_name": "enhanced_prompts_test_suite.py",
      "file_type": "py",
      "functions": [
        {
          "name": "setUp",
          "parameters": [
            "self"
          ],
          "lines": 2,
          "complexity": 1,
          "calls": [
            "EnhancedAIPromptsSystem"
          ],
          "variables": []
        },
        {
          "name": "test_prompt_generation",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 2,
          "calls": [
            "subTest",
            "generate_enhanced_prompt",
            "assertIsInstance",
            "assertGreater",
            "len"
          ],
          "variables": [
            "prompt_types",
            "prompt"
          ]
        },
        {
          "name": "test_integration_guide_creation",
          "parameters": [
            "self"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "create_integration_guide",
            "assertIsInstance",
            "assertIn",
            "assertIn"
          ],
          "variables": [
            "guide"
          ]
        },
        {
          "name": "test_performance",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "time",
            "generate_enhanced_prompt",
            "time",
            "assertLess"
          ],
          "variables": [
            "start_time",
            "prompt",
            "end_time",
            "generation_time"
          ]
        }
      ],
      "variables": [
        "prompt_types",
        "guide",
        "start_time",
        "prompt",
        "end_time",
        "generation_time",
        "prompt"
      ],
      "imports": [
        "unittest",
        "time",
        "enhanced_ai_prompts_system.EnhancedAIPromptsSystem"
      ],
      "classes": [
        "TestEnhancedPrompts"
      ],
      "total_lines": 50,
      "code_lines": 40,
      "complexity_score": 2,
      "purpose": "Testing and validation"
    },
    "scripts/python/alex_ai_yolo_initialization.py": {
      "file_name": "alex_ai_yolo_initialization.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 27,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "AlexAIYOLOInitialization",
            "run_complete_initialization",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "initialization",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "initialize_yolo_mode",
          "parameters": [
            "self"
          ],
          "lines": 47,
          "complexity": 2,
          "calls": [
            "info",
            "append",
            "info",
            "append",
            "_store_yolo_initialization_memory",
            "info",
            "error",
            "append",
            "isoformat",
            "isoformat",
            "isoformat",
            "str",
            "now",
            "now",
            "now"
          ],
          "variables": [
            "yolo_command"
          ]
        },
        {
          "name": "_store_yolo_initialization_memory",
          "parameters": [
            "self"
          ],
          "lines": 33,
          "complexity": 1,
          "calls": [
            "strftime",
            "info",
            "_store_in_mcp_system",
            "isoformat",
            "open",
            "dump",
            "now",
            "now"
          ],
          "variables": [
            "memory_entry",
            "timestamp",
            "memory_file"
          ]
        },
        {
          "name": "_store_in_mcp_system",
          "parameters": [
            "self",
            "memory_entry"
          ],
          "lines": 23,
          "complexity": 4,
          "calls": [
            "exists",
            "run",
            "warning",
            "info",
            "warning",
            "str"
          ],
          "variables": [
            "mcp_script",
            "query",
            "result"
          ]
        },
        {
          "name": "create_yolo_prompt_template",
          "parameters": [
            "self"
          ],
          "lines": 59,
          "complexity": 1,
          "calls": [
            "strip",
            "format",
            "strftime",
            "now"
          ],
          "variables": [
            "template"
          ]
        },
        {
          "name": "update_alex_ai_system_config",
          "parameters": [
            "self"
          ],
          "lines": 47,
          "complexity": 3,
          "calls": [
            "mkdir",
            "exists",
            "info",
            "isoformat",
            "open",
            "dump",
            "error",
            "open",
            "load",
            "now"
          ],
          "variables": [
            "config_file",
            "config",
            "config"
          ]
        },
        {
          "name": "create_yolo_initialization_script",
          "parameters": [
            "self"
          ],
          "lines": 39,
          "complexity": 1,
          "calls": [
            "mkdir",
            "chmod",
            "info",
            "str",
            "open",
            "write"
          ],
          "variables": [
            "script_content",
            "script_file"
          ]
        },
        {
          "name": "generate_initialization_report",
          "parameters": [
            "self"
          ],
          "lines": 53,
          "complexity": 3,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "strftime",
            "now"
          ],
          "variables": [
            "timestamp",
            "report_file"
          ]
        },
        {
          "name": "run_complete_initialization",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 1,
          "calls": [
            "info",
            "initialize_yolo_mode",
            "update_alex_ai_system_config",
            "create_yolo_initialization_script",
            "bool",
            "generate_initialization_report",
            "bool",
            "all",
            "info",
            "values"
          ],
          "variables": [
            "results",
            "script_file",
            "report_file",
            "overall_success"
          ]
        }
      ],
      "variables": [
        "initialization",
        "result",
        "memory_entry",
        "timestamp",
        "memory_file",
        "template",
        "script_content",
        "script_file",
        "timestamp",
        "report_file",
        "results",
        "script_file",
        "report_file",
        "overall_success",
        "yolo_command",
        "mcp_script",
        "config_file",
        "query",
        "result",
        "config",
        "config"
      ],
      "imports": [
        "json",
        "logging",
        "subprocess",
        "sys",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "AlexAIYOLOInitialization"
      ],
      "total_lines": 410,
      "code_lines": 284,
      "complexity_score": 10,
      "purpose": "General utility script"
    },
    "scripts/python/alex_ai_memory_sharing_assessment.py": {
      "file_name": "alex_ai_memory_sharing_assessment.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 21,
          "complexity": 2,
          "calls": [
            "AlexAIMemorySharingAssessment",
            "run_comprehensive_assessment",
            "print_assessment_report",
            "strftime",
            "print",
            "print",
            "open",
            "dump",
            "now",
            "get"
          ],
          "variables": [
            "assessor",
            "assessment",
            "timestamp",
            "filename"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 1,
          "calls": [
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "test_supabase_connection",
          "parameters": [
            "self"
          ],
          "lines": 20,
          "complexity": 3,
          "calls": [
            "print",
            "get",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "get_all_crew_memories",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 3,
          "calls": [
            "print",
            "get",
            "json",
            "print",
            "print",
            "print",
            "len"
          ],
          "variables": [
            "url",
            "headers",
            "response",
            "memories"
          ]
        },
        {
          "name": "analyze_crew_memory_distribution",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 43,
          "complexity": 8,
          "calls": [
            "print",
            "sorted",
            "len",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "append",
            "append",
            "get",
            "lower",
            "get",
            "len"
          ],
          "variables": [
            "analysis",
            "sorted_memories",
            "crew",
            "mem_type",
            "content",
            "crew"
          ]
        },
        {
          "name": "test_memory_consistency",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 42,
          "complexity": 10,
          "calls": [
            "print",
            "len",
            "len",
            "max",
            "get",
            "lower",
            "append",
            "append",
            "get",
            "lower",
            "append",
            "get"
          ],
          "variables": [
            "consistency_test",
            "system_memories",
            "total_memories",
            "conflicts",
            "crew",
            "content",
            "other_content"
          ]
        },
        {
          "name": "create_test_memory_for_crew",
          "parameters": [
            "self",
            "crew_member"
          ],
          "lines": 31,
          "complexity": 3,
          "calls": [
            "print",
            "post",
            "print",
            "print",
            "print",
            "int",
            "isoformat",
            "time",
            "now"
          ],
          "variables": [
            "test_memory",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "verify_memory_sharing",
          "parameters": [
            "self",
            "test_crew"
          ],
          "lines": 31,
          "complexity": 4,
          "calls": [
            "print",
            "get",
            "json",
            "print",
            "print",
            "print",
            "print",
            "get"
          ],
          "variables": [
            "url",
            "params",
            "headers",
            "response",
            "memories",
            "test_memories"
          ]
        },
        {
          "name": "run_comprehensive_assessment",
          "parameters": [
            "self"
          ],
          "lines": 45,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "get_all_crew_memories",
            "analyze_crew_memory_distribution",
            "test_memory_consistency",
            "create_test_memory_for_crew",
            "test_supabase_connection",
            "verify_memory_sharing",
            "isoformat",
            "len",
            "_generate_overall_assessment",
            "now"
          ],
          "variables": [
            "memories",
            "distribution",
            "consistency",
            "test_crew",
            "test_created",
            "test_verified",
            "assessment"
          ]
        },
        {
          "name": "_generate_overall_assessment",
          "parameters": [
            "self",
            "distribution",
            "consistency",
            "test_created",
            "test_verified"
          ],
          "lines": 15,
          "complexity": 13,
          "calls": [
            "len",
            "len"
          ],
          "variables": [
            "total_memories",
            "crew_count",
            "consistency_score",
            "gaps"
          ]
        },
        {
          "name": "print_assessment_report",
          "parameters": [
            "self",
            "assessment"
          ],
          "lines": 34,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "sorted",
            "print",
            "sorted",
            "print",
            "print",
            "print",
            "enumerate",
            "items",
            "print",
            "items",
            "print",
            "print",
            "get",
            "get",
            "print",
            "print",
            "get",
            "len",
            "len",
            "get",
            "get"
          ],
          "variables": [
            "crew",
            "mem_type",
            "content"
          ]
        }
      ],
      "variables": [
        "assessor",
        "assessment",
        "analysis",
        "sorted_memories",
        "consistency_test",
        "system_memories",
        "total_memories",
        "conflicts",
        "test_memory",
        "memories",
        "distribution",
        "consistency",
        "test_crew",
        "test_created",
        "test_verified",
        "assessment",
        "total_memories",
        "crew_count",
        "consistency_score",
        "gaps",
        "timestamp",
        "filename",
        "url",
        "headers",
        "response",
        "url",
        "headers",
        "response",
        "crew",
        "mem_type",
        "content",
        "crew",
        "content",
        "url",
        "headers",
        "response",
        "url",
        "params",
        "headers",
        "response",
        "crew",
        "mem_type",
        "content",
        "memories",
        "crew",
        "memories",
        "test_memories",
        "other_content"
      ],
      "imports": [
        "os",
        "requests",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "time"
      ],
      "classes": [
        "AlexAIMemorySharingAssessment"
      ],
      "total_lines": 347,
      "code_lines": 275,
      "complexity_score": 48,
      "purpose": "General utility script"
    },
    "scripts/python/alex_ai_crew_mermaid_models.py": {
      "file_name": "alex_ai_crew_mermaid_models.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 42,
          "complexity": 1,
          "calls": [
            "AlexAICrewMermaidModels",
            "run_comprehensive_analysis",
            "print",
            "print",
            "open",
            "dump",
            "len"
          ],
          "variables": [
            "sample_company_data",
            "alex_ai_crew",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "analyze_company_structure",
          "parameters": [
            "self",
            "company_name",
            "company_data"
          ],
          "lines": 33,
          "complexity": 1,
          "calls": [
            "_technical_lead_analysis",
            "_ai_strategy_analysis",
            "_client_success_analysis",
            "_sustainability_analysis",
            "_org_structure_analysis",
            "isoformat",
            "_generate_consensus_recommendations",
            "now"
          ],
          "variables": [
            "technical_analysis",
            "ai_strategy_analysis",
            "client_success_analysis",
            "sustainability_analysis",
            "org_structure_analysis"
          ]
        },
        {
          "name": "_technical_lead_analysis",
          "parameters": [
            "self",
            "company_name",
            "company_data"
          ],
          "lines": 23,
          "complexity": 3,
          "calls": [
            "get",
            "get",
            "_identify_technical_contacts",
            "append",
            "append",
            "_get_technical_approach"
          ],
          "variables": [
            "alex_ai_score",
            "priority",
            "technical_opportunities",
            "technical_contacts"
          ]
        },
        {
          "name": "_ai_strategy_analysis",
          "parameters": [
            "self",
            "company_name",
            "company_data"
          ],
          "lines": 24,
          "complexity": 3,
          "calls": [
            "get",
            "_identify_ai_strategy_contacts",
            "append",
            "_get_alex_ai_leverage_points",
            "append",
            "append"
          ],
          "variables": [
            "alex_ai_score",
            "ai_opportunities",
            "ai_contacts"
          ]
        },
        {
          "name": "_client_success_analysis",
          "parameters": [
            "self",
            "company_name",
            "company_data"
          ],
          "lines": 20,
          "complexity": 4,
          "calls": [
            "_identify_client_success_contacts",
            "append",
            "get",
            "append",
            "_get_relationship_strategy",
            "lower",
            "lower"
          ],
          "variables": [
            "client_opportunities",
            "client_contacts"
          ]
        },
        {
          "name": "_sustainability_analysis",
          "parameters": [
            "self",
            "company_name",
            "company_data"
          ],
          "lines": 20,
          "complexity": 4,
          "calls": [
            "_identify_sustainability_contacts",
            "append",
            "lower",
            "append",
            "_get_environmental_alignment",
            "lower",
            "lower"
          ],
          "variables": [
            "sustainability_opportunities",
            "sustainability_contacts"
          ]
        },
        {
          "name": "_org_structure_analysis",
          "parameters": [
            "self",
            "company_name",
            "company_data"
          ],
          "lines": 19,
          "complexity": 1,
          "calls": [
            "_assess_org_complexity",
            "_identify_decision_makers",
            "_analyze_reporting_structure"
          ],
          "variables": [
            "org_complexity",
            "decision_makers",
            "reporting_structure"
          ]
        },
        {
          "name": "_identify_technical_contacts",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "get",
            "lower",
            "any",
            "get",
            "append",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "contacts",
            "leadership",
            "title"
          ]
        },
        {
          "name": "_identify_ai_strategy_contacts",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "get",
            "lower",
            "any",
            "get",
            "append",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "contacts",
            "leadership",
            "title"
          ]
        },
        {
          "name": "_identify_client_success_contacts",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "get",
            "lower",
            "any",
            "get",
            "append",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "contacts",
            "leadership",
            "title"
          ]
        },
        {
          "name": "_identify_sustainability_contacts",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "get",
            "lower",
            "any",
            "get",
            "append",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "contacts",
            "leadership",
            "title"
          ]
        },
        {
          "name": "_identify_decision_makers",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "get",
            "lower",
            "any",
            "get",
            "append",
            "get",
            "get",
            "get",
            "any"
          ],
          "variables": [
            "decision_makers",
            "leadership",
            "title"
          ]
        },
        {
          "name": "_assess_org_complexity",
          "parameters": [
            "self",
            "company_name"
          ],
          "lines": 8,
          "complexity": 3,
          "calls": [],
          "variables": []
        },
        {
          "name": "_analyze_reporting_structure",
          "parameters": [
            "self",
            "company_name"
          ],
          "lines": 20,
          "complexity": 3,
          "calls": [],
          "variables": []
        },
        {
          "name": "_get_technical_approach",
          "parameters": [
            "self",
            "company_name",
            "alex_ai_score"
          ],
          "lines": 8,
          "complexity": 3,
          "calls": [],
          "variables": []
        },
        {
          "name": "_get_alex_ai_leverage_points",
          "parameters": [
            "self",
            "company_name"
          ],
          "lines": 30,
          "complexity": 5,
          "calls": [
            "lower",
            "extend",
            "lower",
            "extend",
            "lower",
            "extend",
            "lower",
            "extend"
          ],
          "variables": [
            "leverage_points"
          ]
        },
        {
          "name": "_get_relationship_strategy",
          "parameters": [
            "self",
            "company_name"
          ],
          "lines": 8,
          "complexity": 3,
          "calls": [
            "lower",
            "lower"
          ],
          "variables": []
        },
        {
          "name": "_get_environmental_alignment",
          "parameters": [
            "self",
            "company_name"
          ],
          "lines": 8,
          "complexity": 3,
          "calls": [
            "lower",
            "lower"
          ],
          "variables": []
        },
        {
          "name": "_generate_consensus_recommendations",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "_calculate_priority_score",
            "_consolidate_key_contacts",
            "_consolidate_application_strategy",
            "_determine_mermaid_focus"
          ],
          "variables": []
        },
        {
          "name": "_calculate_priority_score",
          "parameters": [
            "self"
          ],
          "lines": 10,
          "complexity": 4,
          "calls": [
            "append",
            "sum",
            "len",
            "append"
          ],
          "variables": [
            "scores"
          ]
        },
        {
          "name": "_consolidate_key_contacts",
          "parameters": [
            "self"
          ],
          "lines": 18,
          "complexity": 7,
          "calls": [
            "set",
            "get",
            "append",
            "add",
            "extend"
          ],
          "variables": [
            "all_contacts",
            "unique_contacts",
            "seen_names",
            "name"
          ]
        },
        {
          "name": "_consolidate_application_strategy",
          "parameters": [
            "self"
          ],
          "lines": 10,
          "complexity": 4,
          "calls": [
            "join",
            "append",
            "append"
          ],
          "variables": [
            "strategies"
          ]
        },
        {
          "name": "_determine_mermaid_focus",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 3,
          "calls": [
            "join",
            "append"
          ],
          "variables": [
            "focuses"
          ]
        },
        {
          "name": "generate_comprehensive_mermaid_model",
          "parameters": [
            "self",
            "company_name",
            "analysis"
          ],
          "lines": 14,
          "complexity": 3,
          "calls": [
            "_generate_high_priority_mermaid",
            "_generate_medium_priority_mermaid",
            "_generate_standard_mermaid"
          ],
          "variables": [
            "consensus",
            "priority_score"
          ]
        },
        {
          "name": "_generate_high_priority_mermaid",
          "parameters": [
            "self",
            "company_name",
            "analysis"
          ],
          "lines": 21,
          "complexity": 1,
          "calls": [],
          "variables": [
            "mermaid_code"
          ]
        },
        {
          "name": "_generate_medium_priority_mermaid",
          "parameters": [
            "self",
            "company_name",
            "analysis"
          ],
          "lines": 13,
          "complexity": 1,
          "calls": [],
          "variables": [
            "mermaid_code"
          ]
        },
        {
          "name": "_generate_standard_mermaid",
          "parameters": [
            "self",
            "company_name",
            "analysis"
          ],
          "lines": 15,
          "complexity": 1,
          "calls": [],
          "variables": [
            "mermaid_code"
          ]
        },
        {
          "name": "run_comprehensive_analysis",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 17,
          "complexity": 2,
          "calls": [
            "items",
            "print",
            "analyze_company_structure",
            "generate_comprehensive_mermaid_model"
          ],
          "variables": [
            "results",
            "analysis",
            "mermaid_model"
          ]
        }
      ],
      "variables": [
        "sample_company_data",
        "alex_ai_crew",
        "results",
        "technical_analysis",
        "ai_strategy_analysis",
        "client_success_analysis",
        "sustainability_analysis",
        "org_structure_analysis",
        "alex_ai_score",
        "priority",
        "technical_opportunities",
        "technical_contacts",
        "alex_ai_score",
        "ai_opportunities",
        "ai_contacts",
        "client_opportunities",
        "client_contacts",
        "sustainability_opportunities",
        "sustainability_contacts",
        "org_complexity",
        "decision_makers",
        "reporting_structure",
        "contacts",
        "leadership",
        "contacts",
        "leadership",
        "contacts",
        "leadership",
        "contacts",
        "leadership",
        "decision_makers",
        "leadership",
        "leverage_points",
        "scores",
        "all_contacts",
        "unique_contacts",
        "seen_names",
        "strategies",
        "focuses",
        "consensus",
        "priority_score",
        "mermaid_code",
        "mermaid_code",
        "mermaid_code",
        "results",
        "title",
        "title",
        "title",
        "title",
        "title",
        "name",
        "analysis",
        "mermaid_model"
      ],
      "imports": [
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "re"
      ],
      "classes": [
        "AlexAICrewMermaidModels"
      ],
      "total_lines": 542,
      "code_lines": 418,
      "complexity_score": 52,
      "purpose": "General utility script"
    },
    "scripts/python/alex_ai_webhook_server.py": {
      "file_name": "alex_ai_webhook_server.py",
      "file_type": "py",
      "functions": [
        {
          "name": "resume_analysis",
          "parameters": [],
          "lines": 37,
          "complexity": 3,
          "calls": [
            "route",
            "get",
            "jsonify",
            "jsonify",
            "jsonify",
            "str"
          ],
          "variables": [
            "resume_file",
            "analysis_type",
            "analysis_result"
          ]
        },
        {
          "name": "job_matching",
          "parameters": [],
          "lines": 53,
          "complexity": 11,
          "calls": [
            "route",
            "get_json",
            "get",
            "get",
            "get",
            "get",
            "get",
            "sort",
            "jsonify",
            "get",
            "len",
            "get",
            "append",
            "jsonify",
            "get",
            "get",
            "get",
            "get",
            "str",
            "get",
            "get"
          ],
          "variables": [
            "data",
            "resume_analysis",
            "match_criteria",
            "job_opportunities",
            "min_score",
            "location_pref",
            "work_life_balance",
            "matched_jobs",
            "result",
            "score",
            "location_match",
            "location_match",
            "location_match",
            "location_match"
          ]
        },
        {
          "name": "cover_letter_generation",
          "parameters": [],
          "lines": 46,
          "complexity": 2,
          "calls": [
            "route",
            "get_json",
            "get",
            "get",
            "get",
            "jsonify",
            "get",
            "get",
            "get",
            "get",
            "get",
            "jsonify",
            "get",
            "str"
          ],
          "variables": [
            "data",
            "job_opportunity",
            "resume_analysis",
            "custom_instructions",
            "cover_letter",
            "result"
          ]
        },
        {
          "name": "resume_tailoring",
          "parameters": [],
          "lines": 31,
          "complexity": 3,
          "calls": [
            "route",
            "loads",
            "loads",
            "jsonify",
            "get",
            "get",
            "jsonify",
            "jsonify",
            "get",
            "get",
            "get",
            "str"
          ],
          "variables": [
            "resume_file",
            "job_opportunity",
            "resume_analysis",
            "result"
          ]
        },
        {
          "name": "job_tracking",
          "parameters": [],
          "lines": 24,
          "complexity": 2,
          "calls": [
            "route",
            "get_json",
            "get",
            "get",
            "get",
            "jsonify",
            "jsonify",
            "int",
            "timestamp",
            "str",
            "now"
          ],
          "variables": [
            "data",
            "application_id",
            "event_type",
            "event_data",
            "result"
          ]
        },
        {
          "name": "health_check",
          "parameters": [],
          "lines": 7,
          "complexity": 1,
          "calls": [
            "route",
            "jsonify",
            "isoformat",
            "now"
          ],
          "variables": []
        }
      ],
      "variables": [
        "app",
        "alex_ai_system",
        "resume_file",
        "analysis_type",
        "analysis_result",
        "data",
        "resume_analysis",
        "match_criteria",
        "job_opportunities",
        "min_score",
        "location_pref",
        "work_life_balance",
        "matched_jobs",
        "result",
        "data",
        "job_opportunity",
        "resume_analysis",
        "custom_instructions",
        "cover_letter",
        "result",
        "resume_file",
        "job_opportunity",
        "resume_analysis",
        "result",
        "data",
        "application_id",
        "event_type",
        "event_data",
        "result",
        "score",
        "location_match",
        "location_match",
        "location_match",
        "location_match"
      ],
      "imports": [
        "flask.Flask",
        "flask.request",
        "flask.jsonify",
        "flask_cors.CORS",
        "json",
        "os",
        "datetime.datetime",
        "alex_ai_job_search_system.AlexAIJobSearchSystem"
      ],
      "classes": [],
      "total_lines": 241,
      "code_lines": 191,
      "complexity_score": 17,
      "purpose": "General utility script"
    },
    "scripts/python/enhanced_unified_router.py": {
      "file_name": "enhanced_unified_router.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "loads",
            "EnhancedUnifiedRouter",
            "route_request",
            "print",
            "read",
            "dumps",
            "print",
            "exit",
            "str",
            "dumps"
          ],
          "variables": [
            "input_data",
            "router",
            "result",
            "error_result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 32,
          "complexity": 2,
          "calls": [
            "getenv",
            "getenv",
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "route_request",
          "parameters": [
            "self",
            "input_data"
          ],
          "lines": 42,
          "complexity": 3,
          "calls": [
            "get",
            "get",
            "get",
            "get",
            "_make_routing_decision",
            "_execute_claude_request",
            "_execute_openrouter_request",
            "get",
            "get",
            "get",
            "str",
            "get"
          ],
          "variables": [
            "task_description",
            "task_type",
            "task_complexity",
            "routing_strategy",
            "routing_decision",
            "result",
            "result"
          ]
        },
        {
          "name": "_make_routing_decision",
          "parameters": [
            "self",
            "task_type",
            "complexity",
            "strategy"
          ],
          "lines": 27,
          "complexity": 3,
          "calls": [
            "_select_crew_member"
          ],
          "variables": [
            "crew_member"
          ]
        },
        {
          "name": "_select_crew_member",
          "parameters": [
            "self",
            "task_type"
          ],
          "lines": 12,
          "complexity": 8,
          "calls": [],
          "variables": []
        },
        {
          "name": "_execute_claude_request",
          "parameters": [
            "self",
            "input_data",
            "routing"
          ],
          "lines": 42,
          "complexity": 3,
          "calls": [
            "post",
            "json",
            "Exception",
            "Exception",
            "get",
            "_format_crew_prompt",
            "str"
          ],
          "variables": [
            "headers",
            "payload",
            "response",
            "result"
          ]
        },
        {
          "name": "_execute_openrouter_request",
          "parameters": [
            "self",
            "input_data",
            "routing"
          ],
          "lines": 44,
          "complexity": 3,
          "calls": [
            "post",
            "json",
            "Exception",
            "Exception",
            "get",
            "str"
          ],
          "variables": [
            "headers",
            "payload",
            "response",
            "result"
          ]
        },
        {
          "name": "_format_crew_prompt",
          "parameters": [
            "self",
            "input_data",
            "routing"
          ],
          "lines": 19,
          "complexity": 1,
          "calls": [
            "get",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "crew_member",
            "prompt"
          ]
        }
      ],
      "variables": [
        "crew_member",
        "prompt",
        "input_data",
        "router",
        "result",
        "task_description",
        "task_type",
        "task_complexity",
        "routing_strategy",
        "routing_decision",
        "crew_member",
        "headers",
        "payload",
        "response",
        "headers",
        "payload",
        "response",
        "error_result",
        "result",
        "result",
        "result",
        "result"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "requests",
        "typing.Dict",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "EnhancedUnifiedRouter"
      ],
      "total_lines": 265,
      "code_lines": 218,
      "complexity_score": 18,
      "purpose": "General utility script"
    },
    "scripts/python/crew_learning_assessment.py": {
      "file_name": "crew_learning_assessment.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 14,
          "complexity": 1,
          "calls": [
            "CrewLearningAssessment",
            "assess_crew_learning",
            "print",
            "print",
            "print",
            "open",
            "write"
          ],
          "variables": [
            "assessment",
            "report"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "strftime",
            "now"
          ],
          "variables": []
        },
        {
          "name": "assess_crew_learning",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "_analyze_individual_learnings",
            "_analyze_shared_learnings",
            "_generate_learning_report",
            "_store_crew_memories",
            "strftime",
            "now"
          ],
          "variables": [
            "report"
          ]
        },
        {
          "name": "_analyze_individual_learnings",
          "parameters": [
            "self"
          ],
          "lines": 153,
          "complexity": 2,
          "calls": [
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len"
          ],
          "variables": []
        },
        {
          "name": "_analyze_shared_learnings",
          "parameters": [
            "self"
          ],
          "lines": 46,
          "complexity": 3,
          "calls": [
            "print",
            "items",
            "print",
            "print",
            "title",
            "replace"
          ],
          "variables": []
        },
        {
          "name": "_generate_learning_report",
          "parameters": [
            "self"
          ],
          "lines": 109,
          "complexity": 10,
          "calls": [
            "items",
            "strftime",
            "now"
          ],
          "variables": [
            "report"
          ]
        },
        {
          "name": "_store_crew_memories",
          "parameters": [
            "self"
          ],
          "lines": 58,
          "complexity": 6,
          "calls": [
            "print",
            "items",
            "items",
            "print",
            "open",
            "dump",
            "append",
            "append",
            "append",
            "isoformat",
            "isoformat",
            "isoformat",
            "len",
            "now",
            "now",
            "now"
          ],
          "variables": [
            "memories",
            "memory",
            "memory",
            "memory"
          ]
        }
      ],
      "variables": [
        "assessment",
        "report",
        "report",
        "report",
        "memories",
        "memory",
        "memory",
        "memory"
      ],
      "imports": [
        "json",
        "os",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "CrewLearningAssessment"
      ],
      "total_lines": 427,
      "code_lines": 345,
      "complexity_score": 18,
      "purpose": "General utility script"
    },
    "scripts/python/optimized_web_crawler_system.py": {
      "file_name": "optimized_web_crawler_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 97,
          "complexity": 8,
          "calls": [
            "print",
            "print",
            "print",
            "OptimizedWebCrawler",
            "print",
            "items",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "crawl_market_research",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "generate_supabase_schema",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "open",
            "dump",
            "int",
            "int",
            "len",
            "len",
            "len",
            "timestamp",
            "timestamp",
            "title",
            "len",
            "title",
            "len",
            "title",
            "title",
            "len",
            "len",
            "now",
            "now"
          ],
          "variables": [
            "crawler",
            "target_markets",
            "crawl_results",
            "schema",
            "crawl_output",
            "schema_output"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 51,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "extract_keywords_from_text",
          "parameters": [
            "self",
            "text"
          ],
          "lines": 30,
          "complexity": 5,
          "calls": [
            "items",
            "findall",
            "sorted",
            "lower",
            "items",
            "findall",
            "extend",
            "get"
          ],
          "variables": [
            "extracted_data",
            "words",
            "keyword_counts",
            "sorted_keywords",
            "word_lower",
            "matches"
          ]
        },
        {
          "name": "simulate_web_crawl",
          "parameters": [
            "self",
            "source",
            "market"
          ],
          "lines": 92,
          "complexity": 6,
          "calls": [
            "range",
            "range",
            "append",
            "range",
            "extract_keywords_from_text",
            "isoformat",
            "randint",
            "randint",
            "append",
            "randint",
            "append",
            "randint",
            "append",
            "isoformat",
            "randint",
            "uniform",
            "extract_keywords_from_text",
            "randint",
            "randint",
            "choice",
            "isoformat",
            "now",
            "randint",
            "randint",
            "range",
            "title",
            "title",
            "choice",
            "title",
            "randint",
            "title",
            "title",
            "randint",
            "range",
            "now",
            "timedelta",
            "now",
            "timedelta",
            "randint",
            "randint",
            "randint"
          ],
          "variables": [
            "crawl_results",
            "market_data",
            "all_text",
            "article",
            "startup",
            "funding"
          ]
        },
        {
          "name": "crawl_market_research",
          "parameters": [
            "self",
            "markets"
          ],
          "lines": 72,
          "complexity": 8,
          "calls": [
            "set",
            "set",
            "set",
            "values",
            "list",
            "isoformat",
            "items",
            "items",
            "update",
            "update",
            "list",
            "update",
            "int",
            "now",
            "simulate_web_crawl",
            "append",
            "len",
            "len",
            "len",
            "items",
            "extend",
            "extend",
            "timestamp",
            "extend",
            "now"
          ],
          "variables": [
            "crawl_results",
            "all_keywords",
            "all_trends",
            "all_insights",
            "market_analysis",
            "crawl_result"
          ]
        },
        {
          "name": "generate_supabase_schema",
          "parameters": [
            "self"
          ],
          "lines": 122,
          "complexity": 1,
          "calls": [],
          "variables": [
            "schema"
          ]
        }
      ],
      "variables": [
        "crawler",
        "target_markets",
        "crawl_results",
        "schema",
        "crawl_output",
        "schema_output",
        "extracted_data",
        "words",
        "keyword_counts",
        "sorted_keywords",
        "crawl_results",
        "market_data",
        "all_text",
        "crawl_results",
        "all_keywords",
        "all_trends",
        "all_insights",
        "schema",
        "word_lower",
        "article",
        "startup",
        "funding",
        "market_analysis",
        "matches",
        "crawl_result"
      ],
      "imports": [
        "json",
        "datetime",
        "requests",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "time",
        "random",
        "urllib.parse.urljoin",
        "urllib.parse.urlparse",
        "re"
      ],
      "classes": [
        "OptimizedWebCrawler"
      ],
      "total_lines": 489,
      "code_lines": 411,
      "complexity_score": 27,
      "purpose": "General utility script"
    },
    "scripts/python/observation_lounge_crew_debrief.py": {
      "file_name": "observation_lounge_crew_debrief.py",
      "file_type": "py",
      "functions": [
        {
          "name": "simulate_observation_lounge_session",
          "parameters": [],
          "lines": 374,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "list",
            "isoformat",
            "open",
            "dump",
            "open",
            "load",
            "print",
            "keys",
            "int",
            "strftime",
            "int",
            "now",
            "timestamp",
            "timestamp",
            "now",
            "now",
            "now"
          ],
          "variables": [
            "crew_insights",
            "workflow_integrations",
            "global_intelligence",
            "debrief_session",
            "debrief_file",
            "analysis_results"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "simulate_observation_lounge_session"
          ],
          "variables": []
        }
      ],
      "variables": [
        "crew_insights",
        "workflow_integrations",
        "global_intelligence",
        "debrief_session",
        "debrief_file",
        "analysis_results"
      ],
      "imports": [
        "json",
        "sys",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ],
      "classes": [],
      "total_lines": 393,
      "code_lines": 341,
      "complexity_score": 2,
      "purpose": "General utility script"
    },
    "scripts/python/enhanced_ai_prompts_deployment_system.py": {
      "file_name": "enhanced_ai_prompts_deployment_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 12,
          "complexity": 1,
          "calls": [
            "EnhancedAIPromptsDeployment",
            "execute_all_next_steps",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len",
            "len",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "deployment",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "deploy_enhanced_prompts",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 4,
          "calls": [
            "print",
            "EnhancedAIPromptsSystem",
            "append",
            "print",
            "generate_enhanced_prompt",
            "print",
            "str",
            "len",
            "isoformat",
            "print",
            "str",
            "isoformat",
            "str",
            "now",
            "now",
            "str"
          ],
          "variables": [
            "prompts_system",
            "prompt_types",
            "deployment_results",
            "prompt"
          ]
        },
        {
          "name": "test_live_system_integration",
          "parameters": [
            "self"
          ],
          "lines": 90,
          "complexity": 4,
          "calls": [
            "print",
            "append",
            "get",
            "print",
            "get",
            "print",
            "post",
            "print",
            "total_seconds",
            "print",
            "total_seconds",
            "print",
            "total_seconds",
            "print",
            "str",
            "str",
            "str",
            "str",
            "str",
            "str"
          ],
          "variables": [
            "integration_tests",
            "supabase_url",
            "supabase_key",
            "headers",
            "response",
            "n8n_url",
            "n8n_key",
            "headers",
            "response",
            "openrouter_url",
            "headers",
            "payload",
            "response"
          ]
        },
        {
          "name": "setup_performance_monitoring",
          "parameters": [
            "self"
          ],
          "lines": 50,
          "complexity": 2,
          "calls": [
            "print",
            "append",
            "print",
            "open",
            "write",
            "write",
            "write",
            "open",
            "write",
            "write",
            "open",
            "write",
            "write",
            "str",
            "print",
            "isoformat",
            "isoformat",
            "isoformat",
            "str",
            "now",
            "now",
            "now"
          ],
          "variables": [
            "monitoring_setup"
          ]
        },
        {
          "name": "create_advanced_workflows",
          "parameters": [
            "self"
          ],
          "lines": 46,
          "complexity": 3,
          "calls": [
            "print",
            "append",
            "items",
            "print",
            "print",
            "str",
            "print",
            "open",
            "dump",
            "str"
          ],
          "variables": [
            "advanced_workflows",
            "workflow_file"
          ]
        },
        {
          "name": "setup_automated_testing",
          "parameters": [
            "self"
          ],
          "lines": 101,
          "complexity": 2,
          "calls": [
            "print",
            "append",
            "print",
            "open",
            "write",
            "str",
            "print",
            "str"
          ],
          "variables": [
            "automated_testing",
            "test_file"
          ]
        },
        {
          "name": "scale_to_other_projects",
          "parameters": [
            "self"
          ],
          "lines": 93,
          "complexity": 3,
          "calls": [
            "print",
            "append",
            "items",
            "print",
            "print",
            "open",
            "write",
            "str",
            "print",
            "open",
            "dump",
            "str"
          ],
          "variables": [
            "scaling_results",
            "deployment_guide",
            "template_file"
          ]
        },
        {
          "name": "execute_all_next_steps",
          "parameters": [
            "self"
          ],
          "lines": 36,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "step_function",
            "print",
            "int",
            "print",
            "timestamp",
            "now",
            "str"
          ],
          "variables": [
            "steps",
            "results_file",
            "result"
          ]
        }
      ],
      "variables": [
        "deployment",
        "results",
        "integration_tests",
        "monitoring_setup",
        "advanced_workflows",
        "automated_testing",
        "scaling_results",
        "steps",
        "results_file",
        "prompts_system",
        "prompt_types",
        "deployment_results",
        "supabase_url",
        "supabase_key",
        "headers",
        "response",
        "n8n_url",
        "n8n_key",
        "headers",
        "response",
        "openrouter_url",
        "headers",
        "payload",
        "response",
        "test_file",
        "deployment_guide",
        "workflow_file",
        "template_file",
        "result",
        "prompt"
      ],
      "imports": [
        "json",
        "datetime",
        "os",
        "requests",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "enhanced_ai_prompts_system.EnhancedAIPromptsSystem"
      ],
      "classes": [
        "EnhancedAIPromptsDeployment"
      ],
      "total_lines": 525,
      "code_lines": 431,
      "complexity_score": 15,
      "purpose": "Deployment and setup"
    },
    "scripts/python/cursor_ai_behavior_analysis.py": {
      "file_name": "cursor_ai_behavior_analysis.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 26,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "CursorAIBehaviorAnalysis",
            "run_analysis",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "analysis",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 2,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "analyze_issue",
          "parameters": [
            "self"
          ],
          "lines": 35,
          "complexity": 1,
          "calls": [],
          "variables": [
            "analysis"
          ]
        },
        {
          "name": "create_solution_guide",
          "parameters": [
            "self"
          ],
          "lines": 115,
          "complexity": 1,
          "calls": [
            "strip"
          ],
          "variables": [
            "guide"
          ]
        },
        {
          "name": "generate_analysis_report",
          "parameters": [
            "self"
          ],
          "lines": 35,
          "complexity": 2,
          "calls": [
            "analyze_issue",
            "create_solution_guide",
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "title",
            "now"
          ],
          "variables": [
            "analysis",
            "guide",
            "timestamp",
            "report_file"
          ]
        },
        {
          "name": "create_crew_memory_update",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "run_analysis",
          "parameters": [
            "self"
          ],
          "lines": 19,
          "complexity": 1,
          "calls": [
            "info",
            "generate_analysis_report",
            "create_crew_memory_update",
            "info"
          ],
          "variables": [
            "report_file",
            "memory_update"
          ]
        }
      ],
      "variables": [
        "analysis",
        "result",
        "analysis",
        "guide",
        "analysis",
        "guide",
        "timestamp",
        "report_file",
        "report_file",
        "memory_update"
      ],
      "imports": [
        "json",
        "logging",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [
        "CursorAIBehaviorAnalysis"
      ],
      "total_lines": 279,
      "code_lines": 195,
      "complexity_score": 3,
      "purpose": "General utility script"
    },
    "scripts/python/alex_ai_job_search_system.py": {
      "file_name": "alex_ai_job_search_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 11,
          "complexity": 1,
          "calls": [
            "AlexAIJobSearchSystem",
            "run_job_search_automation",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len"
          ],
          "variables": [
            "job_search",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "init_database",
            "load_job_opportunities",
            "load_org_structures"
          ],
          "variables": []
        },
        {
          "name": "init_database",
          "parameters": [
            "self"
          ],
          "lines": 59,
          "complexity": 1,
          "calls": [
            "connect",
            "cursor",
            "execute",
            "execute",
            "execute",
            "commit",
            "close"
          ],
          "variables": [
            "conn",
            "cursor"
          ]
        },
        {
          "name": "load_job_opportunities",
          "parameters": [
            "self"
          ],
          "lines": 45,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "load_org_structures",
          "parameters": [
            "self"
          ],
          "lines": 70,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "tailor_resume_for_job",
          "parameters": [
            "self",
            "job"
          ],
          "lines": 19,
          "complexity": 1,
          "calls": [
            "get",
            "split",
            "_tailor_experience_for_job",
            "_generate_cover_letter"
          ],
          "variables": [
            "tailored_resume"
          ]
        },
        {
          "name": "_tailor_experience_for_job",
          "parameters": [
            "self",
            "job"
          ],
          "lines": 10,
          "complexity": 5,
          "calls": [
            "lower",
            "lower"
          ],
          "variables": []
        },
        {
          "name": "_generate_cover_letter",
          "parameters": [
            "self",
            "job"
          ],
          "lines": 20,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_application_wizard",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "run_job_search_automation",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "create_application_wizard",
            "print",
            "print",
            "save_job_search_results",
            "sorted",
            "len",
            "len"
          ],
          "variables": [
            "wizard",
            "top_jobs"
          ]
        },
        {
          "name": "save_job_search_results",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 2,
          "calls": [
            "connect",
            "cursor",
            "commit",
            "close",
            "print",
            "execute",
            "open",
            "dump",
            "open",
            "dump"
          ],
          "variables": [
            "conn",
            "cursor"
          ]
        }
      ],
      "variables": [
        "job_search",
        "results",
        "conn",
        "cursor",
        "tailored_resume",
        "wizard",
        "top_jobs",
        "conn",
        "cursor"
      ],
      "imports": [
        "json",
        "os",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "sqlite3"
      ],
      "classes": [
        "AlexAIJobSearchSystem"
      ],
      "total_lines": 362,
      "code_lines": 306,
      "complexity_score": 7,
      "purpose": "General utility script"
    },
    "scripts/python/yolo_mode_crew_memory_update.py": {
      "file_name": "yolo_mode_crew_memory_update.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "YOLOModeCrewMemoryUpdate",
            "run_update",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "update",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 2,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "create_yolo_integration_memory",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "create_crew_specific_memories",
          "parameters": [
            "self"
          ],
          "lines": 34,
          "complexity": 2,
          "calls": [
            "items",
            "append",
            "isoformat",
            "now"
          ],
          "variables": [
            "crew_memories",
            "crew_insights",
            "memory"
          ]
        },
        {
          "name": "store_memories",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 20,
          "complexity": 2,
          "calls": [
            "strftime",
            "info",
            "_store_in_mcp_system",
            "open",
            "dump",
            "error",
            "now"
          ],
          "variables": [
            "timestamp",
            "memory_file"
          ]
        },
        {
          "name": "_store_in_mcp_system",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 26,
          "complexity": 5,
          "calls": [
            "exists",
            "warning",
            "run",
            "info",
            "warning",
            "str"
          ],
          "variables": [
            "mcp_script",
            "query",
            "result"
          ]
        },
        {
          "name": "generate_integration_report",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 85,
          "complexity": 5,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "get",
            "append",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "now",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "timestamp",
            "report_file",
            "crew_memories",
            "crew"
          ]
        },
        {
          "name": "run_update",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 2,
          "calls": [
            "info",
            "create_yolo_integration_memory",
            "create_crew_specific_memories",
            "store_memories",
            "generate_integration_report",
            "info",
            "error",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "system_memory",
            "crew_memories",
            "all_memories",
            "report_file"
          ]
        }
      ],
      "variables": [
        "update",
        "result",
        "crew_memories",
        "crew_insights",
        "timestamp",
        "report_file",
        "system_memory",
        "crew_memories",
        "all_memories",
        "memory",
        "timestamp",
        "memory_file",
        "mcp_script",
        "crew_memories",
        "report_file",
        "crew",
        "query",
        "result"
      ],
      "imports": [
        "json",
        "logging",
        "datetime.datetime",
        "pathlib.Path",
        "subprocess"
      ],
      "classes": [
        "YOLOModeCrewMemoryUpdate"
      ],
      "total_lines": 281,
      "code_lines": 217,
      "complexity_score": 13,
      "purpose": "General utility script"
    },
    "scripts/python/youtube_channel_intelligence_system.py": {
      "file_name": "youtube_channel_intelligence_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 43,
          "complexity": 5,
          "calls": [
            "YouTubeChannelIntelligenceSystem",
            "print",
            "print",
            "print",
            "print",
            "len",
            "print",
            "print",
            "print",
            "print",
            "print",
            "exit",
            "int",
            "analyze_youtube_channel",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "len",
            "len",
            "print",
            "print",
            "print",
            "exit",
            "sum",
            "len",
            "len",
            "str",
            "len",
            "values"
          ],
          "variables": [
            "channel_url",
            "max_videos",
            "analysis_depth",
            "system",
            "analysis"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 67,
          "complexity": 1,
          "calls": [
            "YouTubeScraperCrewIntegration",
            "getenv",
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "analyze_youtube_channel",
          "parameters": [
            "self",
            "channel_url",
            "max_videos",
            "analysis_depth"
          ],
          "lines": 54,
          "complexity": 3,
          "calls": [
            "_extract_channel_id",
            "_get_channel_info",
            "_get_channel_videos",
            "_analyze_videos_with_crew_specialization",
            "_generate_channel_summary",
            "_extract_key_themes",
            "_create_content_vectors",
            "ChannelAnalysis",
            "_store_channel_analysis",
            "ValueError",
            "Exception",
            "get",
            "len",
            "now",
            "str"
          ],
          "variables": [
            "channel_id",
            "channel_info",
            "videos",
            "crew_insights",
            "channel_summary",
            "key_themes",
            "content_vectors",
            "analysis"
          ]
        },
        {
          "name": "_extract_channel_id",
          "parameters": [
            "self",
            "channel_url"
          ],
          "lines": 15,
          "complexity": 3,
          "calls": [
            "search",
            "group"
          ],
          "variables": [
            "patterns",
            "match"
          ]
        },
        {
          "name": "_get_channel_info",
          "parameters": [
            "self",
            "channel_id"
          ],
          "lines": 23,
          "complexity": 3,
          "calls": [
            "get",
            "json",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "url",
            "params",
            "response",
            "data",
            "channel"
          ]
        },
        {
          "name": "_get_channel_videos",
          "parameters": [
            "self",
            "channel_id",
            "max_videos"
          ],
          "lines": 30,
          "complexity": 5,
          "calls": [
            "min",
            "len",
            "get",
            "json",
            "extend",
            "get"
          ],
          "variables": [
            "url",
            "params",
            "videos",
            "page_token",
            "response",
            "data",
            "page_token"
          ]
        },
        {
          "name": "_analyze_videos_with_crew_specialization",
          "parameters": [
            "self",
            "videos",
            "analysis_depth"
          ],
          "lines": 29,
          "complexity": 3,
          "calls": [
            "defaultdict",
            "get",
            "items",
            "dict",
            "min",
            "_select_relevant_videos",
            "int",
            "_analyze_video_for_crew_member",
            "extend"
          ],
          "variables": [
            "crew_insights",
            "analysis_params",
            "params",
            "cost_tier",
            "max_videos",
            "relevant_videos",
            "insights"
          ]
        },
        {
          "name": "_select_relevant_videos",
          "parameters": [
            "self",
            "videos",
            "keywords",
            "max_videos"
          ],
          "lines": 18,
          "complexity": 3,
          "calls": [
            "sort",
            "lower",
            "lower",
            "sum",
            "append"
          ],
          "variables": [
            "scored_videos",
            "title",
            "description",
            "content",
            "score"
          ]
        },
        {
          "name": "_analyze_video_for_crew_member",
          "parameters": [
            "self",
            "video",
            "crew_member",
            "focus_config"
          ],
          "lines": 44,
          "complexity": 3,
          "calls": [
            "_generate_crew_specific_insight",
            "_calculate_relevance_score",
            "_create_vector_embedding",
            "ChannelInsight",
            "append",
            "len"
          ],
          "variables": [
            "insights",
            "title",
            "description",
            "published",
            "insight_content",
            "relevance_score",
            "vector_embedding",
            "insight"
          ]
        },
        {
          "name": "_generate_crew_specific_insight",
          "parameters": [
            "self",
            "title",
            "description",
            "crew_member",
            "insight_type"
          ],
          "lines": 25,
          "complexity": 1,
          "calls": [
            "get",
            "get",
            "_extract_key_concepts",
            "_extract_leadership_concepts",
            "_extract_decision_concepts",
            "_extract_data_concepts",
            "_extract_analytical_concepts",
            "_extract_logical_concepts"
          ],
          "variables": [
            "content",
            "insight_templates",
            "crew_insights"
          ]
        },
        {
          "name": "_extract_key_concepts",
          "parameters": [
            "self",
            "content",
            "limit"
          ],
          "lines": 11,
          "complexity": 3,
          "calls": [
            "findall",
            "defaultdict",
            "join",
            "lower",
            "sorted",
            "len",
            "items"
          ],
          "variables": [
            "words",
            "word_freq",
            "top_words"
          ]
        },
        {
          "name": "_extract_leadership_concepts",
          "parameters": [
            "self",
            "content",
            "limit"
          ],
          "lines": 5,
          "complexity": 2,
          "calls": [
            "join",
            "lower"
          ],
          "variables": [
            "leadership_keywords",
            "found_concepts"
          ]
        },
        {
          "name": "_extract_decision_concepts",
          "parameters": [
            "self",
            "content",
            "limit"
          ],
          "lines": 5,
          "complexity": 2,
          "calls": [
            "join",
            "lower"
          ],
          "variables": [
            "decision_keywords",
            "found_concepts"
          ]
        },
        {
          "name": "_extract_data_concepts",
          "parameters": [
            "self",
            "content",
            "limit"
          ],
          "lines": 5,
          "complexity": 2,
          "calls": [
            "join",
            "lower"
          ],
          "variables": [
            "data_keywords",
            "found_concepts"
          ]
        },
        {
          "name": "_extract_analytical_concepts",
          "parameters": [
            "self",
            "content",
            "limit"
          ],
          "lines": 5,
          "complexity": 2,
          "calls": [
            "join",
            "lower"
          ],
          "variables": [
            "analytical_keywords",
            "found_concepts"
          ]
        },
        {
          "name": "_extract_logical_concepts",
          "parameters": [
            "self",
            "content",
            "limit"
          ],
          "lines": 5,
          "complexity": 2,
          "calls": [
            "join",
            "lower"
          ],
          "variables": [
            "logical_keywords",
            "found_concepts"
          ]
        },
        {
          "name": "_calculate_relevance_score",
          "parameters": [
            "self",
            "content",
            "keywords"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "lower",
            "sum",
            "min",
            "len"
          ],
          "variables": [
            "content_lower",
            "matches"
          ]
        },
        {
          "name": "_create_vector_embedding",
          "parameters": [
            "self",
            "content",
            "dimensions"
          ],
          "lines": 13,
          "complexity": 2,
          "calls": [
            "hexdigest",
            "range",
            "seed",
            "append",
            "md5",
            "int",
            "encode",
            "random",
            "len"
          ],
          "variables": [
            "content_hash",
            "vector",
            "seed"
          ]
        },
        {
          "name": "_generate_channel_summary",
          "parameters": [
            "self",
            "crew_insights",
            "channel_info"
          ],
          "lines": 14,
          "complexity": 1,
          "calls": [
            "sum",
            "len",
            "len",
            "get",
            "get",
            "get",
            "values"
          ],
          "variables": [
            "total_insights",
            "crew_count",
            "summary"
          ]
        },
        {
          "name": "_extract_key_themes",
          "parameters": [
            "self",
            "crew_insights"
          ],
          "lines": 11,
          "complexity": 3,
          "calls": [
            "values",
            "join",
            "_extract_key_concepts",
            "split",
            "append"
          ],
          "variables": [
            "all_content",
            "combined_content",
            "themes"
          ]
        },
        {
          "name": "_create_content_vectors",
          "parameters": [
            "self",
            "crew_insights"
          ],
          "lines": 12,
          "complexity": 3,
          "calls": [
            "items",
            "mean",
            "tolist"
          ],
          "variables": [
            "vectors",
            "avg_vector"
          ]
        },
        {
          "name": "_store_channel_analysis",
          "parameters": [
            "self",
            "analysis"
          ],
          "lines": 32,
          "complexity": 3,
          "calls": [
            "post",
            "isoformat",
            "_store_crew_insights",
            "print",
            "print",
            "str"
          ],
          "variables": [
            "analysis_data",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "_store_crew_insights",
          "parameters": [
            "self",
            "crew_insights",
            "channel_id"
          ],
          "lines": 24,
          "complexity": 4,
          "calls": [
            "items",
            "post",
            "print"
          ],
          "variables": [
            "insight_data",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "get_channel_insights_for_crew",
          "parameters": [
            "self",
            "channel_id",
            "crew_member"
          ],
          "lines": 35,
          "complexity": 4,
          "calls": [
            "get",
            "json",
            "print",
            "ChannelInsight",
            "append",
            "str"
          ],
          "variables": [
            "url",
            "headers",
            "params",
            "response",
            "insights_data",
            "insights",
            "insight"
          ]
        },
        {
          "name": "search_insights_by_vector_similarity",
          "parameters": [
            "self",
            "query_vector",
            "crew_member",
            "limit"
          ],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "channel_url",
        "max_videos",
        "analysis_depth",
        "system",
        "patterns",
        "url",
        "params",
        "response",
        "url",
        "params",
        "videos",
        "page_token",
        "crew_insights",
        "analysis_params",
        "params",
        "scored_videos",
        "insights",
        "title",
        "description",
        "published",
        "content",
        "insight_templates",
        "crew_insights",
        "words",
        "word_freq",
        "top_words",
        "leadership_keywords",
        "found_concepts",
        "decision_keywords",
        "found_concepts",
        "data_keywords",
        "found_concepts",
        "analytical_keywords",
        "found_concepts",
        "logical_keywords",
        "found_concepts",
        "content_lower",
        "matches",
        "content_hash",
        "vector",
        "total_insights",
        "crew_count",
        "summary",
        "all_content",
        "combined_content",
        "themes",
        "vectors",
        "analysis",
        "channel_id",
        "channel_info",
        "videos",
        "crew_insights",
        "channel_summary",
        "key_themes",
        "content_vectors",
        "analysis",
        "match",
        "data",
        "response",
        "cost_tier",
        "max_videos",
        "relevant_videos",
        "title",
        "description",
        "content",
        "score",
        "insight_content",
        "seed",
        "analysis_data",
        "url",
        "headers",
        "response",
        "url",
        "headers",
        "params",
        "response",
        "channel",
        "data",
        "page_token",
        "insights",
        "relevance_score",
        "vector_embedding",
        "insight",
        "avg_vector",
        "insight_data",
        "url",
        "headers",
        "response",
        "insights_data",
        "insights",
        "insight"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "requests",
        "hashlib",
        "re",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "numpy",
        "dataclasses.dataclass",
        "collections.defaultdict",
        "youtube_scraper_crew_integration.YouTubeScraperCrewIntegration"
      ],
      "classes": [
        "ChannelInsight",
        "ChannelAnalysis",
        "YouTubeChannelIntelligenceSystem"
      ],
      "total_lines": 611,
      "code_lines": 477,
      "complexity_score": 49,
      "purpose": "General utility script"
    },
    "scripts/python/mcp_memory_optimization_milestone_push.py": {
      "file_name": "mcp_memory_optimization_milestone_push.py",
      "file_type": "py",
      "functions": [
        {
          "name": "create_milestone_package",
          "parameters": [],
          "lines": 330,
          "complexity": 3,
          "calls": [
            "strftime",
            "Path",
            "mkdir",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "exists",
            "len",
            "open",
            "dump",
            "open",
            "write",
            "open",
            "add",
            "now",
            "mkdir",
            "append",
            "print",
            "print",
            "strftime",
            "len",
            "strftime",
            "open",
            "len",
            "open",
            "write",
            "now",
            "now",
            "read"
          ],
          "variables": [
            "timestamp",
            "milestone_name",
            "milestone_version",
            "package_name",
            "package_dir",
            "milestone_files",
            "copied_files",
            "manifest",
            "manifest_file",
            "summary_content",
            "summary_file",
            "tar_filename",
            "dest_path"
          ]
        }
      ],
      "variables": [
        "timestamp",
        "milestone_name",
        "milestone_version",
        "package_name",
        "package_dir",
        "milestone_files",
        "copied_files",
        "manifest",
        "manifest_file",
        "summary_content",
        "summary_file",
        "tar_filename",
        "dest_path"
      ],
      "imports": [
        "os",
        "json",
        "tarfile",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [],
      "total_lines": 349,
      "code_lines": 230,
      "complexity_score": 3,
      "purpose": "General utility script"
    },
    "scripts/python/crew_yolo_mode_memory_sync.py": {
      "file_name": "crew_yolo_mode_memory_sync.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 35,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "CrewYOLOModeMemorySync",
            "run_crew_memory_sync",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "sync",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "create_crew_memory_sync",
          "parameters": [
            "self"
          ],
          "lines": 153,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "crew_sync"
          ]
        },
        {
          "name": "create_crew_memory_update_script",
          "parameters": [
            "self"
          ],
          "lines": 42,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "update_script"
          ]
        },
        {
          "name": "create_crew_coordination_workflow",
          "parameters": [
            "self"
          ],
          "lines": 62,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "workflow"
          ]
        },
        {
          "name": "save_crew_memory_sync",
          "parameters": [
            "self",
            "crew_sync",
            "update_script",
            "workflow"
          ],
          "lines": 21,
          "complexity": 1,
          "calls": [
            "info",
            "info",
            "info",
            "open",
            "dump",
            "open",
            "dump",
            "open",
            "dump"
          ],
          "variables": [
            "update_script_file",
            "workflow_file"
          ]
        },
        {
          "name": "create_crew_sync_report",
          "parameters": [
            "self",
            "crew_sync"
          ],
          "lines": 88,
          "complexity": 10,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "title",
            "upper",
            "join",
            "title",
            "now",
            "replace",
            "replace"
          ],
          "variables": [
            "timestamp",
            "report_file"
          ]
        },
        {
          "name": "run_crew_memory_sync",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 1,
          "calls": [
            "info",
            "create_crew_memory_sync",
            "create_crew_memory_update_script",
            "create_crew_coordination_workflow",
            "save_crew_memory_sync",
            "create_crew_sync_report",
            "info",
            "len"
          ],
          "variables": [
            "crew_sync",
            "update_script",
            "workflow",
            "report_file"
          ]
        }
      ],
      "variables": [
        "sync",
        "result",
        "crew_sync",
        "update_script",
        "workflow",
        "update_script_file",
        "workflow_file",
        "timestamp",
        "report_file",
        "crew_sync",
        "update_script",
        "workflow",
        "report_file"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "CrewYOLOModeMemorySync"
      ],
      "total_lines": 467,
      "code_lines": 406,
      "complexity_score": 11,
      "purpose": "Synchronization and data management"
    },
    "scripts/python/alex_ai_job_search_integration.py": {
      "file_name": "alex_ai_job_search_integration.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "AlexAIJobSearchIntegration",
            "run_integration"
          ],
          "variables": [
            "integration",
            "report"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "join",
            "init_database"
          ],
          "variables": []
        },
        {
          "name": "init_database",
          "parameters": [
            "self"
          ],
          "lines": 77,
          "complexity": 1,
          "calls": [
            "connect",
            "cursor",
            "execute",
            "execute",
            "execute",
            "execute",
            "commit",
            "close"
          ],
          "variables": [
            "conn",
            "cursor"
          ]
        },
        {
          "name": "load_comprehensive_job_data",
          "parameters": [
            "self"
          ],
          "lines": 249,
          "complexity": 1,
          "calls": [],
          "variables": [
            "job_opportunities"
          ]
        },
        {
          "name": "load_contact_database",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 1,
          "calls": [],
          "variables": [
            "contacts"
          ]
        },
        {
          "name": "analyze_resume",
          "parameters": [
            "self",
            "resume_path"
          ],
          "lines": 35,
          "complexity": 2,
          "calls": [
            "exists",
            "isoformat",
            "now"
          ],
          "variables": [
            "analysis"
          ]
        },
        {
          "name": "populate_database",
          "parameters": [
            "self"
          ],
          "lines": 42,
          "complexity": 3,
          "calls": [
            "connect",
            "cursor",
            "execute",
            "execute",
            "load_comprehensive_job_data",
            "load_contact_database",
            "commit",
            "close",
            "print",
            "execute",
            "execute",
            "len",
            "len"
          ],
          "variables": [
            "conn",
            "cursor",
            "job_opportunities",
            "contacts"
          ]
        },
        {
          "name": "generate_comprehensive_report",
          "parameters": [
            "self"
          ],
          "lines": 68,
          "complexity": 2,
          "calls": [
            "connect",
            "cursor",
            "execute",
            "execute",
            "execute",
            "execute",
            "execute",
            "execute",
            "fetchall",
            "close",
            "exists",
            "fetchone",
            "fetchone",
            "fetchone",
            "fetchone",
            "fetchone",
            "analyze_resume",
            "isoformat",
            "now"
          ],
          "variables": [
            "conn",
            "cursor",
            "total_jobs",
            "st_louis_jobs",
            "remote_jobs",
            "high_score_jobs",
            "total_contacts",
            "top_opportunities",
            "resume_analysis",
            "report",
            "resume_analysis"
          ]
        },
        {
          "name": "create_user_interface",
          "parameters": [
            "self"
          ],
          "lines": 10,
          "complexity": 2,
          "calls": [
            "join",
            "exists",
            "print",
            "print"
          ],
          "variables": [
            "ui_path"
          ]
        },
        {
          "name": "run_integration",
          "parameters": [
            "self"
          ],
          "lines": 31,
          "complexity": 2,
          "calls": [
            "print",
            "populate_database",
            "generate_comprehensive_report",
            "join",
            "create_user_interface",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "print"
          ],
          "variables": [
            "report",
            "report_path",
            "ui_path"
          ]
        }
      ],
      "variables": [
        "integration",
        "report",
        "conn",
        "cursor",
        "job_opportunities",
        "contacts",
        "analysis",
        "conn",
        "cursor",
        "job_opportunities",
        "contacts",
        "conn",
        "cursor",
        "total_jobs",
        "st_louis_jobs",
        "remote_jobs",
        "high_score_jobs",
        "total_contacts",
        "top_opportunities",
        "resume_analysis",
        "report",
        "ui_path",
        "report",
        "report_path",
        "ui_path",
        "resume_analysis"
      ],
      "imports": [
        "json",
        "os",
        "sqlite3",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "shutil"
      ],
      "classes": [
        "AlexAIJobSearchIntegration"
      ],
      "total_lines": 580,
      "code_lines": 502,
      "complexity_score": 8,
      "purpose": "General utility script"
    },
    "scripts/python/test_channel_intelligence_system.py": {
      "file_name": "test_channel_intelligence_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 39,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "ChannelIntelligenceTester",
            "run_all_tests",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "print",
            "exit",
            "print",
            "exit",
            "print",
            "int",
            "getenv",
            "timestamp",
            "now"
          ],
          "variables": [
            "required_env_vars",
            "missing_vars",
            "tester",
            "report",
            "report_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 7,
          "complexity": 1,
          "calls": [
            "YouTubeChannelIntelligenceSystem"
          ],
          "variables": []
        },
        {
          "name": "run_all_tests",
          "parameters": [
            "self"
          ],
          "lines": 31,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "test_channel_id_extraction",
            "test_channel_info_retrieval",
            "test_crew_specialized_analysis",
            "test_cost_optimization",
            "test_vector_embedding_generation",
            "test_full_channel_analysis",
            "test_crew_collaboration_insights",
            "test_performance_scalability",
            "generate_test_report"
          ],
          "variables": []
        },
        {
          "name": "test_channel_id_extraction",
          "parameters": [
            "self"
          ],
          "lines": 25,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "_extract_channel_id",
            "print",
            "print",
            "print",
            "print",
            "str",
            "str"
          ],
          "variables": [
            "test_urls",
            "result"
          ]
        },
        {
          "name": "test_channel_info_retrieval",
          "parameters": [
            "self"
          ],
          "lines": 20,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "_get_channel_info",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "str"
          ],
          "variables": [
            "channel_id",
            "channel_info"
          ]
        },
        {
          "name": "test_crew_specialized_analysis",
          "parameters": [
            "self"
          ],
          "lines": 16,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "items",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "join",
            "join"
          ],
          "variables": []
        },
        {
          "name": "test_cost_optimization",
          "parameters": [
            "self"
          ],
          "lines": 20,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "sum",
            "print",
            "print",
            "print",
            "print",
            "items",
            "items",
            "items",
            "values",
            "len",
            "join",
            "len",
            "join",
            "len",
            "join"
          ],
          "variables": [
            "total_cost",
            "premium_crew",
            "standard_crew",
            "economy_crew"
          ]
        },
        {
          "name": "test_vector_embedding_generation",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "list",
            "_create_vector_embedding",
            "print",
            "items",
            "len",
            "print",
            "print",
            "print",
            "str",
            "min",
            "max",
            "len"
          ],
          "variables": [
            "test_content",
            "dimensions",
            "vector"
          ]
        },
        {
          "name": "test_full_channel_analysis",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "analyze_youtube_channel",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "sum",
            "len",
            "str",
            "len",
            "len",
            "values"
          ],
          "variables": [
            "channel_url",
            "analysis"
          ]
        },
        {
          "name": "test_crew_collaboration_insights",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "get_channel_insights_for_crew",
            "print",
            "print",
            "print",
            "print",
            "len",
            "str"
          ],
          "variables": [
            "test_channel_id",
            "insights",
            "sample_insight"
          ]
        },
        {
          "name": "test_performance_scalability",
          "parameters": [
            "self"
          ],
          "lines": 27,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "time",
            "search_insights_by_vector_similarity",
            "print",
            "print",
            "print",
            "items",
            "time",
            "print",
            "print",
            "len",
            "str"
          ],
          "variables": [
            "query_vector",
            "start_time",
            "similar_insights",
            "search_time",
            "efficiency"
          ]
        },
        {
          "name": "generate_test_report",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "print",
            "len",
            "len",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "isoformat",
            "values",
            "now",
            "title",
            "replace"
          ],
          "variables": [
            "test_results",
            "total_tests",
            "passed_tests",
            "success_rate",
            "status_icon"
          ]
        }
      ],
      "variables": [
        "required_env_vars",
        "missing_vars",
        "tester",
        "report",
        "report_file",
        "test_urls",
        "total_cost",
        "premium_crew",
        "standard_crew",
        "economy_crew",
        "test_content",
        "test_results",
        "total_tests",
        "passed_tests",
        "success_rate",
        "channel_id",
        "channel_info",
        "channel_url",
        "analysis",
        "test_channel_id",
        "query_vector",
        "start_time",
        "similar_insights",
        "search_time",
        "status_icon",
        "result",
        "dimensions",
        "vector",
        "insights",
        "efficiency",
        "sample_insight"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "requests",
        "time",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "datetime.datetime",
        "youtube_channel_intelligence_system.YouTubeChannelIntelligenceSystem"
      ],
      "classes": [
        "ChannelIntelligenceTester"
      ],
      "total_lines": 335,
      "code_lines": 240,
      "complexity_score": 30,
      "purpose": "Testing and validation"
    },
    "scripts/python/cursor_ai_integration_memory_update.py": {
      "file_name": "cursor_ai_integration_memory_update.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "CursorAIIntegrationMemoryUpdate",
            "run_update",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "update",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 2,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "create_cursor_ai_memory",
          "parameters": [
            "self"
          ],
          "lines": 37,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "create_crew_specific_memories",
          "parameters": [
            "self"
          ],
          "lines": 33,
          "complexity": 2,
          "calls": [
            "items",
            "append",
            "isoformat",
            "now"
          ],
          "variables": [
            "crew_memories",
            "crew_insights",
            "memory"
          ]
        },
        {
          "name": "store_memories",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 20,
          "complexity": 2,
          "calls": [
            "strftime",
            "info",
            "_store_in_mcp_system",
            "open",
            "dump",
            "error",
            "now"
          ],
          "variables": [
            "timestamp",
            "memory_file"
          ]
        },
        {
          "name": "_store_in_mcp_system",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 26,
          "complexity": 5,
          "calls": [
            "exists",
            "warning",
            "run",
            "info",
            "warning",
            "str"
          ],
          "variables": [
            "mcp_script",
            "query",
            "result"
          ]
        },
        {
          "name": "generate_integration_report",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 82,
          "complexity": 5,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "get",
            "append",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "now",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "timestamp",
            "report_file",
            "crew_memories",
            "crew"
          ]
        },
        {
          "name": "run_update",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 2,
          "calls": [
            "info",
            "create_cursor_ai_memory",
            "create_crew_specific_memories",
            "store_memories",
            "generate_integration_report",
            "info",
            "error",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "system_memory",
            "crew_memories",
            "all_memories",
            "report_file"
          ]
        }
      ],
      "variables": [
        "update",
        "result",
        "crew_memories",
        "crew_insights",
        "timestamp",
        "report_file",
        "system_memory",
        "crew_memories",
        "all_memories",
        "memory",
        "timestamp",
        "memory_file",
        "mcp_script",
        "crew_memories",
        "report_file",
        "crew",
        "query",
        "result"
      ],
      "imports": [
        "json",
        "logging",
        "datetime.datetime",
        "pathlib.Path",
        "subprocess"
      ],
      "classes": [
        "CursorAIIntegrationMemoryUpdate"
      ],
      "total_lines": 285,
      "code_lines": 224,
      "complexity_score": 13,
      "purpose": "General utility script"
    },
    "scripts/python/simple_youtube_crew_memory_demo.py": {
      "file_name": "simple_youtube_crew_memory_demo.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 30,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "SimpleYouTubeCrewMemoryDemo",
            "print",
            "run_demo",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "demo",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "simulate_youtube_analysis",
          "parameters": [
            "self",
            "channel_name"
          ],
          "lines": 65,
          "complexity": 3,
          "calls": [
            "info",
            "items",
            "info",
            "append",
            "isoformat",
            "len",
            "now"
          ],
          "variables": [
            "simulated_insights",
            "memories",
            "memory"
          ]
        },
        {
          "name": "store_crew_memories",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 25,
          "complexity": 2,
          "calls": [
            "info",
            "extend",
            "strftime",
            "info",
            "_store_in_mcp_system",
            "open",
            "dump",
            "error",
            "len",
            "now"
          ],
          "variables": [
            "timestamp",
            "memory_file"
          ]
        },
        {
          "name": "_store_in_mcp_system",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 26,
          "complexity": 5,
          "calls": [
            "exists",
            "warning",
            "run",
            "info",
            "warning",
            "str"
          ],
          "variables": [
            "mcp_script",
            "query",
            "result"
          ]
        },
        {
          "name": "generate_memory_report",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 56,
          "complexity": 5,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "get",
            "append",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "len",
            "len",
            "sum",
            "len",
            "now",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "timestamp",
            "report_file",
            "crew_memories",
            "crew"
          ]
        },
        {
          "name": "run_demo",
          "parameters": [
            "self"
          ],
          "lines": 37,
          "complexity": 3,
          "calls": [
            "info",
            "simulate_youtube_analysis",
            "extend",
            "store_crew_memories",
            "generate_memory_report",
            "info",
            "error",
            "len",
            "len",
            "len"
          ],
          "variables": [
            "channels",
            "all_memories",
            "memories",
            "report_file"
          ]
        }
      ],
      "variables": [
        "demo",
        "result",
        "simulated_insights",
        "memories",
        "timestamp",
        "report_file",
        "channels",
        "all_memories",
        "timestamp",
        "memory_file",
        "mcp_script",
        "crew_memories",
        "memories",
        "report_file",
        "memory",
        "crew",
        "query",
        "result"
      ],
      "imports": [
        "json",
        "logging",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "subprocess"
      ],
      "classes": [
        "SimpleYouTubeCrewMemoryDemo"
      ],
      "total_lines": 274,
      "code_lines": 210,
      "complexity_score": 15,
      "purpose": "General utility script"
    },
    "scripts/python/comprehensive_yolo_stress_test.py": {
      "file_name": "comprehensive_yolo_stress_test.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 29,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "ComprehensiveYOLOStressTest",
            "run_all_stress_tests",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len",
            "print",
            "len",
            "print",
            "print",
            "len",
            "len",
            "len",
            "print",
            "print",
            "join"
          ],
          "variables": [
            "stress_test",
            "report_file",
            "total_tests",
            "success_rate"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "run_all_stress_tests",
          "parameters": [
            "self"
          ],
          "lines": 34,
          "complexity": 4,
          "calls": [
            "info",
            "generate_stress_test_report",
            "info",
            "test_func",
            "append",
            "info",
            "append",
            "error",
            "append",
            "error"
          ],
          "variables": [
            "tests",
            "result"
          ]
        },
        {
          "name": "test_file_creation",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 3,
          "calls": [
            "len",
            "open",
            "write",
            "write",
            "write",
            "error",
            "now"
          ],
          "variables": [
            "test_files",
            "success_count"
          ]
        },
        {
          "name": "test_directory_operations",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 3,
          "calls": [
            "len",
            "makedirs",
            "join",
            "open",
            "write",
            "error"
          ],
          "variables": [
            "test_dirs",
            "success_count",
            "test_file"
          ]
        },
        {
          "name": "test_code_generation",
          "parameters": [
            "self"
          ],
          "lines": 50,
          "complexity": 3,
          "calls": [
            "len",
            "dumps",
            "open",
            "write",
            "error",
            "isoformat",
            "now"
          ],
          "variables": [
            "code_templates",
            "success_count"
          ]
        },
        {
          "name": "test_git_operations",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 6,
          "calls": [
            "run",
            "info",
            "len",
            "error",
            "run",
            "error"
          ],
          "variables": [
            "result",
            "git_commands",
            "success_count",
            "result"
          ]
        },
        {
          "name": "test_package_management",
          "parameters": [
            "self"
          ],
          "lines": 27,
          "complexity": 6,
          "calls": [
            "exists",
            "info",
            "error",
            "len",
            "run",
            "error"
          ],
          "variables": [
            "npm_commands",
            "success_count",
            "result"
          ]
        },
        {
          "name": "test_configuration_operations",
          "parameters": [
            "self"
          ],
          "lines": 34,
          "complexity": 3,
          "calls": [
            "len",
            "open",
            "write",
            "error"
          ],
          "variables": [
            "config_files",
            "success_count"
          ]
        },
        {
          "name": "test_memory_system_operations",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "len",
            "error",
            "isoformat",
            "open",
            "dump",
            "error",
            "now"
          ],
          "variables": [
            "memory_files",
            "success_count",
            "memory_data"
          ]
        },
        {
          "name": "test_n8n_workflow_operations",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 4,
          "calls": [
            "len",
            "error",
            "isoformat",
            "isoformat",
            "open",
            "dump",
            "error",
            "now",
            "now"
          ],
          "variables": [
            "workflow_files",
            "success_count",
            "workflow_data"
          ]
        },
        {
          "name": "test_crew_system_operations",
          "parameters": [
            "self"
          ],
          "lines": 49,
          "complexity": 5,
          "calls": [
            "len",
            "error",
            "endswith",
            "open",
            "write",
            "error"
          ],
          "variables": [
            "crew_files",
            "success_count",
            "content",
            "content"
          ]
        },
        {
          "name": "test_edge_cases",
          "parameters": [
            "self"
          ],
          "lines": 27,
          "complexity": 3,
          "calls": [
            "len",
            "open",
            "write",
            "error"
          ],
          "variables": [
            "edge_cases",
            "success_count"
          ]
        },
        {
          "name": "test_performance",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 5,
          "calls": [
            "time",
            "range",
            "time",
            "info",
            "range",
            "error",
            "open",
            "write",
            "remove"
          ],
          "variables": [
            "start_time",
            "end_time",
            "duration",
            "test_file",
            "test_file"
          ]
        },
        {
          "name": "test_error_handling",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 4,
          "calls": [
            "error",
            "open",
            "write",
            "open",
            "write"
          ],
          "variables": []
        },
        {
          "name": "generate_stress_test_report",
          "parameters": [
            "self"
          ],
          "lines": 55,
          "complexity": 8,
          "calls": [
            "strftime",
            "info",
            "len",
            "len",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "len",
            "write",
            "write",
            "len",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "write",
            "write",
            "now"
          ],
          "variables": [
            "timestamp",
            "report_file",
            "total_tests",
            "success_rate"
          ]
        }
      ],
      "variables": [
        "stress_test",
        "report_file",
        "total_tests",
        "success_rate",
        "tests",
        "test_files",
        "success_count",
        "test_dirs",
        "success_count",
        "code_templates",
        "success_count",
        "config_files",
        "success_count",
        "edge_cases",
        "success_count",
        "timestamp",
        "report_file",
        "total_tests",
        "success_rate",
        "result",
        "git_commands",
        "success_count",
        "memory_files",
        "success_count",
        "workflow_files",
        "success_count",
        "crew_files",
        "success_count",
        "start_time",
        "end_time",
        "duration",
        "result",
        "test_file",
        "npm_commands",
        "success_count",
        "test_file",
        "test_file",
        "result",
        "memory_data",
        "workflow_data",
        "result",
        "content",
        "content"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "subprocess",
        "sys",
        "time",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [
        "ComprehensiveYOLOStressTest"
      ],
      "total_lines": 555,
      "code_lines": 459,
      "complexity_score": 52,
      "purpose": "Testing and validation"
    },
    "scripts/python/observation_lounge_yolo_mode_debrief.py": {
      "file_name": "observation_lounge_yolo_mode_debrief.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "ObservationLoungeYOLOModeDebrief",
            "conduct_yolo_mode_debrief",
            "print",
            "print",
            "print",
            "print",
            "generate_debrief_report",
            "print",
            "print",
            "print",
            "print",
            "enumerate",
            "print",
            "len"
          ],
          "variables": [
            "debrief",
            "session",
            "report_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "resolve",
            "_initialize_crew",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "_initialize_crew",
          "parameters": [
            "self"
          ],
          "lines": 64,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "conduct_yolo_mode_debrief",
          "parameters": [
            "self"
          ],
          "lines": 34,
          "complexity": 2,
          "calls": [
            "info",
            "items",
            "_generate_consensus",
            "_generate_recommendations",
            "_store_debrief_session",
            "isoformat",
            "list",
            "_get_crew_insight",
            "append",
            "keys",
            "strftime",
            "now",
            "now"
          ],
          "variables": [
            "debrief_session",
            "consensus",
            "recommendations",
            "insight"
          ]
        },
        {
          "name": "_get_crew_insight",
          "parameters": [
            "self",
            "crew_id",
            "crew_info"
          ],
          "lines": 91,
          "complexity": 1,
          "calls": [
            "get",
            "update",
            "isoformat",
            "now"
          ],
          "variables": [
            "insights",
            "insight"
          ]
        },
        {
          "name": "_generate_consensus",
          "parameters": [
            "self",
            "crew_insights"
          ],
          "lines": 47,
          "complexity": 12,
          "calls": [
            "sum",
            "values",
            "len",
            "lower",
            "values"
          ],
          "variables": [
            "total_confidence",
            "average_confidence",
            "themes",
            "consensus",
            "analysis"
          ]
        },
        {
          "name": "_generate_recommendations",
          "parameters": [
            "self",
            "crew_insights"
          ],
          "lines": 41,
          "complexity": 1,
          "calls": [],
          "variables": [
            "recommendations"
          ]
        },
        {
          "name": "_store_debrief_session",
          "parameters": [
            "self",
            "debrief_session"
          ],
          "lines": 9,
          "complexity": 1,
          "calls": [
            "strftime",
            "info",
            "open",
            "dump",
            "now"
          ],
          "variables": [
            "timestamp",
            "session_file"
          ]
        },
        {
          "name": "generate_debrief_report",
          "parameters": [
            "self",
            "debrief_session"
          ],
          "lines": 72,
          "complexity": 7,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "enumerate",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "title",
            "title",
            "title",
            "title"
          ],
          "variables": [
            "timestamp",
            "report_file",
            "consensus",
            "crew_info"
          ]
        }
      ],
      "variables": [
        "debrief",
        "session",
        "report_file",
        "debrief_session",
        "consensus",
        "recommendations",
        "insights",
        "insight",
        "total_confidence",
        "average_confidence",
        "themes",
        "consensus",
        "recommendations",
        "timestamp",
        "session_file",
        "timestamp",
        "report_file",
        "insight",
        "analysis",
        "consensus",
        "crew_info"
      ],
      "imports": [
        "json",
        "logging",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [
        "ObservationLoungeYOLOModeDebrief"
      ],
      "total_lines": 417,
      "code_lines": 360,
      "complexity_score": 20,
      "purpose": "General utility script"
    },
    "scripts/python/knowledge_gap_research_plan.py": {
      "file_name": "knowledge_gap_research_plan.py",
      "file_type": "py",
      "functions": [
        {
          "name": "create_research_plan",
          "parameters": [],
          "lines": 243,
          "complexity": 1,
          "calls": [
            "now",
            "isoformat",
            "int",
            "timestamp"
          ],
          "variables": [
            "timestamp",
            "plan_id",
            "research_plan"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 92,
          "complexity": 8,
          "calls": [
            "print",
            "print",
            "print",
            "create_research_plan",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "timestamp",
            "title",
            "join",
            "len",
            "title",
            "now",
            "replace",
            "replace"
          ],
          "variables": [
            "research_plan",
            "sprint_structure",
            "output_file"
          ]
        }
      ],
      "variables": [
        "timestamp",
        "plan_id",
        "research_plan",
        "research_plan",
        "sprint_structure",
        "output_file"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [],
      "total_lines": 350,
      "code_lines": 324,
      "complexity_score": 8,
      "purpose": "General utility script"
    },
    "scripts/python/mcp_memory_optimization_system.py": {
      "file_name": "mcp_memory_optimization_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 73,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "MCPMemoryOptimizationSystem",
            "print",
            "print",
            "optimize_memory_storage",
            "generate_optimization_report",
            "print",
            "strftime",
            "print",
            "print",
            "MemoryVector",
            "open",
            "write",
            "now",
            "generate_embedding",
            "now",
            "now",
            "len"
          ],
          "variables": [
            "optimizer",
            "sample_memories",
            "results",
            "report",
            "timestamp",
            "report_file",
            "memory"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "supabase_client",
            "openai_client"
          ],
          "lines": 9,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_embedding",
          "parameters": [
            "self",
            "text"
          ],
          "lines": 15,
          "complexity": 3,
          "calls": [
            "create",
            "_hash_based_embedding",
            "error",
            "_hash_based_embedding"
          ],
          "variables": [
            "response"
          ]
        },
        {
          "name": "_hash_based_embedding",
          "parameters": [
            "self",
            "text"
          ],
          "lines": 15,
          "complexity": 4,
          "calls": [
            "sha256",
            "digest",
            "range",
            "encode",
            "len",
            "len",
            "append",
            "len",
            "from_bytes",
            "append"
          ],
          "variables": [
            "hash_obj",
            "hash_bytes",
            "embedding",
            "val"
          ]
        },
        {
          "name": "cosine_similarity",
          "parameters": [
            "self",
            "vec1",
            "vec2"
          ],
          "lines": 17,
          "complexity": 4,
          "calls": [
            "array",
            "array",
            "dot",
            "norm",
            "norm",
            "error"
          ],
          "variables": [
            "vec1",
            "vec2",
            "dot_product",
            "norm1",
            "norm2"
          ]
        },
        {
          "name": "calculate_importance_score",
          "parameters": [
            "self",
            "memory"
          ],
          "lines": 35,
          "complexity": 1,
          "calls": [
            "max",
            "min",
            "len",
            "min",
            "min",
            "get",
            "min",
            "now",
            "len"
          ],
          "variables": [
            "score",
            "recency_days",
            "recency_factor",
            "access_factor",
            "content_length",
            "length_factor",
            "tag_factor",
            "type_weights",
            "type_factor"
          ]
        },
        {
          "name": "find_similar_memories",
          "parameters": [
            "self",
            "memory",
            "threshold"
          ],
          "lines": 18,
          "complexity": 5,
          "calls": [
            "items",
            "sort",
            "cosine_similarity",
            "append"
          ],
          "variables": [
            "similar_memories",
            "threshold",
            "similarity"
          ]
        },
        {
          "name": "consolidate_similar_memories",
          "parameters": [
            "self",
            "memory_group"
          ],
          "lines": 43,
          "complexity": 5,
          "calls": [
            "max",
            "_consolidate_content",
            "sum",
            "MemoryVector",
            "len",
            "range",
            "len",
            "sum",
            "append",
            "max",
            "min",
            "max",
            "sum",
            "list",
            "set",
            "enumerate"
          ],
          "variables": [
            "base_memory",
            "consolidated_content",
            "weights",
            "total_weight",
            "consolidated_memory",
            "weighted_embedding",
            "weighted_embedding",
            "weighted_sum"
          ]
        },
        {
          "name": "_consolidate_content",
          "parameters": [
            "self",
            "memories"
          ],
          "lines": 21,
          "complexity": 5,
          "calls": [
            "items",
            "join",
            "append",
            "len",
            "append",
            "_create_content_summary",
            "append"
          ],
          "variables": [
            "type_groups",
            "consolidated_parts",
            "contents",
            "summary"
          ]
        },
        {
          "name": "_create_content_summary",
          "parameters": [
            "self",
            "contents",
            "mem_type"
          ],
          "lines": 31,
          "complexity": 8,
          "calls": [
            "len",
            "join",
            "enumerate",
            "append",
            "append",
            "join",
            "join",
            "append",
            "append",
            "title",
            "enumerate"
          ],
          "variables": [
            "key_points",
            "implementations",
            "numbered_contents"
          ]
        },
        {
          "name": "create_memory_clusters",
          "parameters": [
            "self"
          ],
          "lines": 45,
          "complexity": 5,
          "calls": [
            "set",
            "items",
            "find_similar_memories",
            "len",
            "tolist",
            "_consolidate_content",
            "max",
            "MemoryCluster",
            "update",
            "mean",
            "list",
            "list",
            "set",
            "set"
          ],
          "variables": [
            "clusters",
            "processed_memories",
            "similar_memories",
            "similar_mem_ids",
            "cluster_memories",
            "cluster_id",
            "embeddings",
            "centroid",
            "consolidated_content",
            "representative",
            "cluster"
          ]
        },
        {
          "name": "optimize_memory_storage",
          "parameters": [
            "self"
          ],
          "lines": 70,
          "complexity": 14,
          "calls": [
            "values",
            "create_memory_clusters",
            "len",
            "set",
            "values",
            "items",
            "values",
            "items",
            "update",
            "len",
            "len",
            "isoformat",
            "calculate_importance_score",
            "append",
            "len",
            "consolidate_similar_memories",
            "add",
            "len",
            "sorted",
            "now",
            "update",
            "add",
            "len"
          ],
          "variables": [
            "optimization_results",
            "clusters",
            "consolidated_memories",
            "memories_to_remove",
            "project_counts",
            "final_count",
            "consolidated",
            "sorted_memories",
            "excess_memories"
          ]
        },
        {
          "name": "load_memories_from_supabase",
          "parameters": [
            "self"
          ],
          "lines": 38,
          "complexity": 5,
          "calls": [
            "execute",
            "info",
            "warning",
            "MemoryVector",
            "error",
            "select",
            "generate_embedding",
            "get",
            "get",
            "get",
            "get",
            "fromisoformat",
            "fromisoformat",
            "get",
            "get",
            "get",
            "len",
            "table",
            "get"
          ],
          "variables": [
            "response",
            "memory"
          ]
        },
        {
          "name": "save_optimized_memories_to_supabase",
          "parameters": [
            "self"
          ],
          "lines": 35,
          "complexity": 4,
          "calls": [
            "execute",
            "values",
            "info",
            "warning",
            "execute",
            "error",
            "neq",
            "isoformat",
            "isoformat",
            "insert",
            "len",
            "delete",
            "table",
            "table"
          ],
          "variables": [
            "memory_data"
          ]
        },
        {
          "name": "generate_optimization_report",
          "parameters": [
            "self",
            "results"
          ],
          "lines": 56,
          "complexity": 8,
          "calls": [
            "values",
            "items",
            "values",
            "items",
            "values",
            "items",
            "items",
            "len",
            "get",
            "get",
            "get",
            "len",
            "join",
            "join"
          ],
          "variables": [
            "report",
            "project_distribution",
            "crew_distribution",
            "type_distribution"
          ]
        }
      ],
      "variables": [
        "logger",
        "optimizer",
        "sample_memories",
        "results",
        "report",
        "timestamp",
        "report_file",
        "hash_obj",
        "hash_bytes",
        "embedding",
        "score",
        "recency_days",
        "recency_factor",
        "access_factor",
        "content_length",
        "length_factor",
        "tag_factor",
        "type_weights",
        "type_factor",
        "similar_memories",
        "base_memory",
        "consolidated_content",
        "weights",
        "total_weight",
        "consolidated_memory",
        "type_groups",
        "consolidated_parts",
        "clusters",
        "processed_memories",
        "optimization_results",
        "clusters",
        "consolidated_memories",
        "memories_to_remove",
        "project_counts",
        "final_count",
        "report",
        "project_distribution",
        "crew_distribution",
        "type_distribution",
        "memory",
        "vec1",
        "vec2",
        "dot_product",
        "norm1",
        "norm2",
        "threshold",
        "similarity",
        "weighted_embedding",
        "weighted_embedding",
        "key_points",
        "similar_memories",
        "similar_mem_ids",
        "response",
        "response",
        "val",
        "weighted_sum",
        "contents",
        "summary",
        "implementations",
        "numbered_contents",
        "cluster_memories",
        "consolidated",
        "sorted_memories",
        "excess_memories",
        "memory",
        "memory_data",
        "cluster_id",
        "embeddings",
        "centroid",
        "consolidated_content",
        "representative",
        "cluster"
      ],
      "imports": [
        "os",
        "json",
        "hashlib",
        "numpy",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "logging"
      ],
      "classes": [
        "MemoryVector",
        "MemoryCluster",
        "MCPMemoryOptimizationSystem"
      ],
      "total_lines": 601,
      "code_lines": 445,
      "complexity_score": 67,
      "purpose": "General utility script"
    },
    "scripts/python/research_phase_execution_plan.py": {
      "file_name": "research_phase_execution_plan.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 80,
          "complexity": 10,
          "calls": [
            "print",
            "print",
            "print",
            "ResearchPhaseExecutionPlan",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "generate_execution_plan",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "items",
            "print",
            "open",
            "dump",
            "print",
            "print",
            "int",
            "len",
            "timestamp",
            "title",
            "title",
            "title",
            "len",
            "len",
            "len",
            "len",
            "title",
            "title",
            "title",
            "title",
            "now",
            "replace",
            "replace",
            "replace",
            "replace",
            "replace",
            "replace"
          ],
          "variables": [
            "execution_plan",
            "plan",
            "output_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 158,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_execution_plan",
          "parameters": [
            "self"
          ],
          "lines": 61,
          "complexity": 4,
          "calls": [
            "items",
            "_generate_overall_deliverables",
            "_generate_success_metrics",
            "_generate_risk_mitigation",
            "_generate_next_steps",
            "isoformat",
            "items",
            "_generate_phase_tasks",
            "_generate_phase_milestones",
            "_generate_success_criteria",
            "replace",
            "int",
            "now",
            "timestamp",
            "replace",
            "now"
          ],
          "variables": [
            "execution_plan",
            "phase_plan",
            "phase_key"
          ]
        },
        {
          "name": "_generate_phase_tasks",
          "parameters": [
            "self",
            "phase_id",
            "phase_config"
          ],
          "lines": 116,
          "complexity": 5,
          "calls": [],
          "variables": [
            "tasks",
            "tasks",
            "tasks",
            "tasks",
            "tasks"
          ]
        },
        {
          "name": "_generate_phase_milestones",
          "parameters": [
            "self",
            "phase_id",
            "phase_config"
          ],
          "lines": 78,
          "complexity": 5,
          "calls": [],
          "variables": [
            "milestones",
            "milestones",
            "milestones",
            "milestones",
            "milestones"
          ]
        },
        {
          "name": "_generate_success_criteria",
          "parameters": [
            "self",
            "phase_id",
            "phase_config"
          ],
          "lines": 36,
          "complexity": 5,
          "calls": [],
          "variables": []
        },
        {
          "name": "_generate_overall_deliverables",
          "parameters": [
            "self"
          ],
          "lines": 46,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_generate_success_metrics",
          "parameters": [
            "self"
          ],
          "lines": 28,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_generate_risk_mitigation",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_generate_next_steps",
          "parameters": [
            "self"
          ],
          "lines": 12,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "execution_plan",
        "plan",
        "output_file",
        "execution_plan",
        "tasks",
        "milestones",
        "phase_plan",
        "tasks",
        "milestones",
        "phase_key",
        "tasks",
        "milestones",
        "tasks",
        "milestones",
        "tasks",
        "milestones"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "ResearchPhaseExecutionPlan"
      ],
      "total_lines": 663,
      "code_lines": 602,
      "complexity_score": 25,
      "purpose": "General utility script"
    },
    "scripts/python/repository_optimization_analysis.py": {
      "file_name": "repository_optimization_analysis.py",
      "file_type": "py",
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "analyze_large_files",
          "parameters": [
            "self"
          ],
          "lines": 58,
          "complexity": 12,
          "calls": [
            "print",
            "run",
            "split",
            "len",
            "len",
            "strip",
            "print",
            "startswith",
            "split",
            "run",
            "split",
            "run",
            "split",
            "print",
            "len",
            "append",
            "strip",
            "append",
            "strip",
            "append",
            "_categorize_file",
            "_get_directory_reason"
          ],
          "variables": [
            "large_files",
            "unnecessary_dirs",
            "patterns",
            "result",
            "parts",
            "result",
            "result",
            "size",
            "filepath"
          ]
        },
        {
          "name": "_categorize_file",
          "parameters": [
            "self",
            "filepath"
          ],
          "lines": 16,
          "complexity": 9,
          "calls": [
            "endswith",
            "endswith",
            "endswith",
            "endswith",
            "endswith"
          ],
          "variables": []
        },
        {
          "name": "_get_directory_reason",
          "parameters": [
            "self",
            "pattern"
          ],
          "lines": 11,
          "complexity": 1,
          "calls": [
            "get"
          ],
          "variables": [
            "reasons"
          ]
        },
        {
          "name": "convene_observation_lounge",
          "parameters": [
            "self",
            "analysis_data"
          ],
          "lines": 35,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "_captain_picard_analysis",
            "_commander_data_analysis",
            "_lt_la_forge_analysis",
            "_dr_crusher_analysis",
            "_counselor_troi_analysis"
          ],
          "variables": [
            "crew_analysis"
          ]
        },
        {
          "name": "_captain_picard_analysis",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 11,
          "complexity": 3,
          "calls": [],
          "variables": [
            "large_files",
            "unnecessary_dirs"
          ]
        },
        {
          "name": "_commander_data_analysis",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 12,
          "complexity": 3,
          "calls": [
            "items",
            "get"
          ],
          "variables": [
            "categories",
            "analysis",
            "file_type"
          ]
        },
        {
          "name": "_lt_la_forge_analysis",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "len",
            "len"
          ],
          "variables": [
            "archive_files",
            "cache_files"
          ]
        },
        {
          "name": "_dr_crusher_analysis",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "len",
            "len"
          ],
          "variables": [
            "critical_files",
            "safe_to_remove"
          ]
        },
        {
          "name": "_counselor_troi_analysis",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 15,
          "complexity": 3,
          "calls": [
            "len",
            "len"
          ],
          "variables": [
            "total_files",
            "risk_level",
            "recommendation",
            "risk_level",
            "recommendation",
            "risk_level",
            "recommendation"
          ]
        },
        {
          "name": "create_optimization_plan",
          "parameters": [
            "self",
            "analysis_data",
            "crew_insights"
          ],
          "lines": 52,
          "complexity": 10,
          "calls": [
            "print",
            "print",
            "append",
            "append",
            "append",
            "append"
          ],
          "variables": [
            "plan"
          ]
        },
        {
          "name": "execute_optimization_plan",
          "parameters": [
            "self",
            "plan"
          ],
          "lines": 42,
          "complexity": 10,
          "calls": [
            "print",
            "print",
            "items",
            "startswith",
            "print",
            "title",
            "exists",
            "isfile",
            "isdir",
            "print",
            "print",
            "append",
            "print",
            "replace",
            "getsize",
            "run",
            "remove"
          ],
          "variables": [
            "results",
            "error_msg",
            "size"
          ]
        },
        {
          "name": "generate_optimization_report",
          "parameters": [
            "self",
            "analysis_data",
            "crew_insights",
            "optimization_plan",
            "execution_results"
          ],
          "lines": 56,
          "complexity": 5,
          "calls": [
            "items",
            "strftime",
            "len",
            "len",
            "len",
            "len",
            "len",
            "title",
            "now",
            "replace"
          ],
          "variables": [
            "report"
          ]
        },
        {
          "name": "run_complete_optimization",
          "parameters": [
            "self"
          ],
          "lines": 40,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "print",
            "analyze_large_files",
            "convene_observation_lounge",
            "create_optimization_plan",
            "execute_optimization_plan",
            "generate_optimization_report",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "write"
          ],
          "variables": [
            "analysis_data",
            "crew_insights",
            "optimization_plan",
            "execution_results",
            "report"
          ]
        }
      ],
      "variables": [
        "analyzer",
        "results",
        "large_files",
        "unnecessary_dirs",
        "patterns",
        "reasons",
        "crew_analysis",
        "large_files",
        "unnecessary_dirs",
        "categories",
        "analysis",
        "archive_files",
        "cache_files",
        "critical_files",
        "safe_to_remove",
        "total_files",
        "plan",
        "results",
        "report",
        "analysis_data",
        "crew_insights",
        "optimization_plan",
        "execution_results",
        "report",
        "result",
        "file_type",
        "risk_level",
        "recommendation",
        "risk_level",
        "recommendation",
        "risk_level",
        "recommendation",
        "parts",
        "result",
        "result",
        "size",
        "filepath",
        "error_msg",
        "size"
      ],
      "imports": [
        "os",
        "json",
        "subprocess",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "sys",
        "enhanced_unified_router.EnhancedUnifiedRouter",
        "crew_coordinator.ObservationLoungeCoordinator"
      ],
      "classes": [
        "RepositoryOptimizationAnalyzer"
      ],
      "total_lines": 405,
      "code_lines": 313,
      "complexity_score": 53,
      "purpose": "General utility script"
    },
    "scripts/python/business_operations_legal_system.py": {
      "file_name": "business_operations_legal_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 105,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "print",
            "BusinessOperationsLegalSystem",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "generate_comprehensive_business_plan",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "len",
            "timestamp",
            "title",
            "title",
            "len",
            "title",
            "now",
            "replace"
          ],
          "variables": [
            "business_ops",
            "business_name",
            "target_markets",
            "business_plan",
            "llc_setup",
            "payment_integration",
            "business_model",
            "financial",
            "timeline",
            "output_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 108,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "generate_llc_setup_plan",
          "parameters": [
            "self",
            "business_name",
            "state"
          ],
          "lines": 73,
          "complexity": 3,
          "calls": [
            "items",
            "append",
            "randint",
            "randint",
            "lower"
          ],
          "variables": [
            "setup_plan",
            "step"
          ]
        },
        {
          "name": "generate_payment_integration_plan",
          "parameters": [
            "self",
            "target_markets"
          ],
          "lines": 65,
          "complexity": 6,
          "calls": [
            "set",
            "list",
            "set",
            "list",
            "append",
            "update",
            "randint",
            "randint",
            "update",
            "lower"
          ],
          "variables": [
            "integration_plan",
            "all_features",
            "all_compliance",
            "integration_step"
          ]
        },
        {
          "name": "generate_business_model_analysis",
          "parameters": [
            "self",
            "target_markets"
          ],
          "lines": 83,
          "complexity": 5,
          "calls": [
            "set",
            "list",
            "update",
            "randint",
            "randint",
            "randint",
            "randint",
            "randint",
            "randint",
            "randint",
            "randint"
          ],
          "variables": [
            "analysis",
            "all_models"
          ]
        },
        {
          "name": "generate_comprehensive_business_plan",
          "parameters": [
            "self",
            "business_name",
            "target_markets"
          ],
          "lines": 31,
          "complexity": 1,
          "calls": [
            "isoformat",
            "generate_llc_setup_plan",
            "generate_payment_integration_plan",
            "generate_business_model_analysis",
            "now"
          ],
          "variables": [
            "business_plan"
          ]
        }
      ],
      "variables": [
        "business_ops",
        "business_name",
        "target_markets",
        "business_plan",
        "llc_setup",
        "payment_integration",
        "business_model",
        "financial",
        "timeline",
        "output_file",
        "setup_plan",
        "integration_plan",
        "all_features",
        "all_compliance",
        "analysis",
        "all_models",
        "business_plan",
        "integration_step",
        "step"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "random"
      ],
      "classes": [
        "BusinessOperationsLegalSystem"
      ],
      "total_lines": 486,
      "code_lines": 411,
      "complexity_score": 16,
      "purpose": "General utility script"
    },
    "scripts/python/advanced_ai_agent_development_system.py": {
      "file_name": "advanced_ai_agent_development_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 33,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "print",
            "AdvancedAIAgentOrchestrator",
            "create_advanced_agent_system",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "len",
            "timestamp",
            "get",
            "now"
          ],
          "variables": [
            "orchestrator",
            "system_result",
            "config_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "agent_id",
            "specialization",
            "enhanced_prompts_system"
          ],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "develop_capabilities",
          "parameters": [
            "self"
          ],
          "lines": 32,
          "complexity": 1,
          "calls": [
            "list",
            "keys"
          ],
          "variables": [
            "capabilities"
          ]
        },
        {
          "name": "learn_from_interactions",
          "parameters": [
            "self",
            "interaction_data"
          ],
          "lines": 22,
          "complexity": 4,
          "calls": [
            "append",
            "get",
            "isoformat",
            "append",
            "append",
            "append",
            "now"
          ],
          "variables": [
            "learning_result"
          ]
        },
        {
          "name": "execute_advanced_task",
          "parameters": [
            "self",
            "task"
          ],
          "lines": 47,
          "complexity": 4,
          "calls": [
            "get",
            "isoformat",
            "get",
            "generate_enhanced_prompt",
            "append",
            "append",
            "get",
            "generate_enhanced_prompt",
            "append",
            "append",
            "now",
            "get",
            "generate_enhanced_prompt",
            "append",
            "append"
          ],
          "variables": [
            "task_result",
            "prompt",
            "prompt",
            "prompt"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "initialize_enhanced_prompts",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 2,
          "calls": [
            "EnhancedAIPromptsSystem"
          ],
          "variables": []
        },
        {
          "name": "create_advanced_agents",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 3,
          "calls": [
            "enumerate",
            "AdvancedAIAgent",
            "develop_capabilities",
            "len"
          ],
          "variables": [
            "agent_specializations",
            "created_agents",
            "agent_id",
            "agent",
            "capabilities"
          ]
        },
        {
          "name": "orchestrate_advanced_workflow",
          "parameters": [
            "self",
            "workflow_type"
          ],
          "lines": 89,
          "complexity": 16,
          "calls": [
            "isoformat",
            "len",
            "len",
            "len",
            "len",
            "items",
            "set",
            "set",
            "int",
            "now",
            "execute_advanced_task",
            "append",
            "extend",
            "extend",
            "extend",
            "items",
            "timestamp",
            "execute_advanced_task",
            "append",
            "extend",
            "extend",
            "extend",
            "items",
            "execute_advanced_task",
            "append",
            "extend",
            "extend",
            "extend",
            "now"
          ],
          "variables": [
            "workflow_result",
            "agents_to_use",
            "agent",
            "agents_to_use",
            "task",
            "result",
            "agent",
            "agents_to_use",
            "agent",
            "task",
            "result",
            "agent",
            "agent",
            "task",
            "result",
            "agent"
          ]
        },
        {
          "name": "develop_self_improving_capabilities",
          "parameters": [
            "self"
          ],
          "lines": 46,
          "complexity": 2,
          "calls": [
            "items",
            "extend",
            "len"
          ],
          "variables": [
            "self_improvement"
          ]
        },
        {
          "name": "create_advanced_agent_system",
          "parameters": [
            "self"
          ],
          "lines": 52,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "initialize_enhanced_prompts",
            "print",
            "print",
            "create_advanced_agents",
            "print",
            "print",
            "develop_self_improving_capabilities",
            "print",
            "print",
            "print",
            "orchestrate_advanced_workflow",
            "print",
            "len",
            "sum",
            "int",
            "len",
            "timestamp",
            "values",
            "now"
          ],
          "variables": [
            "prompts_init",
            "agents_creation",
            "self_improvement",
            "workflow_types",
            "workflow_results",
            "system_summary",
            "result"
          ]
        }
      ],
      "variables": [
        "orchestrator",
        "system_result",
        "capabilities",
        "learning_result",
        "task_result",
        "agent_specializations",
        "created_agents",
        "workflow_result",
        "self_improvement",
        "prompts_init",
        "agents_creation",
        "self_improvement",
        "workflow_types",
        "workflow_results",
        "system_summary",
        "config_file",
        "prompt",
        "agent_id",
        "agent",
        "capabilities",
        "agents_to_use",
        "result",
        "prompt",
        "agent",
        "agents_to_use",
        "prompt",
        "task",
        "result",
        "agent",
        "agents_to_use",
        "agent",
        "task",
        "result",
        "agent",
        "agent",
        "task",
        "result",
        "agent"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "enhanced_ai_prompts_system.EnhancedAIPromptsSystem"
      ],
      "classes": [
        "AdvancedAIAgent",
        "AdvancedAIAgentOrchestrator"
      ],
      "total_lines": 409,
      "code_lines": 323,
      "complexity_score": 30,
      "purpose": "General utility script"
    },
    "scripts/python/simple_turborepo_research_system.py": {
      "file_name": "simple_turborepo_research_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 24,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "SimpleTurborepoResearchSystem",
            "print",
            "items",
            "print",
            "conduct_crew_research",
            "print",
            "generate_research_report",
            "print",
            "save_research_data",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len"
          ],
          "variables": [
            "research_system",
            "report_file",
            "data_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "_initialize_crew",
            "_load_turborepo_knowledge"
          ],
          "variables": []
        },
        {
          "name": "_initialize_crew",
          "parameters": [
            "self"
          ],
          "lines": 58,
          "complexity": 1,
          "calls": [
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember"
          ],
          "variables": []
        },
        {
          "name": "_load_turborepo_knowledge",
          "parameters": [
            "self"
          ],
          "lines": 54,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "analyze_for_crew_member",
          "parameters": [
            "self",
            "crew_member"
          ],
          "lines": 239,
          "complexity": 10,
          "calls": [
            "extend",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "extend",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight",
            "TurborepoInsight"
          ],
          "variables": [
            "insights"
          ]
        },
        {
          "name": "conduct_crew_research",
          "parameters": [
            "self"
          ],
          "lines": 11,
          "complexity": 2,
          "calls": [
            "info",
            "values",
            "info",
            "info",
            "analyze_for_crew_member",
            "extend",
            "len"
          ],
          "variables": [
            "insights"
          ]
        },
        {
          "name": "generate_research_report",
          "parameters": [
            "self"
          ],
          "lines": 130,
          "complexity": 9,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "values",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "append",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "write",
            "join",
            "now"
          ],
          "variables": [
            "timestamp",
            "report_filename",
            "crew_insights"
          ]
        },
        {
          "name": "save_research_data",
          "parameters": [
            "self"
          ],
          "lines": 28,
          "complexity": 1,
          "calls": [
            "strftime",
            "info",
            "isoformat",
            "open",
            "dump",
            "now",
            "now",
            "items"
          ],
          "variables": [
            "timestamp",
            "data_filename",
            "research_data"
          ]
        }
      ],
      "variables": [
        "research_system",
        "report_file",
        "data_file",
        "insights",
        "timestamp",
        "report_filename",
        "timestamp",
        "data_filename",
        "research_data",
        "insights",
        "crew_insights"
      ],
      "imports": [
        "json",
        "logging",
        "urllib.request",
        "urllib.parse",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "dataclasses.dataclass",
        "re"
      ],
      "classes": [
        "CrewMember",
        "TurborepoInsight",
        "SimpleTurborepoResearchSystem"
      ],
      "total_lines": 599,
      "code_lines": 521,
      "complexity_score": 21,
      "purpose": "General utility script"
    },
    "scripts/python/agile_sprint_dashboard_system.py": {
      "file_name": "agile_sprint_dashboard_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 88,
          "complexity": 6,
          "calls": [
            "print",
            "print",
            "print",
            "AgileSprintDashboard",
            "print",
            "items",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "generate_multi_project_dashboard",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "timestamp",
            "title",
            "now",
            "replace"
          ],
          "variables": [
            "dashboard",
            "config",
            "multi_dashboard",
            "metrics",
            "output_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 109,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "create_sprint",
          "parameters": [
            "self",
            "project_id",
            "sprint_number"
          ],
          "lines": 65,
          "complexity": 2,
          "calls": [
            "_generate_sprint_tasks",
            "isoformat",
            "isoformat",
            "now",
            "now",
            "timedelta"
          ],
          "variables": [
            "project",
            "sprint",
            "sprint"
          ]
        },
        {
          "name": "_generate_sprint_tasks",
          "parameters": [
            "self",
            "sprint",
            "project"
          ],
          "lines": 62,
          "complexity": 2,
          "calls": [
            "items",
            "_assign_crew_to_tasks"
          ],
          "variables": [
            "planning_tasks",
            "development_tasks",
            "testing_tasks",
            "review_tasks",
            "retrospective_tasks"
          ]
        },
        {
          "name": "_assign_crew_to_tasks",
          "parameters": [
            "self",
            "tasks",
            "crew_assignments"
          ],
          "lines": 25,
          "complexity": 16,
          "calls": [
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower",
            "lower"
          ],
          "variables": [
            "task_assignments"
          ]
        },
        {
          "name": "update_sprint_progress",
          "parameters": [
            "self",
            "sprint_id",
            "phase",
            "task",
            "status"
          ],
          "lines": 12,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "generate_sprint_dashboard",
          "parameters": [
            "self",
            "project_id"
          ],
          "lines": 46,
          "complexity": 3,
          "calls": [
            "range",
            "create_sprint",
            "append"
          ],
          "variables": [
            "project",
            "sprints",
            "dashboard",
            "sprint"
          ]
        },
        {
          "name": "generate_multi_project_dashboard",
          "parameters": [
            "self"
          ],
          "lines": 68,
          "complexity": 3,
          "calls": [
            "keys",
            "len",
            "isoformat",
            "len",
            "generate_sprint_dashboard",
            "append",
            "len",
            "int",
            "now",
            "timestamp",
            "now"
          ],
          "variables": [
            "multi_project_dashboard",
            "total_velocity",
            "total_quality",
            "total_satisfaction",
            "total_ai_utilization",
            "num_projects",
            "project_dashboard"
          ]
        }
      ],
      "variables": [
        "dashboard",
        "config",
        "multi_dashboard",
        "metrics",
        "output_file",
        "project",
        "sprint",
        "sprint",
        "planning_tasks",
        "development_tasks",
        "testing_tasks",
        "review_tasks",
        "retrospective_tasks",
        "task_assignments",
        "project",
        "sprints",
        "dashboard",
        "multi_project_dashboard",
        "total_velocity",
        "total_quality",
        "total_satisfaction",
        "total_ai_utilization",
        "num_projects",
        "sprint",
        "project_dashboard"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "random"
      ],
      "classes": [
        "AgileSprintDashboard"
      ],
      "total_lines": 498,
      "code_lines": 423,
      "complexity_score": 27,
      "purpose": "General utility script"
    },
    "scripts/python/test_youtube_scraper_integration.py": {
      "file_name": "test_youtube_scraper_integration.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 39,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "print",
            "YouTubeScraperTester",
            "run_all_tests",
            "print",
            "print",
            "print",
            "exit",
            "open",
            "dump",
            "print",
            "exit",
            "print",
            "exit",
            "print",
            "int",
            "getenv",
            "timestamp",
            "now"
          ],
          "variables": [
            "required_env_vars",
            "missing_vars",
            "tester",
            "report",
            "report_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "YouTubeScraperCrewIntegration"
          ],
          "variables": []
        },
        {
          "name": "run_all_tests",
          "parameters": [
            "self"
          ],
          "lines": 28,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "test_crew_member_listing",
            "test_single_video_analysis",
            "test_batch_video_analysis",
            "test_invalid_url_handling",
            "test_duplicate_processing_prevention",
            "test_analysis_history_retrieval",
            "test_crew_member_perspectives",
            "generate_test_report"
          ],
          "variables": []
        },
        {
          "name": "test_crew_member_listing",
          "parameters": [
            "self"
          ],
          "lines": 34,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "list_crew_members",
            "print",
            "items",
            "append",
            "print",
            "append",
            "print",
            "append",
            "print",
            "print",
            "str",
            "str"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "test_single_video_analysis",
          "parameters": [
            "self"
          ],
          "lines": 40,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "request_youtube_analysis",
            "print",
            "print",
            "print",
            "print",
            "append",
            "print",
            "append",
            "print",
            "append",
            "str",
            "str"
          ],
          "variables": [
            "video_url",
            "crew_member",
            "result"
          ]
        },
        {
          "name": "test_batch_video_analysis",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "batch_analyze_videos",
            "print",
            "print",
            "print",
            "print",
            "append",
            "print",
            "append",
            "print",
            "append",
            "len",
            "str",
            "str"
          ],
          "variables": [
            "crew_member",
            "analysis_focus",
            "result"
          ]
        },
        {
          "name": "test_invalid_url_handling",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "append",
            "print",
            "request_youtube_analysis",
            "print",
            "append",
            "print",
            "print",
            "append",
            "str",
            "str"
          ],
          "variables": [
            "invalid_urls",
            "crew_member",
            "result"
          ]
        },
        {
          "name": "test_duplicate_processing_prevention",
          "parameters": [
            "self"
          ],
          "lines": 43,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "request_youtube_analysis",
            "get",
            "print",
            "append",
            "print",
            "append",
            "print",
            "append",
            "print",
            "append",
            "str",
            "str"
          ],
          "variables": [
            "video_url",
            "crew_member",
            "result"
          ]
        },
        {
          "name": "test_analysis_history_retrieval",
          "parameters": [
            "self"
          ],
          "lines": 32,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "get_crew_analysis_history",
            "print",
            "append",
            "print",
            "append",
            "print",
            "append",
            "str",
            "str"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "test_crew_member_perspectives",
          "parameters": [
            "self"
          ],
          "lines": 31,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "append",
            "print",
            "request_youtube_analysis",
            "print",
            "append",
            "print",
            "print",
            "str",
            "len",
            "str"
          ],
          "variables": [
            "video_url",
            "crew_members",
            "result"
          ]
        },
        {
          "name": "generate_test_report",
          "parameters": [
            "self"
          ],
          "lines": 44,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "print",
            "len",
            "len",
            "len",
            "len",
            "len",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "print",
            "isoformat",
            "now"
          ],
          "variables": [
            "total_tests",
            "passed_tests",
            "failed_tests",
            "error_tests",
            "warning_tests",
            "success_rate",
            "status_icon"
          ]
        }
      ],
      "variables": [
        "required_env_vars",
        "missing_vars",
        "tester",
        "report",
        "report_file",
        "total_tests",
        "passed_tests",
        "failed_tests",
        "error_tests",
        "warning_tests",
        "success_rate",
        "result",
        "video_url",
        "crew_member",
        "result",
        "crew_member",
        "analysis_focus",
        "result",
        "invalid_urls",
        "crew_member",
        "video_url",
        "crew_member",
        "result",
        "result",
        "video_url",
        "crew_members",
        "status_icon",
        "result",
        "result"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "requests",
        "time",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "datetime.datetime",
        "youtube_scraper_crew_integration.YouTubeScraperCrewIntegration"
      ],
      "classes": [
        "YouTubeScraperTester"
      ],
      "total_lines": 417,
      "code_lines": 331,
      "complexity_score": 30,
      "purpose": "Testing and validation"
    },
    "scripts/python/crew_business_readiness_consensus.py": {
      "file_name": "crew_business_readiness_consensus.py",
      "file_type": "py",
      "functions": [
        {
          "name": "simulate_crew_consensus",
          "parameters": [],
          "lines": 271,
          "complexity": 1,
          "calls": [
            "now",
            "isoformat",
            "int",
            "isoformat",
            "timestamp"
          ],
          "variables": [
            "timestamp",
            "session_id",
            "crew_recommendations",
            "overall_consensus"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 83,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "simulate_crew_consensus",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "timestamp",
            "join",
            "now"
          ],
          "variables": [
            "consensus_results",
            "overall",
            "timeline",
            "risk",
            "success",
            "output_file"
          ]
        }
      ],
      "variables": [
        "timestamp",
        "session_id",
        "crew_recommendations",
        "overall_consensus",
        "consensus_results",
        "overall",
        "timeline",
        "risk",
        "success",
        "output_file"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [],
      "total_lines": 369,
      "code_lines": 338,
      "complexity_score": 4,
      "purpose": "General utility script"
    },
    "scripts/python/crew_coordinator.py": {
      "file_name": "crew_coordinator.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 22,
          "complexity": 2,
          "calls": [
            "loads",
            "ObservationLoungeCoordinator",
            "coordinate_observation_lounge",
            "print",
            "read",
            "dumps",
            "print",
            "exit",
            "str",
            "isoformat",
            "dumps",
            "now"
          ],
          "variables": [
            "input_data",
            "coordinator",
            "result",
            "error_result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 63,
          "complexity": 2,
          "calls": [
            "getenv",
            "getenv",
            "getenv",
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "coordinate_observation_lounge",
          "parameters": [
            "self",
            "session_data"
          ],
          "lines": 47,
          "complexity": 3,
          "calls": [
            "get",
            "get",
            "get",
            "get",
            "_select_crew_members",
            "_conduct_crew_session",
            "_synthesize_crew_insights",
            "_generate_recommendations",
            "_generate_next_actions",
            "_handle_youtube_analysis_request",
            "get",
            "len",
            "len",
            "isoformat",
            "str",
            "get",
            "isoformat",
            "now",
            "now",
            "int",
            "timestamp",
            "now"
          ],
          "variables": [
            "topic",
            "discussion_type",
            "crew_selection",
            "coordination_method",
            "selected_crew",
            "crew_insights",
            "synthesis",
            "recommendations",
            "next_actions"
          ]
        },
        {
          "name": "_handle_youtube_analysis_request",
          "parameters": [
            "self",
            "session_data"
          ],
          "lines": 51,
          "complexity": 4,
          "calls": [
            "get",
            "get",
            "get",
            "YouTubeScraperCrewIntegration",
            "request_youtube_analysis",
            "get",
            "get",
            "len",
            "isoformat",
            "get",
            "now",
            "str",
            "int",
            "timestamp",
            "now"
          ],
          "variables": [
            "youtube_data",
            "crew_member_id",
            "video_url",
            "analysis_focus",
            "scraper",
            "result"
          ]
        },
        {
          "name": "_select_crew_members",
          "parameters": [
            "self",
            "crew_selection",
            "discussion_type"
          ],
          "lines": 16,
          "complexity": 6,
          "calls": [
            "list",
            "isinstance",
            "keys"
          ],
          "variables": []
        },
        {
          "name": "_conduct_crew_session",
          "parameters": [
            "self",
            "topic",
            "selected_crew",
            "method"
          ],
          "lines": 28,
          "complexity": 3,
          "calls": [
            "_get_crew_member_insight",
            "str"
          ],
          "variables": [
            "crew_insights",
            "crew_member",
            "insight"
          ]
        },
        {
          "name": "_get_crew_member_insight",
          "parameters": [
            "self",
            "topic",
            "crew_member",
            "method"
          ],
          "lines": 29,
          "complexity": 4,
          "calls": [],
          "variables": [
            "prompt"
          ]
        },
        {
          "name": "_synthesize_crew_insights",
          "parameters": [
            "self",
            "crew_insights",
            "topic"
          ],
          "lines": 22,
          "complexity": 2,
          "calls": [
            "list",
            "_extract_key_themes",
            "_identify_consensus",
            "_identify_divergence",
            "values",
            "set",
            "len",
            "len",
            "set"
          ],
          "variables": [
            "successful_insights",
            "synthesis"
          ]
        },
        {
          "name": "_extract_key_themes",
          "parameters": [
            "self",
            "insights"
          ],
          "lines": 14,
          "complexity": 6,
          "calls": [
            "list",
            "lower",
            "append",
            "lower",
            "append",
            "lower",
            "append",
            "lower",
            "append",
            "set"
          ],
          "variables": [
            "themes"
          ]
        },
        {
          "name": "_identify_consensus",
          "parameters": [
            "self",
            "insights"
          ],
          "lines": 7,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_identify_divergence",
          "parameters": [
            "self",
            "insights"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_generate_recommendations",
          "parameters": [
            "self",
            "synthesis",
            "crew_insights"
          ],
          "lines": 25,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_generate_next_actions",
          "parameters": [
            "self",
            "synthesis",
            "crew_insights"
          ],
          "lines": 22,
          "complexity": 1,
          "calls": [],
          "variables": []
        }
      ],
      "variables": [
        "crew_insights",
        "prompt",
        "successful_insights",
        "synthesis",
        "themes",
        "input_data",
        "coordinator",
        "result",
        "topic",
        "discussion_type",
        "crew_selection",
        "coordination_method",
        "selected_crew",
        "crew_insights",
        "synthesis",
        "recommendations",
        "next_actions",
        "youtube_data",
        "crew_member_id",
        "video_url",
        "analysis_focus",
        "scraper",
        "result",
        "crew_member",
        "error_result",
        "insight"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "requests",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "datetime.datetime",
        "youtube_scraper_crew_integration.YouTubeScraperCrewIntegration"
      ],
      "classes": [
        "ObservationLoungeCoordinator"
      ],
      "total_lines": 382,
      "code_lines": 315,
      "complexity_score": 28,
      "purpose": "General utility script"
    },
    "scripts/python/phase3_alex_ai_integration.py": {
      "file_name": "phase3_alex_ai_integration.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 25,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "Phase3AlexAIIntegration",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "execute_phase3",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "integration_system"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "log_step",
          "parameters": [
            "self",
            "step",
            "status",
            "details"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "append",
            "isoformat",
            "info",
            "error",
            "append",
            "info",
            "now"
          ],
          "variables": [
            "log_entry"
          ]
        },
        {
          "name": "run_command",
          "parameters": [
            "self",
            "command",
            "cwd"
          ],
          "lines": 24,
          "complexity": 5,
          "calls": [
            "run",
            "str"
          ],
          "variables": [
            "result",
            "cwd"
          ]
        },
        {
          "name": "integrate_crew_coordination",
          "parameters": [
            "self"
          ],
          "lines": 161,
          "complexity": 1,
          "calls": [
            "log_step",
            "mkdir",
            "mkdir",
            "log_step",
            "open",
            "dump",
            "open",
            "write",
            "open",
            "dump"
          ],
          "variables": [
            "crew_dir",
            "crew_package_json",
            "crew_coordinator",
            "src_dir",
            "tsconfig"
          ]
        },
        {
          "name": "setup_n8n_workflows",
          "parameters": [
            "self"
          ],
          "lines": 60,
          "complexity": 1,
          "calls": [
            "log_step",
            "mkdir",
            "log_step",
            "open",
            "dump"
          ],
          "variables": [
            "n8n_workflow",
            "workflows_dir"
          ]
        },
        {
          "name": "configure_mcp_tools_sharing",
          "parameters": [
            "self"
          ],
          "lines": 107,
          "complexity": 1,
          "calls": [
            "log_step",
            "mkdir",
            "mkdir",
            "log_step",
            "open",
            "dump",
            "open",
            "write"
          ],
          "variables": [
            "mcp_dir",
            "mcp_config",
            "mcp_query",
            "src_dir"
          ]
        },
        {
          "name": "implement_memory_optimization",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 1,
          "calls": [
            "log_step",
            "log_step",
            "open",
            "load",
            "open",
            "dump"
          ],
          "variables": [
            "turbo_json_path",
            "turbo_config"
          ]
        },
        {
          "name": "setup_automated_testing",
          "parameters": [
            "self"
          ],
          "lines": 54,
          "complexity": 1,
          "calls": [
            "log_step",
            "mkdir",
            "log_step",
            "open",
            "dump",
            "open",
            "write",
            "dumps"
          ],
          "variables": [
            "test_config",
            "testing_dir",
            "jest_config"
          ]
        },
        {
          "name": "configure_deployment_pipelines",
          "parameters": [
            "self"
          ],
          "lines": 68,
          "complexity": 1,
          "calls": [
            "log_step",
            "log_step",
            "open",
            "write"
          ],
          "variables": [
            "workflow_path",
            "alex_ai_workflow"
          ]
        },
        {
          "name": "create_monitoring_alerting",
          "parameters": [
            "self"
          ],
          "lines": 129,
          "complexity": 1,
          "calls": [
            "log_step",
            "mkdir",
            "mkdir",
            "log_step",
            "open",
            "dump",
            "open",
            "write"
          ],
          "variables": [
            "monitoring_dir",
            "monitoring_config",
            "monitor_script",
            "src_dir"
          ]
        },
        {
          "name": "test_integrations",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "log_step",
            "run_command",
            "run_command",
            "run_command",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step"
          ],
          "variables": []
        },
        {
          "name": "generate_phase3_report",
          "parameters": [
            "self"
          ],
          "lines": 62,
          "complexity": 5,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "now",
            "len"
          ],
          "variables": [
            "timestamp",
            "report_filename"
          ]
        },
        {
          "name": "execute_phase3",
          "parameters": [
            "self"
          ],
          "lines": 36,
          "complexity": 5,
          "calls": [
            "info",
            "generate_phase3_report",
            "info",
            "len",
            "info",
            "warning",
            "step_function",
            "len",
            "error",
            "log_step",
            "error",
            "len",
            "str"
          ],
          "variables": [
            "steps",
            "report_file",
            "success"
          ]
        }
      ],
      "variables": [
        "integration_system",
        "log_entry",
        "crew_dir",
        "crew_package_json",
        "crew_coordinator",
        "src_dir",
        "tsconfig",
        "n8n_workflow",
        "workflows_dir",
        "mcp_dir",
        "mcp_config",
        "mcp_query",
        "src_dir",
        "turbo_json_path",
        "test_config",
        "testing_dir",
        "jest_config",
        "workflow_path",
        "alex_ai_workflow",
        "monitoring_dir",
        "monitoring_config",
        "monitor_script",
        "src_dir",
        "timestamp",
        "report_filename",
        "steps",
        "report_file",
        "result",
        "turbo_config",
        "cwd",
        "success"
      ],
      "imports": [
        "os",
        "json",
        "subprocess",
        "logging",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple"
      ],
      "classes": [
        "Phase3AlexAIIntegration"
      ],
      "total_lines": 854,
      "code_lines": 682,
      "complexity_score": 19,
      "purpose": "General utility script"
    },
    "scripts/python/alex_ai_yolo_mode_memory_integration.py": {
      "file_name": "alex_ai_yolo_mode_memory_integration.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 33,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "YOLOModeMemoryIntegration",
            "run_memory_integration",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "integration",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "create_yolo_mode_memory",
          "parameters": [
            "self"
          ],
          "lines": 128,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "memory"
          ]
        },
        {
          "name": "create_babysitting_warning_engine",
          "parameters": [
            "self"
          ],
          "lines": 76,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "warning_engine"
          ]
        },
        {
          "name": "analyze_prompt_for_babysitting",
          "parameters": [
            "self",
            "prompt"
          ],
          "lines": 78,
          "complexity": 14,
          "calls": [
            "create_babysitting_warning_engine",
            "isoformat",
            "search",
            "search",
            "search",
            "search",
            "search",
            "append",
            "append",
            "append",
            "append",
            "append",
            "now"
          ],
          "variables": [
            "analysis",
            "warning_engine",
            "patterns",
            "high_risk_patterns",
            "medium_risk_patterns",
            "low_risk_patterns"
          ]
        },
        {
          "name": "save_memory_integration",
          "parameters": [
            "self",
            "memory",
            "warning_engine"
          ],
          "lines": 15,
          "complexity": 1,
          "calls": [
            "info",
            "info",
            "open",
            "dump",
            "open",
            "dump"
          ],
          "variables": [
            "warning_file"
          ]
        },
        {
          "name": "create_supabase_memory_update",
          "parameters": [
            "self",
            "memory"
          ],
          "lines": 64,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "supabase_update"
          ]
        },
        {
          "name": "run_memory_integration",
          "parameters": [
            "self"
          ],
          "lines": 49,
          "complexity": 2,
          "calls": [
            "info",
            "create_yolo_mode_memory",
            "create_babysitting_warning_engine",
            "save_memory_integration",
            "create_supabase_memory_update",
            "info",
            "info",
            "info",
            "open",
            "dump",
            "analyze_prompt_for_babysitting",
            "info",
            "info",
            "info",
            "info"
          ],
          "variables": [
            "memory",
            "warning_engine",
            "supabase_update",
            "supabase_file",
            "test_prompts",
            "analysis"
          ]
        }
      ],
      "variables": [
        "integration",
        "result",
        "memory",
        "warning_engine",
        "analysis",
        "warning_engine",
        "patterns",
        "high_risk_patterns",
        "medium_risk_patterns",
        "low_risk_patterns",
        "warning_file",
        "supabase_update",
        "memory",
        "warning_engine",
        "supabase_update",
        "supabase_file",
        "test_prompts",
        "analysis"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "re"
      ],
      "classes": [
        "YOLOModeMemoryIntegration"
      ],
      "total_lines": 481,
      "code_lines": 417,
      "complexity_score": 16,
      "purpose": "General utility script"
    },
    "scripts/python/mcp_integration_system.py": {
      "file_name": "mcp_integration_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            "self",
            "supabase_client",
            "openai_client",
            "n8n_base_url"
          ],
          "lines": 8,
          "complexity": 2,
          "calls": [
            "MCPMemoryOptimizationSystem"
          ],
          "variables": []
        },
        {
          "name": "_matches_criteria",
          "parameters": [
            "self",
            "memory",
            "project_id",
            "crew_member",
            "memory_type"
          ],
          "lines": 10,
          "complexity": 7,
          "calls": [],
          "variables": []
        },
        {
          "name": "_determine_correlation_type",
          "parameters": [
            "self",
            "memory1",
            "memory2"
          ],
          "lines": 8,
          "complexity": 3,
          "calls": [],
          "variables": []
        },
        {
          "name": "_convert_to_csv",
          "parameters": [
            "self",
            "memories_data"
          ],
          "lines": 28,
          "complexity": 8,
          "calls": [
            "set",
            "join",
            "update",
            "join",
            "sorted",
            "append",
            "keys",
            "sorted",
            "get",
            "isinstance",
            "replace",
            "append",
            "join",
            "dumps",
            "str",
            "str",
            "str"
          ],
          "variables": [
            "all_fields",
            "csv_lines",
            "row",
            "value",
            "value",
            "value",
            "value"
          ]
        }
      ],
      "variables": [
        "logger",
        "mcp_system",
        "requests",
        "query",
        "project_id",
        "crew_member",
        "memory_type",
        "similarity_threshold",
        "limit",
        "query_embedding",
        "search_results",
        "content",
        "project_id",
        "crew_member",
        "memory_type",
        "tags",
        "embedding",
        "memory_id",
        "memory",
        "project_id",
        "similarity_threshold",
        "max_consolidation_size",
        "memories",
        "consolidation_groups",
        "processed_memories",
        "consolidation_results",
        "results",
        "report",
        "project_ids",
        "correlation_threshold",
        "correlations",
        "all_memories",
        "workflow_id",
        "trigger_data",
        "workflow_id",
        "execution_id",
        "project_id",
        "stats",
        "project_id",
        "format_type",
        "include_embeddings",
        "memories",
        "export_data",
        "memories_data",
        "project_id",
        "imported_count",
        "errors",
        "memories",
        "results",
        "all_fields",
        "csv_lines",
        "response",
        "method",
        "params",
        "search_results",
        "similar_memories",
        "consolidated",
        "project_memories",
        "memory_data",
        "row",
        "result",
        "response",
        "memory_data",
        "group_memories",
        "url",
        "payload",
        "response",
        "csv_data",
        "result",
        "response",
        "response",
        "search_query",
        "search_query",
        "search_query",
        "response",
        "value",
        "value",
        "result",
        "memory",
        "similarity",
        "url",
        "url",
        "memory_data",
        "memory",
        "memory",
        "search_query",
        "search_query",
        "search_query",
        "memory",
        "value",
        "value",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result"
      ],
      "imports": [
        "os",
        "json",
        "asyncio",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "aiohttp",
        "numpy",
        "mcp_memory_optimization_system.MCPMemoryOptimizationSystem",
        "mcp_memory_optimization_system.MemoryVector"
      ],
      "classes": [
        "MCPRequest",
        "MCPResponse",
        "MCPIntegrationSystem"
      ],
      "total_lines": 727,
      "code_lines": 583,
      "complexity_score": 87,
      "purpose": "General utility script"
    },
    "scripts/python/supabase_data_import_script.py": {
      "file_name": "supabase_data_import_script.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 57,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "SupabaseDataImporter",
            "print",
            "items",
            "print",
            "print",
            "generate_import_data",
            "sum",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "generate_supabase_import_script",
            "int",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "timestamp",
            "open",
            "dump",
            "open",
            "write",
            "len",
            "values",
            "now",
            "title",
            "len",
            "title",
            "len"
          ],
          "variables": [
            "importer",
            "import_data",
            "total_records",
            "import_script",
            "timestamp",
            "import_data_file",
            "import_script_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 120,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "load_data_file",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 12,
          "complexity": 3,
          "calls": [
            "exists",
            "print",
            "print",
            "open",
            "load",
            "str"
          ],
          "variables": []
        },
        {
          "name": "transform_market_research_data",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 25,
          "complexity": 3,
          "calls": [
            "items",
            "append",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "title"
          ],
          "variables": [
            "transformed_data",
            "record"
          ]
        },
        {
          "name": "transform_business_models_data",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 28,
          "complexity": 3,
          "calls": [
            "get",
            "append",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "title",
            "title"
          ],
          "variables": [
            "transformed_data",
            "business_model",
            "record"
          ]
        },
        {
          "name": "transform_execution_plans_data",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "append",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "transformed_data",
            "record"
          ]
        },
        {
          "name": "transform_agile_projects_data",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 26,
          "complexity": 3,
          "calls": [
            "append",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "transformed_data",
            "record"
          ]
        },
        {
          "name": "transform_business_operations_data",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "append",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "transformed_data",
            "record"
          ]
        },
        {
          "name": "transform_knowledge_base_data",
          "parameters": [
            "self",
            "data"
          ],
          "lines": 56,
          "complexity": 5,
          "calls": [
            "append",
            "items",
            "append",
            "get",
            "append",
            "get",
            "get",
            "get",
            "get",
            "title",
            "len",
            "get",
            "replace"
          ],
          "variables": [
            "transformed_data",
            "assessment",
            "record",
            "consensus",
            "record",
            "record"
          ]
        },
        {
          "name": "generate_import_data",
          "parameters": [
            "self"
          ],
          "lines": 36,
          "complexity": 10,
          "calls": [
            "items",
            "load_data_file",
            "transform_market_research_data",
            "extend",
            "transform_business_models_data",
            "extend",
            "transform_execution_plans_data",
            "extend",
            "transform_agile_projects_data",
            "extend",
            "transform_business_operations_data",
            "extend",
            "transform_knowledge_base_data",
            "extend"
          ],
          "variables": [
            "import_data",
            "data",
            "transformed",
            "transformed",
            "transformed",
            "transformed",
            "transformed",
            "transformed"
          ]
        },
        {
          "name": "generate_supabase_import_script",
          "parameters": [
            "self",
            "import_data"
          ],
          "lines": 45,
          "complexity": 9,
          "calls": [
            "items",
            "join",
            "append",
            "append",
            "append",
            "append",
            "isoformat",
            "list",
            "append",
            "keys",
            "isinstance",
            "now",
            "len",
            "append",
            "isinstance",
            "join",
            "join",
            "replace",
            "append",
            "isinstance",
            "append",
            "dumps",
            "str",
            "append",
            "append",
            "str"
          ],
          "variables": [
            "script_lines",
            "columns",
            "values",
            "insert_sql",
            "value",
            "escaped_value"
          ]
        }
      ],
      "variables": [
        "importer",
        "import_data",
        "total_records",
        "import_script",
        "timestamp",
        "import_data_file",
        "import_script_file",
        "transformed_data",
        "transformed_data",
        "transformed_data",
        "record",
        "transformed_data",
        "transformed_data",
        "record",
        "transformed_data",
        "import_data",
        "script_lines",
        "business_model",
        "assessment",
        "record",
        "consensus",
        "record",
        "record",
        "record",
        "record",
        "record",
        "data",
        "columns",
        "values",
        "insert_sql",
        "value",
        "transformed",
        "transformed",
        "escaped_value",
        "transformed",
        "transformed",
        "transformed",
        "transformed"
      ],
      "imports": [
        "json",
        "datetime",
        "os",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "SupabaseDataImporter"
      ],
      "total_lines": 475,
      "code_lines": 411,
      "complexity_score": 32,
      "purpose": "General utility script"
    },
    "scripts/python/observation_lounge_memory_consensus.py": {
      "file_name": "observation_lounge_memory_consensus.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 17,
          "complexity": 1,
          "calls": [
            "ObservationLoungeMemoryConsensus",
            "run_observation_lounge_session",
            "print_observation_lounge_report",
            "strftime",
            "print",
            "open",
            "dump",
            "now"
          ],
          "variables": [
            "session",
            "result",
            "timestamp",
            "filename"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 50,
          "complexity": 1,
          "calls": [
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "get_crew_memories",
          "parameters": [
            "self",
            "crew_member"
          ],
          "lines": 19,
          "complexity": 3,
          "calls": [
            "get",
            "json",
            "print"
          ],
          "variables": [
            "url",
            "params",
            "headers",
            "response"
          ]
        },
        {
          "name": "get_system_wide_memories",
          "parameters": [
            "self"
          ],
          "lines": 19,
          "complexity": 3,
          "calls": [
            "get",
            "json",
            "print"
          ],
          "variables": [
            "url",
            "params",
            "headers",
            "response"
          ]
        },
        {
          "name": "simulate_crew_member_reflection",
          "parameters": [
            "self",
            "crew_member",
            "personal_memories",
            "system_memories"
          ],
          "lines": 70,
          "complexity": 19,
          "calls": [
            "get",
            "get",
            "get",
            "get",
            "len",
            "append",
            "append",
            "append",
            "append",
            "any",
            "append",
            "append",
            "append",
            "append",
            "lower",
            "lower",
            "append",
            "lower",
            "lower",
            "append",
            "append",
            "append",
            "lower",
            "lower",
            "append",
            "append",
            "append",
            "append",
            "lower",
            "lower",
            "lower",
            "split",
            "append",
            "append",
            "append",
            "append",
            "lower",
            "append",
            "append",
            "append",
            "append"
          ],
          "variables": [
            "crew_info",
            "personal_insights",
            "department_insights",
            "reflection",
            "content",
            "mem_type",
            "content",
            "mem_type"
          ]
        },
        {
          "name": "run_observation_lounge_session",
          "parameters": [
            "self"
          ],
          "lines": 32,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "get_system_wide_memories",
            "print",
            "keys",
            "generate_consensus",
            "get_crew_memories",
            "simulate_crew_member_reflection",
            "isoformat",
            "len",
            "len",
            "len",
            "now"
          ],
          "variables": [
            "system_memories",
            "crew_reflections",
            "consensus",
            "session",
            "personal_memories",
            "reflection"
          ]
        },
        {
          "name": "generate_consensus",
          "parameters": [
            "self",
            "crew_reflections"
          ],
          "lines": 86,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "items",
            "items",
            "items",
            "append",
            "append",
            "append"
          ],
          "variables": [
            "all_agreements",
            "all_recommendations",
            "all_concerns",
            "consensus_points",
            "next_steps",
            "consensus"
          ]
        },
        {
          "name": "print_observation_lounge_report",
          "parameters": [
            "self",
            "session"
          ],
          "lines": 48,
          "complexity": 11,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "enumerate",
            "print",
            "enumerate",
            "print",
            "enumerate",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "consensus",
            "priority_icon"
          ]
        }
      ],
      "variables": [
        "session",
        "result",
        "timestamp",
        "filename",
        "crew_info",
        "personal_insights",
        "department_insights",
        "reflection",
        "system_memories",
        "crew_reflections",
        "consensus",
        "session",
        "all_agreements",
        "all_recommendations",
        "all_concerns",
        "consensus_points",
        "next_steps",
        "consensus",
        "consensus",
        "url",
        "params",
        "headers",
        "response",
        "url",
        "params",
        "headers",
        "response",
        "content",
        "mem_type",
        "content",
        "mem_type",
        "personal_memories",
        "reflection",
        "priority_icon"
      ],
      "imports": [
        "os",
        "requests",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "ObservationLoungeMemoryConsensus"
      ],
      "total_lines": 365,
      "code_lines": 302,
      "complexity_score": 40,
      "purpose": "General utility script"
    },
    "scripts/python/test_alex_ai_system.py": {
      "file_name": "test_alex_ai_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "test_job_search_system",
          "parameters": [],
          "lines": 22,
          "complexity": 2,
          "calls": [
            "print",
            "AlexAIJobSearchSystem",
            "run_job_search_automation",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len"
          ],
          "variables": [
            "job_search",
            "results"
          ]
        },
        {
          "name": "test_crew_coordinator",
          "parameters": [],
          "lines": 30,
          "complexity": 2,
          "calls": [
            "print",
            "ObservationLoungeCoordinator",
            "coordinate_observation_lounge",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "len",
            "len",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "coordinator",
            "test_input",
            "result"
          ]
        },
        {
          "name": "test_enhanced_router",
          "parameters": [],
          "lines": 27,
          "complexity": 2,
          "calls": [
            "print",
            "EnhancedUnifiedRouter",
            "route_request",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "router",
            "test_request",
            "result"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 43,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "sum",
            "len",
            "print",
            "print",
            "print",
            "print",
            "print",
            "test_func",
            "append",
            "print",
            "append"
          ],
          "variables": [
            "tests",
            "results",
            "passed",
            "total",
            "status",
            "success"
          ]
        }
      ],
      "variables": [
        "tests",
        "results",
        "passed",
        "total",
        "job_search",
        "results",
        "coordinator",
        "test_input",
        "result",
        "router",
        "test_request",
        "result",
        "status",
        "success"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "datetime.datetime",
        "alex_ai_job_search_system.AlexAIJobSearchSystem",
        "crew_coordinator.ObservationLoungeCoordinator",
        "enhanced_unified_router.EnhancedUnifiedRouter"
      ],
      "classes": [],
      "total_lines": 143,
      "code_lines": 98,
      "complexity_score": 8,
      "purpose": "Testing and validation"
    },
    "scripts/python/email_research_system.py": {
      "file_name": "email_research_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "EmailResearchSystem",
            "run_comprehensive_research",
            "generate_email_database",
            "save_results",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "len"
          ],
          "variables": [
            "email_research",
            "results",
            "email_db"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 76,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "research_company_emails",
          "parameters": [
            "self",
            "company_name"
          ],
          "lines": 29,
          "complexity": 2,
          "calls": [
            "get",
            "print",
            "_research_hr_emails",
            "_research_hiring_manager_emails",
            "_research_application_emails",
            "_research_contact_emails",
            "isoformat",
            "now"
          ],
          "variables": [
            "company_data",
            "hr_emails",
            "hiring_manager_emails",
            "application_emails",
            "contact_emails"
          ]
        },
        {
          "name": "_research_hr_emails",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 31,
          "complexity": 3,
          "calls": [
            "append",
            "append",
            "title",
            "replace"
          ],
          "variables": [
            "hr_emails",
            "hr_roles",
            "email"
          ]
        },
        {
          "name": "_research_hiring_manager_emails",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 51,
          "complexity": 3,
          "calls": [
            "get",
            "title",
            "append",
            "append",
            "split",
            "title",
            "replace"
          ],
          "variables": [
            "hiring_manager_emails",
            "known_managers",
            "company_managers",
            "hiring_roles",
            "email"
          ]
        },
        {
          "name": "_research_application_emails",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 24,
          "complexity": 2,
          "calls": [
            "append"
          ],
          "variables": [
            "application_emails",
            "app_patterns"
          ]
        },
        {
          "name": "_research_contact_emails",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "append"
          ],
          "variables": [
            "contact_emails",
            "contact_patterns"
          ]
        },
        {
          "name": "generate_email_recommendations",
          "parameters": [
            "self",
            "company_name",
            "research_data"
          ],
          "lines": 35,
          "complexity": 9,
          "calls": [
            "get",
            "get",
            "get",
            "get",
            "get",
            "_generate_outreach_strategy",
            "append",
            "append",
            "append",
            "append"
          ],
          "variables": [
            "recommendations"
          ]
        },
        {
          "name": "_generate_outreach_strategy",
          "parameters": [
            "self",
            "company_name",
            "recommendations"
          ],
          "lines": 60,
          "complexity": 4,
          "calls": [
            "append",
            "append",
            "append"
          ],
          "variables": [
            "strategy"
          ]
        },
        {
          "name": "run_comprehensive_research",
          "parameters": [
            "self"
          ],
          "lines": 20,
          "complexity": 2,
          "calls": [
            "print",
            "keys",
            "print",
            "research_company_emails",
            "generate_email_recommendations"
          ],
          "variables": [
            "research_data",
            "recommendations"
          ]
        },
        {
          "name": "save_results",
          "parameters": [
            "self",
            "filename"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "print",
            "open",
            "dump"
          ],
          "variables": []
        },
        {
          "name": "generate_email_database",
          "parameters": [
            "self"
          ],
          "lines": 25,
          "complexity": 2,
          "calls": [
            "items",
            "isoformat",
            "len",
            "len",
            "len",
            "len",
            "now"
          ],
          "variables": [
            "email_db",
            "company_emails"
          ]
        }
      ],
      "variables": [
        "email_research",
        "results",
        "email_db",
        "company_data",
        "hr_emails",
        "hiring_manager_emails",
        "application_emails",
        "contact_emails",
        "hr_emails",
        "hr_roles",
        "hiring_manager_emails",
        "known_managers",
        "company_managers",
        "hiring_roles",
        "application_emails",
        "app_patterns",
        "contact_emails",
        "contact_patterns",
        "recommendations",
        "strategy",
        "email_db",
        "email",
        "email",
        "research_data",
        "recommendations",
        "company_emails"
      ],
      "imports": [
        "json",
        "re",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "requests",
        "bs4.BeautifulSoup"
      ],
      "classes": [
        "EmailResearchSystem"
      ],
      "total_lines": 430,
      "code_lines": 339,
      "complexity_score": 21,
      "purpose": "General utility script"
    },
    "scripts/python/fix_credential_security.py": {
      "file_name": "fix_credential_security.py",
      "file_type": "py",
      "functions": [
        {
          "name": "check_current_credentials",
          "parameters": [],
          "lines": 23,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "getenv",
            "getenv",
            "print",
            "print",
            "len"
          ],
          "variables": [
            "required_creds",
            "value",
            "masked"
          ]
        },
        {
          "name": "create_anthropic_key_prompt",
          "parameters": [],
          "lines": 16,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": []
        },
        {
          "name": "create_secure_credential_loader",
          "parameters": [],
          "lines": 35,
          "complexity": 1,
          "calls": [
            "chmod",
            "print",
            "open",
            "write"
          ],
          "variables": [
            "loader_script"
          ]
        },
        {
          "name": "test_credential_access",
          "parameters": [
            "creds"
          ],
          "lines": 27,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "get",
            "get",
            "get",
            "get",
            "get",
            "print",
            "get",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "url",
            "headers",
            "response",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "create_crew_memory_about_fix",
          "parameters": [],
          "lines": 40,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "getenv",
            "getenv",
            "print",
            "post",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "supabase_url",
            "supabase_key",
            "memory_data",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 35,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "print",
            "check_current_credentials",
            "get",
            "create_anthropic_key_prompt",
            "print",
            "print",
            "create_secure_credential_loader",
            "test_credential_access",
            "create_crew_memory_about_fix",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "test_credential_access",
            "create_crew_memory_about_fix",
            "print"
          ],
          "variables": [
            "current_creds"
          ]
        }
      ],
      "variables": [
        "required_creds",
        "loader_script",
        "supabase_url",
        "supabase_key",
        "memory_data",
        "current_creds",
        "value",
        "url",
        "headers",
        "response",
        "masked",
        "url",
        "headers",
        "response",
        "url",
        "headers",
        "response"
      ],
      "imports": [
        "os",
        "subprocess",
        "requests",
        "datetime.datetime"
      ],
      "classes": [],
      "total_lines": 196,
      "code_lines": 147,
      "complexity_score": 14,
      "purpose": "General utility script"
    },
    "scripts/python/turborepo_research_system.py": {
      "file_name": "turborepo_research_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "_initialize_crew"
          ],
          "variables": []
        },
        {
          "name": "_initialize_crew",
          "parameters": [
            "self"
          ],
          "lines": 58,
          "complexity": 1,
          "calls": [
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember",
            "CrewMember"
          ],
          "variables": []
        },
        {
          "name": "analyze_for_crew_member",
          "parameters": [
            "self",
            "crew_member",
            "data"
          ],
          "lines": 131,
          "complexity": 30,
          "calls": [
            "items",
            "isinstance",
            "get",
            "str",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight",
            "lower",
            "append",
            "TurborepoInsight"
          ],
          "variables": [
            "insights",
            "all_content",
            "strategic_keywords",
            "technical_keywords",
            "infra_keywords",
            "quality_keywords",
            "dx_keywords",
            "security_keywords",
            "innovation_keywords",
            "advanced_keywords",
            "wisdom_keywords"
          ]
        },
        {
          "name": "generate_research_report",
          "parameters": [
            "self"
          ],
          "lines": 78,
          "complexity": 12,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "values",
            "write",
            "write",
            "items",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "keys",
            "write",
            "keys",
            "write",
            "write",
            "now",
            "append",
            "write",
            "write",
            "write",
            "write",
            "append",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "write",
            "join",
            "now"
          ],
          "variables": [
            "timestamp",
            "report_filename",
            "crew_insights",
            "categories"
          ]
        },
        {
          "name": "save_research_data",
          "parameters": [
            "self"
          ],
          "lines": 29,
          "complexity": 1,
          "calls": [
            "strftime",
            "info",
            "isoformat",
            "list",
            "list",
            "open",
            "dump",
            "now",
            "keys",
            "keys",
            "now",
            "items"
          ],
          "variables": [
            "timestamp",
            "data_filename",
            "research_data"
          ]
        }
      ],
      "variables": [
        "research_system",
        "report_file",
        "data_file",
        "documentation_urls",
        "website_urls",
        "insights",
        "all_content",
        "all_data",
        "timestamp",
        "report_filename",
        "timestamp",
        "data_filename",
        "research_data",
        "strategic_keywords",
        "insights",
        "crew_insights",
        "categories",
        "technical_keywords",
        "infra_keywords",
        "quality_keywords",
        "content",
        "soup",
        "main_content",
        "text_content",
        "code_blocks",
        "headings",
        "content",
        "soup",
        "features",
        "testimonials",
        "dx_keywords",
        "security_keywords",
        "innovation_keywords",
        "advanced_keywords",
        "wisdom_keywords"
      ],
      "imports": [
        "asyncio",
        "aiohttp",
        "json",
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "dataclasses.dataclass",
        "re",
        "bs4.BeautifulSoup"
      ],
      "classes": [
        "CrewMember",
        "TurborepoInsight",
        "TurborepoResearchSystem"
      ],
      "total_lines": 481,
      "code_lines": 388,
      "complexity_score": 56,
      "purpose": "General utility script"
    },
    "scripts/python/progressive_git_push_system.py": {
      "file_name": "progressive_git_push_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "ProgressiveGitPushSystem",
            "create_alex_ai_progressive_steps",
            "print_progressive_report",
            "print",
            "print",
            "print",
            "isoformat",
            "len",
            "now"
          ],
          "variables": [
            "pusher"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "getcwd"
          ],
          "variables": []
        },
        {
          "name": "create_push_step",
          "parameters": [
            "self",
            "step_name",
            "description",
            "files",
            "commit_message"
          ],
          "lines": 13,
          "complexity": 1,
          "calls": [
            "append",
            "isoformat",
            "len",
            "now"
          ],
          "variables": [
            "step"
          ]
        },
        {
          "name": "execute_push_step",
          "parameters": [
            "self",
            "step_number"
          ],
          "lines": 41,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "run",
            "print",
            "print",
            "len",
            "exists",
            "run",
            "print",
            "print",
            "join",
            "run",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "step"
          ]
        },
        {
          "name": "create_alex_ai_progressive_steps",
          "parameters": [
            "self"
          ],
          "lines": 72,
          "complexity": 1,
          "calls": [
            "append",
            "append",
            "append",
            "append",
            "append",
            "append",
            "create_push_step",
            "create_push_step",
            "create_push_step",
            "create_push_step",
            "create_push_step",
            "create_push_step"
          ],
          "variables": [
            "steps"
          ]
        },
        {
          "name": "run_progressive_push",
          "parameters": [
            "self",
            "start_step",
            "end_step"
          ],
          "lines": 44,
          "complexity": 6,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "range",
            "create_alex_ai_progressive_steps",
            "len",
            "isoformat",
            "len",
            "min",
            "execute_push_step",
            "append",
            "print",
            "sleep",
            "now",
            "len"
          ],
          "variables": [
            "results",
            "end_step",
            "step_result"
          ]
        },
        {
          "name": "print_progressive_report",
          "parameters": [
            "self",
            "results"
          ],
          "lines": 33,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "enumerate",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "success_rate",
            "status_icon",
            "status"
          ]
        }
      ],
      "variables": [
        "pusher",
        "step",
        "step",
        "steps",
        "results",
        "success_rate",
        "start",
        "end",
        "pusher",
        "results",
        "end_step",
        "step_result",
        "status_icon",
        "status",
        "start",
        "end"
      ],
      "imports": [
        "os",
        "subprocess",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "sys",
        "time"
      ],
      "classes": [
        "ProgressiveGitPushSystem"
      ],
      "total_lines": 268,
      "code_lines": 212,
      "complexity_score": 18,
      "purpose": "General utility script"
    },
    "scripts/python/yolo_mode_issue_investigation.py": {
      "file_name": "yolo_mode_issue_investigation.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 19,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "YOLOModeIssueInvestigation",
            "run_investigation",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "investigation",
            "report_file"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "investigate_package_management_issue",
          "parameters": [
            "self"
          ],
          "lines": 68,
          "complexity": 12,
          "calls": [
            "info",
            "exists",
            "append",
            "info",
            "append",
            "info",
            "append",
            "run",
            "run",
            "info",
            "append",
            "error",
            "append",
            "error",
            "append",
            "error",
            "append",
            "error",
            "append",
            "info",
            "append",
            "error",
            "append",
            "error",
            "append",
            "error",
            "append",
            "strip",
            "strip"
          ],
          "variables": [
            "issue_details",
            "result",
            "result"
          ]
        },
        {
          "name": "investigate_error_handling_issue",
          "parameters": [
            "self"
          ],
          "lines": 50,
          "complexity": 7,
          "calls": [
            "info",
            "append",
            "error",
            "append",
            "error",
            "append",
            "str",
            "open",
            "write",
            "info",
            "append",
            "info",
            "append",
            "open",
            "write",
            "info",
            "append",
            "info",
            "append"
          ],
          "variables": [
            "issue_details"
          ]
        },
        {
          "name": "generate_investigation_report",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 3,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "now"
          ],
          "variables": [
            "timestamp",
            "report_file"
          ]
        },
        {
          "name": "run_investigation",
          "parameters": [
            "self"
          ],
          "lines": 14,
          "complexity": 1,
          "calls": [
            "info",
            "investigate_package_management_issue",
            "investigate_error_handling_issue",
            "generate_investigation_report"
          ],
          "variables": [
            "report_file"
          ]
        }
      ],
      "variables": [
        "investigation",
        "report_file",
        "issue_details",
        "issue_details",
        "timestamp",
        "report_file",
        "report_file",
        "result",
        "result"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "subprocess",
        "sys",
        "datetime.datetime"
      ],
      "classes": [
        "YOLOModeIssueInvestigation"
      ],
      "total_lines": 228,
      "code_lines": 179,
      "complexity_score": 20,
      "purpose": "General utility script"
    },
    "scripts/python/mcp_library_computer_system.py": {
      "file_name": "mcp_library_computer_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 17,
          "complexity": 1,
          "calls": [
            "MCPLibraryComputerSystem",
            "run_knowledge_distribution_cycle",
            "print_distribution_report",
            "strftime",
            "print",
            "open",
            "dump",
            "now"
          ],
          "variables": [
            "library",
            "results",
            "timestamp",
            "filename"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 107,
          "complexity": 1,
          "calls": [
            "getenv",
            "getenv",
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "query_mcp_library",
          "parameters": [
            "self",
            "crew_member",
            "query"
          ],
          "lines": 51,
          "complexity": 3,
          "calls": [
            "print",
            "post",
            "json",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "str"
          ],
          "variables": [
            "mcp_payload",
            "url",
            "headers",
            "response",
            "result"
          ]
        },
        {
          "name": "create_crew_knowledge_memory",
          "parameters": [
            "self",
            "crew_member",
            "knowledge_data"
          ],
          "lines": 34,
          "complexity": 3,
          "calls": [
            "print",
            "post",
            "get",
            "get",
            "print",
            "print",
            "print",
            "int",
            "get",
            "timestamp",
            "now"
          ],
          "variables": [
            "memory_data",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "update_crew_specialization",
          "parameters": [
            "self",
            "crew_member",
            "new_knowledge"
          ],
          "lines": 33,
          "complexity": 3,
          "calls": [
            "print",
            "post",
            "print",
            "print",
            "print",
            "int",
            "join",
            "timestamp",
            "now"
          ],
          "variables": [
            "memory_data",
            "url",
            "headers",
            "response"
          ]
        },
        {
          "name": "run_knowledge_distribution_cycle",
          "parameters": [
            "self"
          ],
          "lines": 67,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "items",
            "isoformat",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "query_mcp_library",
            "update_crew_specialization",
            "now",
            "create_crew_knowledge_memory",
            "append",
            "get",
            "get"
          ],
          "variables": [
            "distribution_results",
            "crew_results",
            "mcp_result",
            "new_knowledge"
          ]
        },
        {
          "name": "print_distribution_report",
          "parameters": [
            "self",
            "results"
          ],
          "lines": 39,
          "complexity": 6,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "success_rate",
            "status"
          ]
        }
      ],
      "variables": [
        "library",
        "results",
        "timestamp",
        "filename",
        "distribution_results",
        "success_rate",
        "mcp_payload",
        "url",
        "headers",
        "response",
        "memory_data",
        "url",
        "headers",
        "response",
        "memory_data",
        "url",
        "headers",
        "response",
        "crew_results",
        "status",
        "result",
        "mcp_result",
        "new_knowledge"
      ],
      "imports": [
        "os",
        "requests",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "MCPLibraryComputerSystem"
      ],
      "total_lines": 372,
      "code_lines": 313,
      "complexity_score": 19,
      "purpose": "General utility script"
    },
    "scripts/python/phase1_turborepo_setup.py": {
      "file_name": "phase1_turborepo_setup.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 26,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "Phase1TurborepoSetup",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "execute_phase1",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "setup_system"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 4,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "log_step",
          "parameters": [
            "self",
            "step",
            "status",
            "details"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "append",
            "isoformat",
            "info",
            "error",
            "append",
            "info",
            "now"
          ],
          "variables": [
            "log_entry"
          ]
        },
        {
          "name": "run_command",
          "parameters": [
            "self",
            "command",
            "cwd"
          ],
          "lines": 24,
          "complexity": 5,
          "calls": [
            "run",
            "str"
          ],
          "variables": [
            "result",
            "cwd"
          ]
        },
        {
          "name": "install_turborepo",
          "parameters": [
            "self"
          ],
          "lines": 84,
          "complexity": 6,
          "calls": [
            "log_step",
            "log_step",
            "run_command",
            "exists",
            "log_step",
            "log_step",
            "log_step",
            "update",
            "log_step",
            "log_step",
            "log_step",
            "open",
            "dump",
            "open",
            "load",
            "open",
            "dump"
          ],
          "variables": [
            "package_json_path",
            "package_json",
            "package_json"
          ]
        },
        {
          "name": "setup_workspace_structure",
          "parameters": [
            "self"
          ],
          "lines": 22,
          "complexity": 5,
          "calls": [
            "log_step",
            "log_step",
            "exists",
            "mkdir",
            "log_step",
            "log_step",
            "exists",
            "write_text"
          ],
          "variables": [
            "directories",
            "dir_path",
            "gitkeep_path"
          ]
        },
        {
          "name": "create_turbo_config",
          "parameters": [
            "self"
          ],
          "lines": 39,
          "complexity": 1,
          "calls": [
            "log_step",
            "log_step",
            "open",
            "dump"
          ],
          "variables": [
            "turbo_config",
            "turbo_json_path"
          ]
        },
        {
          "name": "migrate_existing_apps",
          "parameters": [
            "self"
          ],
          "lines": 45,
          "complexity": 13,
          "calls": [
            "log_step",
            "iterdir",
            "log_step",
            "exists",
            "exists",
            "append",
            "log_step",
            "is_dir",
            "exists",
            "exists",
            "rename",
            "log_step",
            "log_step",
            "len",
            "open",
            "load",
            "append",
            "get",
            "get"
          ],
          "variables": [
            "existing_apps",
            "job_search_path",
            "source_path",
            "target_path",
            "package_json_path",
            "package_json"
          ]
        },
        {
          "name": "setup_shared_packages",
          "parameters": [
            "self"
          ],
          "lines": 107,
          "complexity": 3,
          "calls": [
            "log_step",
            "log_step",
            "exists",
            "mkdir",
            "mkdir",
            "log_step",
            "log_step",
            "open",
            "dump",
            "open",
            "dump",
            "open",
            "write",
            "replace",
            "replace"
          ],
          "variables": [
            "shared_packages",
            "package_dir",
            "package_json",
            "tsconfig",
            "src_dir",
            "index_content"
          ]
        },
        {
          "name": "configure_basic_tasks",
          "parameters": [
            "self"
          ],
          "lines": 46,
          "complexity": 1,
          "calls": [
            "log_step",
            "update",
            "log_step",
            "open",
            "load",
            "open",
            "dump"
          ],
          "variables": [
            "turbo_json_path",
            "turbo_config"
          ]
        },
        {
          "name": "test_turborepo_functionality",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "log_step",
            "run_command",
            "run_command",
            "run_command",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "log_step",
            "strip"
          ],
          "variables": []
        },
        {
          "name": "generate_phase1_report",
          "parameters": [
            "self"
          ],
          "lines": 74,
          "complexity": 5,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "write",
            "write",
            "write",
            "strftime",
            "len",
            "len",
            "now",
            "len"
          ],
          "variables": [
            "timestamp",
            "report_filename"
          ]
        },
        {
          "name": "execute_phase1",
          "parameters": [
            "self"
          ],
          "lines": 35,
          "complexity": 5,
          "calls": [
            "info",
            "generate_phase1_report",
            "info",
            "len",
            "info",
            "warning",
            "step_function",
            "len",
            "error",
            "log_step",
            "error",
            "len",
            "str"
          ],
          "variables": [
            "steps",
            "report_file",
            "success"
          ]
        }
      ],
      "variables": [
        "setup_system",
        "log_entry",
        "package_json_path",
        "directories",
        "turbo_config",
        "turbo_json_path",
        "existing_apps",
        "job_search_path",
        "shared_packages",
        "turbo_json_path",
        "timestamp",
        "report_filename",
        "steps",
        "report_file",
        "result",
        "package_json",
        "dir_path",
        "gitkeep_path",
        "source_path",
        "target_path",
        "package_dir",
        "turbo_config",
        "cwd",
        "package_json",
        "package_json_path",
        "package_json",
        "tsconfig",
        "src_dir",
        "index_content",
        "success",
        "package_json"
      ],
      "imports": [
        "os",
        "json",
        "subprocess",
        "logging",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "Phase1TurborepoSetup"
      ],
      "total_lines": 598,
      "code_lines": 479,
      "complexity_score": 42,
      "purpose": "General utility script"
    },
    "scripts/python/n8n_integration_test_system.py": {
      "file_name": "n8n_integration_test_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [
            "N8NIntegrationTester",
            "run_comprehensive_test",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "tester",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "getenv",
            "getenv"
          ],
          "variables": []
        },
        {
          "name": "load_workflow_tests",
          "parameters": [
            "self"
          ],
          "lines": 53,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "test_workflow",
          "parameters": [
            "self",
            "workflow_test"
          ],
          "lines": 80,
          "complexity": 7,
          "calls": [
            "print",
            "time",
            "post",
            "time",
            "json",
            "print",
            "print",
            "print",
            "round",
            "len",
            "isoformat",
            "print",
            "print",
            "round",
            "isoformat",
            "isoformat",
            "str",
            "isoformat",
            "str",
            "append",
            "str",
            "now",
            "now",
            "now",
            "now",
            "str"
          ],
          "variables": [
            "url",
            "headers",
            "start_time",
            "response",
            "end_time",
            "response_time",
            "result",
            "missing_fields",
            "test_result",
            "test_result",
            "test_result",
            "test_result"
          ]
        },
        {
          "name": "test_crew_memory_synchronization",
          "parameters": [
            "self"
          ],
          "lines": 64,
          "complexity": 6,
          "calls": [
            "print",
            "getenv",
            "getenv",
            "get",
            "json",
            "print",
            "isoformat",
            "get",
            "get",
            "len",
            "isoformat",
            "isoformat",
            "str",
            "isoformat",
            "get",
            "get",
            "now",
            "now",
            "len",
            "len",
            "now",
            "now"
          ],
          "variables": [
            "supabase_url",
            "supabase_key",
            "url",
            "headers",
            "response",
            "memories",
            "crew_members",
            "memory_types",
            "result",
            "crew",
            "mem_type"
          ]
        },
        {
          "name": "run_comprehensive_test",
          "parameters": [
            "self"
          ],
          "lines": 57,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "load_workflow_tests",
            "test_crew_memory_synchronization",
            "sum",
            "print",
            "print",
            "print",
            "print",
            "print",
            "save_test_results",
            "test_workflow",
            "append",
            "sleep",
            "len",
            "isoformat",
            "print",
            "len",
            "now"
          ],
          "variables": [
            "workflow_results",
            "memory_result",
            "total_tests",
            "passed_tests",
            "comprehensive_result",
            "memory_icon",
            "result",
            "status_icon"
          ]
        },
        {
          "name": "save_test_results",
          "parameters": [
            "self",
            "results"
          ],
          "lines": 9,
          "complexity": 1,
          "calls": [
            "strftime",
            "print",
            "open",
            "dump",
            "now"
          ],
          "variables": [
            "timestamp",
            "filename"
          ]
        }
      ],
      "variables": [
        "tester",
        "results",
        "workflow_results",
        "memory_result",
        "total_tests",
        "passed_tests",
        "comprehensive_result",
        "memory_icon",
        "timestamp",
        "filename",
        "url",
        "headers",
        "start_time",
        "response",
        "end_time",
        "response_time",
        "supabase_url",
        "supabase_key",
        "url",
        "headers",
        "response",
        "result",
        "status_icon",
        "result",
        "missing_fields",
        "test_result",
        "test_result",
        "test_result",
        "test_result",
        "memories",
        "crew_members",
        "memory_types",
        "result",
        "crew",
        "mem_type"
      ],
      "imports": [
        "json",
        "requests",
        "os",
        "sys",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "time"
      ],
      "classes": [
        "N8NIntegrationTester"
      ],
      "total_lines": 305,
      "code_lines": 245,
      "complexity_score": 16,
      "purpose": "Testing and validation"
    },
    "scripts/python/proper_yolo_mode_configuration.py": {
      "file_name": "proper_yolo_mode_configuration.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 27,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "ProperYOLOModeConfiguration",
            "run_proper_configuration",
            "get",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "config",
            "result"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 2,
          "complexity": 1,
          "calls": [
            "resolve",
            "Path"
          ],
          "variables": []
        },
        {
          "name": "create_proper_yolo_config",
          "parameters": [
            "self"
          ],
          "lines": 119,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": [
            "config"
          ]
        },
        {
          "name": "save_configuration",
          "parameters": [
            "self",
            "config"
          ],
          "lines": 9,
          "complexity": 1,
          "calls": [
            "info",
            "open",
            "dump"
          ],
          "variables": [
            "config_file"
          ]
        },
        {
          "name": "create_cursor_rules_file",
          "parameters": [
            "self"
          ],
          "lines": 45,
          "complexity": 1,
          "calls": [
            "strip",
            "info",
            "open",
            "write",
            "format",
            "strftime",
            "now"
          ],
          "variables": [
            "cursor_rules",
            "cursor_rules_file"
          ]
        },
        {
          "name": "generate_configuration_report",
          "parameters": [
            "self",
            "config"
          ],
          "lines": 86,
          "complexity": 1,
          "calls": [
            "strftime",
            "info",
            "open",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "write",
            "now",
            "strftime",
            "now"
          ],
          "variables": [
            "timestamp",
            "report_file"
          ]
        },
        {
          "name": "run_proper_configuration",
          "parameters": [
            "self"
          ],
          "lines": 25,
          "complexity": 1,
          "calls": [
            "info",
            "create_proper_yolo_config",
            "save_configuration",
            "create_cursor_rules_file",
            "generate_configuration_report",
            "info"
          ],
          "variables": [
            "config",
            "config_file",
            "cursor_rules_file",
            "report_file"
          ]
        }
      ],
      "variables": [
        "config",
        "result",
        "config",
        "config_file",
        "cursor_rules",
        "cursor_rules_file",
        "timestamp",
        "report_file",
        "config",
        "config_file",
        "cursor_rules_file",
        "report_file"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [
        "ProperYOLOModeConfiguration"
      ],
      "total_lines": 345,
      "code_lines": 255,
      "complexity_score": 2,
      "purpose": "General utility script"
    },
    "scripts/python/intelligent_monorepo_cleanup.py": {
      "file_name": "intelligent_monorepo_cleanup.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 28,
          "complexity": 3,
          "calls": [
            "IntelligentMonorepoCleanup",
            "run_intelligent_cleanup",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "print",
            "print",
            "exists",
            "print",
            "len",
            "len"
          ],
          "variables": [
            "analysis_file",
            "cleanup",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self",
            "project_root"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "Path",
            "set"
          ],
          "variables": []
        },
        {
          "name": "create_backup",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 1,
          "calls": [
            "strftime",
            "mkdir",
            "log",
            "str",
            "now"
          ],
          "variables": [
            "timestamp"
          ]
        },
        {
          "name": "log",
          "parameters": [
            "self",
            "message"
          ],
          "lines": 6,
          "complexity": 1,
          "calls": [
            "strftime",
            "append",
            "print",
            "now"
          ],
          "variables": [
            "timestamp",
            "log_entry"
          ]
        },
        {
          "name": "safe_remove_file",
          "parameters": [
            "self",
            "file_path",
            "reason"
          ],
          "lines": 14,
          "complexity": 2,
          "calls": [
            "mkdir",
            "copy2",
            "unlink",
            "log",
            "exists",
            "relative_to"
          ],
          "variables": [
            "backup_path"
          ]
        },
        {
          "name": "safe_remove_directory",
          "parameters": [
            "self",
            "dir_path",
            "reason"
          ],
          "lines": 14,
          "complexity": 3,
          "calls": [
            "mkdir",
            "copytree",
            "rmtree",
            "log",
            "relative_to",
            "exists",
            "is_dir"
          ],
          "variables": [
            "backup_path"
          ]
        },
        {
          "name": "consolidate_similar_scripts",
          "parameters": [
            "self",
            "script_groups"
          ],
          "lines": 62,
          "complexity": 8,
          "calls": [
            "items",
            "log",
            "max",
            "mkdir",
            "chmod",
            "str",
            "log",
            "len",
            "open",
            "write",
            "append",
            "replace",
            "join",
            "strftime",
            "safe_remove_file",
            "len",
            "open",
            "read",
            "log",
            "Path",
            "len",
            "count",
            "count",
            "replace",
            "chr",
            "now"
          ],
          "variables": [
            "consolidated",
            "script_contents",
            "best_script",
            "consolidated_name",
            "consolidated_path",
            "header",
            "content"
          ]
        },
        {
          "name": "archive_milestone_packages",
          "parameters": [
            "self",
            "milestone_dirs"
          ],
          "lines": 27,
          "complexity": 3,
          "calls": [
            "mkdir",
            "Path",
            "str",
            "log",
            "safe_remove_directory",
            "exists",
            "open",
            "add",
            "strftime",
            "now"
          ],
          "variables": [
            "archived",
            "archives_dir",
            "milestone_path",
            "archive_name",
            "archive_path"
          ]
        },
        {
          "name": "remove_duplicate_files",
          "parameters": [
            "self",
            "duplicate_groups"
          ],
          "lines": 41,
          "complexity": 11,
          "calls": [
            "items",
            "len",
            "Path",
            "stat",
            "Path",
            "exists",
            "exists",
            "safe_remove_file"
          ],
          "variables": [
            "removed_count",
            "best_file",
            "best_score",
            "path",
            "stat",
            "score",
            "path",
            "best_score",
            "best_file"
          ]
        },
        {
          "name": "organize_remaining_files",
          "parameters": [
            "self"
          ],
          "lines": 17,
          "complexity": 2,
          "calls": [
            "items",
            "mkdir",
            "log"
          ],
          "variables": [
            "organized_dirs",
            "dir_path"
          ]
        },
        {
          "name": "generate_cleanup_report",
          "parameters": [
            "self"
          ],
          "lines": 56,
          "complexity": 2,
          "calls": [
            "log",
            "str",
            "open",
            "write",
            "len",
            "strftime",
            "strftime",
            "strftime",
            "now",
            "now",
            "now"
          ],
          "variables": [
            "report_path",
            "report_content"
          ]
        },
        {
          "name": "run_intelligent_cleanup",
          "parameters": [
            "self",
            "analysis_file"
          ],
          "lines": 70,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "create_backup",
            "open",
            "load",
            "print",
            "remove_duplicate_files",
            "print",
            "items",
            "items",
            "print",
            "archive_milestone_packages",
            "print",
            "organize_remaining_files",
            "print",
            "generate_cleanup_report",
            "print",
            "print",
            "print",
            "replace",
            "consolidate_similar_scripts",
            "update",
            "replace",
            "consolidate_similar_scripts",
            "update",
            "log",
            "print",
            "print",
            "basename",
            "basename"
          ],
          "variables": [
            "backup_dir",
            "results",
            "analysis",
            "duplicate_groups",
            "python_similar",
            "shell_similar",
            "milestone_packages",
            "report_path",
            "group_name",
            "consolidated",
            "group_name",
            "consolidated"
          ]
        }
      ],
      "variables": [
        "analysis_file",
        "cleanup",
        "results",
        "timestamp",
        "timestamp",
        "log_entry",
        "backup_path",
        "backup_path",
        "consolidated",
        "archived",
        "archives_dir",
        "removed_count",
        "organized_dirs",
        "report_path",
        "report_content",
        "backup_dir",
        "results",
        "script_contents",
        "best_script",
        "consolidated_name",
        "consolidated_path",
        "header",
        "milestone_path",
        "archive_name",
        "archive_path",
        "best_file",
        "best_score",
        "dir_path",
        "analysis",
        "duplicate_groups",
        "python_similar",
        "shell_similar",
        "milestone_packages",
        "report_path",
        "group_name",
        "consolidated",
        "group_name",
        "consolidated",
        "path",
        "stat",
        "score",
        "path",
        "content",
        "best_score",
        "best_file"
      ],
      "imports": [
        "os",
        "sys",
        "shutil",
        "json",
        "hashlib",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "difflib",
        "sys",
        "tarfile"
      ],
      "classes": [
        "IntelligentMonorepoCleanup"
      ],
      "total_lines": 385,
      "code_lines": 266,
      "complexity_score": 30,
      "purpose": "General utility script"
    },
    "scripts/python/company_research_system.py": {
      "file_name": "company_research_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "CompanyResearchSystem",
            "run_research",
            "generate_contact_database",
            "save_results",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "len",
            "sum",
            "len",
            "values"
          ],
          "variables": [
            "research_system",
            "results",
            "contact_db"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 86,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "scrape_company_info",
          "parameters": [
            "self",
            "company"
          ],
          "lines": 30,
          "complexity": 2,
          "calls": [
            "_scrape_main_website",
            "_scrape_careers_page",
            "_scrape_linkedin_info",
            "isoformat",
            "print",
            "str",
            "isoformat",
            "now",
            "str",
            "now"
          ],
          "variables": [
            "main_info",
            "careers_info",
            "linkedin_info"
          ]
        },
        {
          "name": "_scrape_main_website",
          "parameters": [
            "self",
            "company"
          ],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "get",
            "BeautifulSoup",
            "_extract_leadership_info",
            "_extract_company_description",
            "_extract_contact_info",
            "str"
          ],
          "variables": [
            "response",
            "soup",
            "leadership_info",
            "description",
            "contact_info"
          ]
        },
        {
          "name": "_scrape_careers_page",
          "parameters": [
            "self",
            "company"
          ],
          "lines": 23,
          "complexity": 2,
          "calls": [
            "get",
            "BeautifulSoup",
            "_extract_job_openings",
            "_extract_hiring_team",
            "_extract_application_process",
            "str"
          ],
          "variables": [
            "response",
            "soup",
            "job_openings",
            "hiring_team",
            "application_process"
          ]
        },
        {
          "name": "_scrape_linkedin_info",
          "parameters": [
            "self",
            "company"
          ],
          "lines": 11,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "_extract_leadership_info",
          "parameters": [
            "self",
            "soup"
          ],
          "lines": 28,
          "complexity": 6,
          "calls": [
            "select",
            "find_all",
            "strip",
            "append",
            "get_text",
            "len"
          ],
          "variables": [
            "leadership",
            "leadership_selectors",
            "elements",
            "names",
            "name_text"
          ]
        },
        {
          "name": "_extract_company_description",
          "parameters": [
            "self",
            "soup"
          ],
          "lines": 21,
          "complexity": 4,
          "calls": [
            "find",
            "get",
            "select_one",
            "strip",
            "get_text"
          ],
          "variables": [
            "meta_desc",
            "about_selectors",
            "element"
          ]
        },
        {
          "name": "_extract_contact_info",
          "parameters": [
            "self",
            "soup"
          ],
          "lines": 17,
          "complexity": 3,
          "calls": [
            "findall",
            "findall",
            "get_text",
            "list",
            "get_text",
            "set",
            "join"
          ],
          "variables": [
            "contact_info",
            "email_pattern",
            "emails",
            "phone_pattern",
            "phones"
          ]
        },
        {
          "name": "_extract_job_openings",
          "parameters": [
            "self",
            "soup"
          ],
          "lines": 26,
          "complexity": 4,
          "calls": [
            "select",
            "find",
            "append",
            "strip",
            "get_text"
          ],
          "variables": [
            "jobs",
            "job_selectors",
            "elements",
            "title_elem"
          ]
        },
        {
          "name": "_extract_hiring_team",
          "parameters": [
            "self",
            "soup"
          ],
          "lines": 26,
          "complexity": 6,
          "calls": [
            "select",
            "find_all",
            "strip",
            "append",
            "get_text",
            "len"
          ],
          "variables": [
            "hiring_team",
            "hr_selectors",
            "elements",
            "names",
            "name_text"
          ]
        },
        {
          "name": "_extract_application_process",
          "parameters": [
            "self",
            "soup"
          ],
          "lines": 18,
          "complexity": 3,
          "calls": [
            "select_one",
            "strip",
            "get_text"
          ],
          "variables": [
            "process_info",
            "app_selectors",
            "element"
          ]
        },
        {
          "name": "generate_mermaid_org_chart",
          "parameters": [
            "self",
            "company_data"
          ],
          "lines": 20,
          "complexity": 3,
          "calls": [
            "get",
            "enumerate",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "company_name",
            "leadership",
            "mermaid_code",
            "role",
            "name",
            "node_id"
          ]
        },
        {
          "name": "run_research",
          "parameters": [
            "self"
          ],
          "lines": 17,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "scrape_company_info",
            "generate_mermaid_org_chart",
            "sleep"
          ],
          "variables": [
            "company_data",
            "mermaid_chart"
          ]
        },
        {
          "name": "save_results",
          "parameters": [
            "self",
            "filename"
          ],
          "lines": 5,
          "complexity": 1,
          "calls": [
            "print",
            "open",
            "dump"
          ],
          "variables": []
        },
        {
          "name": "generate_contact_database",
          "parameters": [
            "self"
          ],
          "lines": 46,
          "complexity": 6,
          "calls": [
            "items",
            "get",
            "get",
            "get",
            "get",
            "append",
            "append",
            "get",
            "get",
            "get",
            "append",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "contact_db",
            "contacts",
            "leadership",
            "hiring_team",
            "contact_info"
          ]
        }
      ],
      "variables": [
        "research_system",
        "results",
        "contact_db",
        "leadership",
        "leadership_selectors",
        "meta_desc",
        "about_selectors",
        "contact_info",
        "email_pattern",
        "emails",
        "phone_pattern",
        "phones",
        "jobs",
        "job_selectors",
        "hiring_team",
        "hr_selectors",
        "process_info",
        "app_selectors",
        "company_name",
        "leadership",
        "mermaid_code",
        "contact_db",
        "main_info",
        "careers_info",
        "linkedin_info",
        "response",
        "soup",
        "leadership_info",
        "description",
        "contact_info",
        "response",
        "soup",
        "job_openings",
        "hiring_team",
        "application_process",
        "elements",
        "element",
        "elements",
        "elements",
        "element",
        "role",
        "name",
        "node_id",
        "company_data",
        "mermaid_chart",
        "contacts",
        "leadership",
        "hiring_team",
        "contact_info",
        "names",
        "title_elem",
        "names",
        "name_text",
        "name_text"
      ],
      "imports": [
        "json",
        "requests",
        "bs4.BeautifulSoup",
        "re",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "time"
      ],
      "classes": [
        "CompanyResearchSystem"
      ],
      "total_lines": 453,
      "code_lines": 350,
      "complexity_score": 33,
      "purpose": "General utility script"
    },
    "scripts/python/alex-ai-universal-deployment-system.py": {
      "file_name": "alex-ai-universal-deployment-system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 12,
          "complexity": 1,
          "calls": [
            "AlexAIUniversalDeployment",
            "execute_universal_deployment",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "deployment",
            "results"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 41,
          "complexity": 1,
          "calls": [
            "isoformat",
            "now"
          ],
          "variables": []
        },
        {
          "name": "validate_universal_package",
          "parameters": [
            "self"
          ],
          "lines": 64,
          "complexity": 5,
          "calls": [
            "print",
            "len",
            "all",
            "exists",
            "print",
            "join",
            "exists",
            "print",
            "print",
            "getsize",
            "print",
            "print",
            "values"
          ],
          "variables": [
            "validation_results",
            "package_dir",
            "required_files",
            "all_files_exist",
            "file_path",
            "file_size"
          ]
        },
        {
          "name": "validate_alex_ai_core",
          "parameters": [
            "self"
          ],
          "lines": 59,
          "complexity": 8,
          "calls": [
            "print",
            "join",
            "exists",
            "all",
            "exists",
            "print",
            "join",
            "exists",
            "values",
            "print",
            "print",
            "open",
            "read",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "validation_results",
            "core_dir",
            "manifest_path",
            "enhanced_components",
            "all_components_exist",
            "component_path",
            "content"
          ]
        },
        {
          "name": "create_deployment_manifest",
          "parameters": [
            "self"
          ],
          "lines": 74,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "isoformat",
            "open",
            "dump",
            "int",
            "int",
            "now",
            "timestamp",
            "timestamp",
            "now",
            "now"
          ],
          "variables": [
            "deployment_manifest",
            "manifest_file"
          ]
        },
        {
          "name": "simulate_cross_project_deployment",
          "parameters": [
            "self"
          ],
          "lines": 111,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "print",
            "isoformat",
            "print",
            "isoformat",
            "append",
            "print",
            "now",
            "now",
            "isoformat",
            "now"
          ],
          "variables": [
            "simulated_projects",
            "deployment_results",
            "project_name",
            "project_result",
            "components",
            "integration_tests"
          ]
        },
        {
          "name": "create_deployment_summary",
          "parameters": [
            "self",
            "validation_results",
            "deployment_manifest",
            "deployment_results"
          ],
          "lines": 37,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "isoformat",
            "open",
            "dump",
            "get",
            "get",
            "int",
            "int",
            "now",
            "timestamp",
            "timestamp",
            "get",
            "now",
            "now"
          ],
          "variables": [
            "summary",
            "summary_file"
          ]
        },
        {
          "name": "execute_universal_deployment",
          "parameters": [
            "self"
          ],
          "lines": 44,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "validate_universal_package",
            "print",
            "print",
            "validate_alex_ai_core",
            "print",
            "print",
            "create_deployment_manifest",
            "print",
            "print",
            "simulate_cross_project_deployment",
            "print",
            "print",
            "create_deployment_summary",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "validation_results",
            "core_validation",
            "deployment_manifest",
            "deployment_results",
            "deployment_summary"
          ]
        }
      ],
      "variables": [
        "deployment",
        "results",
        "validation_results",
        "package_dir",
        "required_files",
        "all_files_exist",
        "validation_results",
        "core_dir",
        "manifest_path",
        "enhanced_components",
        "all_components_exist",
        "deployment_manifest",
        "manifest_file",
        "simulated_projects",
        "deployment_results",
        "summary",
        "summary_file",
        "validation_results",
        "core_validation",
        "deployment_manifest",
        "deployment_results",
        "deployment_summary",
        "file_path",
        "component_path",
        "project_name",
        "project_result",
        "components",
        "integration_tests",
        "file_size",
        "content"
      ],
      "imports": [
        "json",
        "datetime",
        "os",
        "shutil",
        "subprocess",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "AlexAIUniversalDeployment"
      ],
      "total_lines": 467,
      "code_lines": 384,
      "complexity_score": 14,
      "purpose": "Deployment and setup"
    },
    "scripts/python/alex_ai_comprehensive_assessment.py": {
      "file_name": "alex_ai_comprehensive_assessment.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 17,
          "complexity": 1,
          "calls": [
            "AlexAIComprehensiveAssessment",
            "run_comprehensive_assessment",
            "print_comprehensive_report",
            "strftime",
            "print",
            "open",
            "dump",
            "now"
          ],
          "variables": [
            "assessor",
            "assessment",
            "timestamp",
            "filename"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 3,
          "complexity": 1,
          "calls": [
            "AlexAIMemorySharingAssessment",
            "CrewPersonalHistoryAnalysis"
          ],
          "variables": []
        },
        {
          "name": "run_comprehensive_assessment",
          "parameters": [
            "self"
          ],
          "lines": 28,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "run_comprehensive_assessment",
            "print",
            "print",
            "run_comprehensive_crew_analysis",
            "isoformat",
            "_assess_overall_health",
            "_generate_recommendations",
            "_generate_next_steps",
            "now"
          ],
          "variables": [
            "memory_assessment",
            "crew_analysis",
            "comprehensive"
          ]
        },
        {
          "name": "_assess_overall_health",
          "parameters": [
            "self",
            "memory_assessment",
            "crew_analysis"
          ],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "get",
            "get",
            "min",
            "min"
          ],
          "variables": [
            "memory_score",
            "crew_activity",
            "total_memories",
            "health_score",
            "status",
            "description",
            "status",
            "description",
            "status",
            "description",
            "status",
            "description"
          ]
        },
        {
          "name": "_generate_recommendations",
          "parameters": [
            "self",
            "memory_assessment",
            "crew_analysis"
          ],
          "lines": 46,
          "complexity": 5,
          "calls": [
            "get",
            "append",
            "append",
            "append",
            "get",
            "append"
          ],
          "variables": [
            "recommendations",
            "crew_stats"
          ]
        },
        {
          "name": "_generate_next_steps",
          "parameters": [
            "self",
            "memory_assessment",
            "crew_analysis"
          ],
          "lines": 37,
          "complexity": 1,
          "calls": [
            "append",
            "append",
            "append",
            "append"
          ],
          "variables": [
            "next_steps"
          ]
        },
        {
          "name": "print_comprehensive_report",
          "parameters": [
            "self",
            "assessment"
          ],
          "lines": 48,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "enumerate",
            "print",
            "enumerate",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len"
          ],
          "variables": [
            "health",
            "memory",
            "crew",
            "priority_icon",
            "timeline_icon"
          ]
        }
      ],
      "variables": [
        "assessor",
        "assessment",
        "timestamp",
        "filename",
        "memory_assessment",
        "crew_analysis",
        "comprehensive",
        "memory_score",
        "crew_activity",
        "total_memories",
        "health_score",
        "recommendations",
        "crew_stats",
        "next_steps",
        "health",
        "memory",
        "crew",
        "status",
        "description",
        "priority_icon",
        "timeline_icon",
        "status",
        "description",
        "status",
        "description",
        "status",
        "description"
      ],
      "imports": [
        "json",
        "os",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "alex_ai_memory_sharing_assessment.AlexAIMemorySharingAssessment",
        "crew_personal_history_analysis.CrewPersonalHistoryAnalysis"
      ],
      "classes": [
        "AlexAIComprehensiveAssessment"
      ],
      "total_lines": 233,
      "code_lines": 179,
      "complexity_score": 11,
      "purpose": "General utility script"
    },
    "scripts/python/business_readiness_assessment.py": {
      "file_name": "business_readiness_assessment.py",
      "file_type": "py",
      "functions": [
        {
          "name": "simulate_business_readiness_assessment",
          "parameters": [],
          "lines": 353,
          "complexity": 1,
          "calls": [
            "now",
            "isoformat",
            "int",
            "isoformat",
            "timestamp"
          ],
          "variables": [
            "timestamp",
            "session_id",
            "crew_assessments",
            "overall_assessment"
          ]
        },
        {
          "name": "main",
          "parameters": [],
          "lines": 74,
          "complexity": 8,
          "calls": [
            "print",
            "print",
            "print",
            "simulate_business_readiness_assessment",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "dump",
            "int",
            "timestamp",
            "title",
            "title",
            "join",
            "now",
            "replace",
            "replace"
          ],
          "variables": [
            "assessment_results",
            "overall",
            "output_file"
          ]
        }
      ],
      "variables": [
        "timestamp",
        "session_id",
        "crew_assessments",
        "overall_assessment",
        "assessment_results",
        "overall",
        "output_file"
      ],
      "imports": [
        "json",
        "datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [],
      "total_lines": 442,
      "code_lines": 409,
      "complexity_score": 8,
      "purpose": "General utility script"
    },
    "scripts/python/demo_youtube_scraper_system.py": {
      "file_name": "demo_youtube_scraper_system.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 39,
          "complexity": 5,
          "calls": [
            "print",
            "print",
            "print",
            "YouTubeScraperSystemDemo",
            "print",
            "print",
            "print",
            "print",
            "strip",
            "print",
            "print",
            "print",
            "print",
            "run_complete_demo",
            "print",
            "input",
            "interactive_demo",
            "print",
            "run_complete_demo",
            "getenv"
          ],
          "variables": [
            "required_env_vars",
            "missing_vars",
            "demo",
            "choice"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 10,
          "complexity": 1,
          "calls": [
            "YouTubeScraperCrewIntegration",
            "ObservationLoungeCoordinator"
          ],
          "variables": []
        },
        {
          "name": "run_complete_demo",
          "parameters": [
            "self"
          ],
          "lines": 22,
          "complexity": 1,
          "calls": [
            "print",
            "print",
            "print",
            "demo_crew_member_listing",
            "demo_individual_crew_analysis",
            "demo_crew_coordination_analysis",
            "demo_batch_analysis_perspectives",
            "demo_analysis_history",
            "print"
          ],
          "variables": []
        },
        {
          "name": "demo_crew_member_listing",
          "parameters": [
            "self"
          ],
          "lines": 21,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "list_crew_members",
            "print",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "result"
          ]
        },
        {
          "name": "demo_individual_crew_analysis",
          "parameters": [
            "self"
          ],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "request_youtube_analysis",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print"
          ],
          "variables": [
            "video_url",
            "crew_member",
            "result",
            "analysis"
          ]
        },
        {
          "name": "demo_crew_coordination_analysis",
          "parameters": [
            "self"
          ],
          "lines": 36,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "coordinate_observation_lounge",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "int",
            "timestamp",
            "get",
            "now"
          ],
          "variables": [
            "session_data",
            "result",
            "analysis_result"
          ]
        },
        {
          "name": "demo_batch_analysis_perspectives",
          "parameters": [
            "self"
          ],
          "lines": 34,
          "complexity": 3,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "len",
            "print",
            "print",
            "print",
            "print",
            "request_youtube_analysis",
            "append",
            "print",
            "print",
            "len",
            "len",
            "len",
            "set"
          ],
          "variables": [
            "video_url",
            "crew_members",
            "results",
            "successful",
            "result"
          ]
        },
        {
          "name": "demo_analysis_history",
          "parameters": [
            "self"
          ],
          "lines": 25,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "get_crew_analysis_history",
            "print",
            "print",
            "print",
            "print",
            "enumerate",
            "print",
            "print",
            "print",
            "print",
            "print",
            "get",
            "get",
            "get",
            "get"
          ],
          "variables": [
            "history_result"
          ]
        },
        {
          "name": "interactive_demo",
          "parameters": [
            "self"
          ],
          "lines": 32,
          "complexity": 7,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "strip",
            "print",
            "demo_crew_member_listing",
            "input",
            "interactive_single_analysis",
            "interactive_batch_analysis",
            "demo_analysis_history",
            "print",
            "print"
          ],
          "variables": [
            "choice"
          ]
        },
        {
          "name": "interactive_single_analysis",
          "parameters": [
            "self"
          ],
          "lines": 36,
          "complexity": 6,
          "calls": [
            "print",
            "print",
            "list_crew_members",
            "print",
            "enumerate",
            "strip",
            "print",
            "request_youtube_analysis",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "int",
            "list",
            "print",
            "input",
            "input",
            "keys"
          ],
          "variables": [
            "crew_list",
            "video_url",
            "result",
            "crew_choice",
            "crew_member_id"
          ]
        },
        {
          "name": "interactive_batch_analysis",
          "parameters": [
            "self"
          ],
          "lines": 45,
          "complexity": 8,
          "calls": [
            "print",
            "print",
            "print",
            "list_crew_members",
            "print",
            "enumerate",
            "print",
            "batch_analyze_videos",
            "strip",
            "append",
            "print",
            "print",
            "items",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "int",
            "list",
            "print",
            "input",
            "input",
            "keys",
            "len"
          ],
          "variables": [
            "video_urls",
            "crew_list",
            "result",
            "url",
            "crew_choice",
            "crew_member_id"
          ]
        }
      ],
      "variables": [
        "required_env_vars",
        "missing_vars",
        "demo",
        "choice",
        "result",
        "video_url",
        "crew_member",
        "result",
        "session_data",
        "result",
        "video_url",
        "crew_members",
        "results",
        "successful",
        "history_result",
        "crew_list",
        "video_url",
        "result",
        "video_urls",
        "crew_list",
        "result",
        "analysis_result",
        "result",
        "choice",
        "crew_choice",
        "crew_member_id",
        "url",
        "crew_choice",
        "crew_member_id",
        "analysis"
      ],
      "imports": [
        "json",
        "sys",
        "os",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "youtube_scraper_crew_integration.YouTubeScraperCrewIntegration",
        "crew_coordinator.ObservationLoungeCoordinator"
      ],
      "classes": [
        "YouTubeScraperSystemDemo"
      ],
      "total_lines": 363,
      "code_lines": 274,
      "complexity_score": 38,
      "purpose": "General utility script"
    },
    "scripts/python/clean_secrets.py": {
      "file_name": "clean_secrets.py",
      "file_type": "py",
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 24,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "clean_file",
          "parameters": [
            "self",
            "file_path"
          ],
          "lines": 30,
          "complexity": 4,
          "calls": [
            "sub",
            "sub",
            "sub",
            "open",
            "read",
            "sub",
            "print",
            "print",
            "print",
            "open",
            "write"
          ],
          "variables": [
            "original_content",
            "content",
            "content",
            "content",
            "content",
            "content"
          ]
        },
        {
          "name": "find_files_with_secrets",
          "parameters": [
            "self"
          ],
          "lines": 27,
          "complexity": 8,
          "calls": [
            "walk",
            "any",
            "join",
            "endswith",
            "startswith",
            "open",
            "read",
            "search",
            "append"
          ],
          "variables": [
            "files_with_secrets",
            "extensions",
            "file_path",
            "content"
          ]
        },
        {
          "name": "clean_all_secrets",
          "parameters": [
            "self"
          ],
          "lines": 14,
          "complexity": 3,
          "calls": [
            "print",
            "find_files_with_secrets",
            "print",
            "print",
            "clean_file",
            "len"
          ],
          "variables": [
            "files_with_secrets",
            "cleaned_count"
          ]
        }
      ],
      "variables": [
        "cleaner",
        "files_with_secrets",
        "extensions",
        "files_with_secrets",
        "cleaned_count",
        "original_content",
        "content",
        "content",
        "content",
        "content",
        "content",
        "file_path",
        "content"
      ],
      "imports": [
        "os",
        "re",
        "typing.List"
      ],
      "classes": [
        "SecretCleaner"
      ],
      "total_lines": 114,
      "code_lines": 86,
      "complexity_score": 14,
      "purpose": "General utility script"
    },
    "scripts/python/store_crew_memories_supabase.py": {
      "file_name": "store_crew_memories_supabase.py",
      "file_type": "py",
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "lines": 26,
          "complexity": 3,
          "calls": [
            "max",
            "print",
            "SupabaseMemoryStorage",
            "store_crew_memories",
            "create_memory_summary",
            "print",
            "print",
            "print",
            "listdir",
            "startswith",
            "endswith"
          ],
          "variables": [
            "memories_files",
            "latest_file",
            "storage",
            "result",
            "summary"
          ]
        },
        {
          "name": "__init__",
          "parameters": [
            "self"
          ],
          "lines": 8,
          "complexity": 1,
          "calls": [],
          "variables": []
        },
        {
          "name": "store_crew_memories",
          "parameters": [
            "self",
            "memories_file"
          ],
          "lines": 58,
          "complexity": 4,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "load",
            "post",
            "len",
            "isoformat",
            "print",
            "print",
            "print",
            "now"
          ],
          "variables": [
            "stored_count",
            "failed_count",
            "memories",
            "memory_data",
            "response"
          ]
        },
        {
          "name": "create_memory_summary",
          "parameters": [
            "self",
            "memories_file"
          ],
          "lines": 38,
          "complexity": 2,
          "calls": [
            "print",
            "print",
            "print",
            "print",
            "print",
            "open",
            "load",
            "len",
            "isoformat",
            "open",
            "dump",
            "get",
            "get",
            "get",
            "now",
            "len",
            "len",
            "len",
            "strftime",
            "now"
          ],
          "variables": [
            "crew_member_counts",
            "memory_type_counts",
            "category_counts",
            "summary",
            "memories",
            "crew",
            "mem_type",
            "category"
          ]
        }
      ],
      "variables": [
        "memories_files",
        "latest_file",
        "storage",
        "result",
        "summary",
        "stored_count",
        "failed_count",
        "crew_member_counts",
        "memory_type_counts",
        "category_counts",
        "summary",
        "memories",
        "memories",
        "crew",
        "mem_type",
        "category",
        "memory_data",
        "response"
      ],
      "imports": [
        "json",
        "os",
        "requests",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "SupabaseMemoryStorage"
      ],
      "total_lines": 150,
      "code_lines": 108,
      "complexity_score": 8,
      "purpose": "General utility script"
    },
    "scripts/templates/safe-output/milestone.sh": {
      "file_name": "milestone.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_milestone",
          "parameters": [],
          "lines": 10,
          "complexity": 1,
          "calls": [],
          "variables": [
            "title",
            "description"
          ]
        }
      ],
      "variables": [
        "title",
        "description"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 17,
      "code_lines": 9,
      "complexity_score": 0,
      "purpose": "General utility script"
    },
    "scripts/templates/safe-output/progress.sh": {
      "file_name": "progress.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_progress",
          "parameters": [],
          "lines": 12,
          "complexity": 2,
          "calls": [],
          "variables": [
            "step",
            "status"
          ]
        }
      ],
      "variables": [
        "step",
        "status"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 19,
      "code_lines": 11,
      "complexity_score": 1,
      "purpose": "General utility script"
    },
    "scripts/templates/safe-output/list.sh": {
      "file_name": "list.sh",
      "file_type": "sh",
      "functions": [
        {
          "name": "safe_list",
          "parameters": [],
          "lines": 15,
          "complexity": 2,
          "calls": [],
          "variables": [
            "title",
            "items"
          ]
        }
      ],
      "variables": [
        "title",
        "items"
      ],
      "imports": [],
      "classes": [],
      "total_lines": 22,
      "code_lines": 12,
      "complexity_score": 1,
      "purpose": "General utility script"
    }
  },
  "function_registry": {
    "log_info": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-intelligent-discovery.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "log_success": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-intelligent-discovery.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "log_warning": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-intelligent-discovery.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "log_error": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-intelligent-discovery.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "check_prerequisites": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 4
      },
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 36,
        "complexity": 8
      },
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 25,
        "complexity": 6
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 28,
        "complexity": 5
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 8
      }
    ],
    "test_n8n_connection": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 13,
        "complexity": 2
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 13,
        "complexity": 2
      },
      {
        "file_path": "scripts/deploy-complete-n8n-infrastructure.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      }
    ],
    "backup_workflows": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 3
      }
    ],
    "validate_workflow": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 26,
        "complexity": 4
      }
    ],
    "get_workflow_id": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      }
    ],
    "deploy_workflow": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 66,
        "complexity": 4
      },
      {
        "file_path": "scripts/deploy-n8n-with-credentials.sh",
        "parameters": [],
        "lines": 28,
        "complexity": 3
      },
      {
        "file_path": "scripts/deploy-n8n-webhooks.sh",
        "parameters": [],
        "lines": 75,
        "complexity": 7
      }
    ],
    "test_workflow": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/n8n_integration_test_system.py",
        "parameters": [
          "self",
          "workflow_test"
        ],
        "lines": 80,
        "complexity": 7
      }
    ],
    "generate_deployment_report": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 50,
        "complexity": 4
      }
    ],
    "main": [
      {
        "file_path": "scripts/n8n-cicd-sync.sh",
        "parameters": [],
        "lines": 48,
        "complexity": 6
      },
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [],
        "lines": 44,
        "complexity": 7
      },
      {
        "file_path": "scripts/setup-supabase-with-credentials.sh",
        "parameters": [],
        "lines": 30,
        "complexity": 2
      },
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [],
        "lines": 35,
        "complexity": 4
      },
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 13,
        "complexity": 3
      },
      {
        "file_path": "scripts/milestone-push-system.sh",
        "parameters": [],
        "lines": 34,
        "complexity": 2
      },
      {
        "file_path": "scripts/deploy-n8n-with-credentials.sh",
        "parameters": [],
        "lines": 33,
        "complexity": 3
      },
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [],
        "lines": 17,
        "complexity": 2
      },
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 21,
        "complexity": 3
      },
      {
        "file_path": "scripts/add-quote-handling-memory.py",
        "parameters": [],
        "lines": 29,
        "complexity": 4
      },
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 48,
        "complexity": 4
      },
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [],
        "lines": 38,
        "complexity": 6
      },
      {
        "file_path": "scripts/quick-production-test.sh",
        "parameters": [],
        "lines": 31,
        "complexity": 2
      },
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 9,
        "complexity": 1
      },
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [],
        "lines": 22,
        "complexity": 3
      },
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 43,
        "complexity": 5
      },
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      },
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [],
        "lines": 30,
        "complexity": 5
      },
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 38,
        "complexity": 3
      },
      {
        "file_path": "scripts/validate-api-keys.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 3
      },
      {
        "file_path": "scripts/add-architecture-memory.py",
        "parameters": [],
        "lines": 29,
        "complexity": 4
      },
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 14,
        "complexity": 2
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [],
        "lines": 39,
        "complexity": 6
      },
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 28,
        "complexity": 2
      },
      {
        "file_path": "scripts/master-safe-execute.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/test-intelligent-discovery.sh",
        "parameters": [],
        "lines": 8,
        "complexity": 1
      },
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 73,
        "complexity": 4
      },
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 27,
        "complexity": 1
      },
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 17,
        "complexity": 1
      },
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 33,
        "complexity": 3
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 2
      },
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 27,
        "complexity": 2
      },
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      },
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      },
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [],
        "lines": 53,
        "complexity": 7
      },
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [],
        "lines": 41,
        "complexity": 1
      },
      {
        "file_path": "scripts/validate-strings.sh",
        "parameters": [],
        "lines": 14,
        "complexity": 3
      },
      {
        "file_path": "scripts/add-quote-handling-memory-simple.py",
        "parameters": [],
        "lines": 33,
        "complexity": 7
      },
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 33,
        "complexity": 3
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 9,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 9,
        "complexity": 1
      },
      {
        "file_path": "scripts/deploy-complete-n8n-infrastructure.sh",
        "parameters": [],
        "lines": 33,
        "complexity": 5
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 14,
        "complexity": 3
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 14,
        "complexity": 3
      },
      {
        "file_path": "scripts/generated/test-basic.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [],
        "lines": 19,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [],
        "lines": 28,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/turborepo_implementation_plan.py",
        "parameters": [],
        "lines": 25,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_integration_system.py",
        "parameters": [],
        "lines": 41,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/comprehensive_market_research_system.py",
        "parameters": [],
        "lines": 80,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [],
        "lines": 26,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/crew_coordination_update_system.py",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [],
        "lines": 25,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [],
        "lines": 120,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [],
        "lines": 64,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [],
        "lines": 27,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [],
        "lines": 21,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [],
        "lines": 42,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [],
        "lines": 23,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/crew_learning_assessment.py",
        "parameters": [],
        "lines": 14,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/optimized_web_crawler_system.py",
        "parameters": [],
        "lines": 97,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/observation_lounge_crew_debrief.py",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [],
        "lines": 12,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/cursor_ai_behavior_analysis.py",
        "parameters": [],
        "lines": 26,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [],
        "lines": 11,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [],
        "lines": 23,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [],
        "lines": 43,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [],
        "lines": 35,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [],
        "lines": 39,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [],
        "lines": 23,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/simple_youtube_crew_memory_demo.py",
        "parameters": [],
        "lines": 30,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [],
        "lines": 29,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [],
        "lines": 23,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/knowledge_gap_research_plan.py",
        "parameters": [],
        "lines": 92,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [],
        "lines": 73,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [],
        "lines": 80,
        "complexity": 10
      },
      {
        "file_path": "scripts/python/business_operations_legal_system.py",
        "parameters": [],
        "lines": 105,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [],
        "lines": 33,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [],
        "lines": 24,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [],
        "lines": 88,
        "complexity": 6
      },
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [],
        "lines": 39,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/crew_business_readiness_consensus.py",
        "parameters": [],
        "lines": 83,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [],
        "lines": 22,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [],
        "lines": 25,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [],
        "lines": 33,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [],
        "lines": 57,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [],
        "lines": 17,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/test_alex_ai_system.py",
        "parameters": [],
        "lines": 43,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/fix_credential_security.py",
        "parameters": [],
        "lines": 35,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/progressive_git_push_system.py",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/yolo_mode_issue_investigation.py",
        "parameters": [],
        "lines": 19,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/mcp_library_computer_system.py",
        "parameters": [],
        "lines": 17,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [],
        "lines": 26,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/n8n_integration_test_system.py",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/proper_yolo_mode_configuration.py",
        "parameters": [],
        "lines": 27,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [],
        "lines": 28,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [],
        "lines": 12,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_comprehensive_assessment.py",
        "parameters": [],
        "lines": 17,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/business_readiness_assessment.py",
        "parameters": [],
        "lines": 74,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [],
        "lines": 39,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/store_crew_memories_supabase.py",
        "parameters": [],
        "lines": 26,
        "complexity": 3
      }
    ],
    "print_status": [
      {
        "file_path": "scripts/greg-community-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      },
      {
        "file_path": "scripts/channel-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "print_success": [
      {
        "file_path": "scripts/greg-community-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/channel-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/enhanced-ai-prompts-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "print_error": [
      {
        "file_path": "scripts/greg-community-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/channel-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/enhanced-ai-prompts-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "print_section": [
      {
        "file_path": "scripts/greg-community-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/channel-intelligence-dual-milestone-push.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      }
    ],
    "__init__": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "scripts_dir"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "analysis_file"
        ],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "supabase_url",
          "supabase_key"
        ],
        "lines": 10,
        "complexity": 3
      },
      {
        "file_path": "scripts/add-quote-handling-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 92,
        "complexity": 1
      },
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self",
          "scripts_dir"
        ],
        "lines": 10,
        "complexity": 1
      },
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self"
        ],
        "lines": 13,
        "complexity": 1
      },
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "scripts_dir"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/add-architecture-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 93,
        "complexity": 1
      },
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "scripts_dir"
        ],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "scripts_dir"
        ],
        "lines": 18,
        "complexity": 1
      },
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "scripts_dir"
        ],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/add-quote-handling-memory-simple.py",
        "parameters": [
          "self"
        ],
        "lines": 91,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 62,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/turborepo_implementation_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_integration_system.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/comprehensive_market_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 62,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 28,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self"
        ],
        "lines": 12,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [
          "self"
        ],
        "lines": 32,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/crew_learning_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/optimized_web_crawler_system.py",
        "parameters": [
          "self"
        ],
        "lines": 51,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/cursor_ai_behavior_analysis.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 2,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 2,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 67,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 7,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 2,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/simple_youtube_crew_memory_demo.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "supabase_client",
          "openai_client"
        ],
        "lines": 9,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 158,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/business_operations_legal_system.py",
        "parameters": [
          "self"
        ],
        "lines": 108,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self",
          "agent_id",
          "specialization",
          "enhanced_prompts_system"
        ],
        "lines": 8,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [
          "self"
        ],
        "lines": 109,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self"
        ],
        "lines": 63,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/mcp_integration_system.py",
        "parameters": [
          "self",
          "supabase_client",
          "openai_client",
          "n8n_base_url"
        ],
        "lines": 8,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self"
        ],
        "lines": 120,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [
          "self"
        ],
        "lines": 50,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 76,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/progressive_git_push_system.py",
        "parameters": [
          "self"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/yolo_mode_issue_investigation.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/mcp_library_computer_system.py",
        "parameters": [
          "self"
        ],
        "lines": 107,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/n8n_integration_test_system.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/proper_yolo_mode_configuration.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 2,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "project_root"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 86,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_comprehensive_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 10,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/clean_secrets.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/store_crew_memories_supabase.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 1
      }
    ],
    "discover_script": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "category",
          "requirements"
        ],
        "lines": 28,
        "complexity": 6
      }
    ],
    "find_similar_scripts": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "category",
          "analysis"
        ],
        "lines": 14,
        "complexity": 3
      }
    ],
    "calculate_similarity": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "script"
        ],
        "lines": 39,
        "complexity": 11
      }
    ],
    "extend_existing_script_recommendation": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "existing_script",
          "purpose",
          "requirements"
        ],
        "lines": 15,
        "complexity": 1
      }
    ],
    "use_as_template_recommendation": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "template_script",
          "purpose",
          "requirements"
        ],
        "lines": 17,
        "complexity": 1
      }
    ],
    "create_new_script_recommendation": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "category",
          "requirements"
        ],
        "lines": 17,
        "complexity": 1
      }
    ],
    "generate_template_content": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "template_script",
          "purpose",
          "requirements"
        ],
        "lines": 15,
        "complexity": 2
      }
    ],
    "modify_template_for_purpose": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "template_content",
          "purpose",
          "requirements"
        ],
        "lines": 23,
        "complexity": 2
      }
    ],
    "generate_new_script_template": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "category",
          "requirements"
        ],
        "lines": 13,
        "complexity": 4
      }
    ],
    "get_file_extension_for_category": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "category"
        ],
        "lines": 13,
        "complexity": 1
      }
    ],
    "generate_python_template": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "requirements",
          "purpose_snake"
        ],
        "lines": 55,
        "complexity": 1
      }
    ],
    "generate_bash_template": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "requirements",
          "purpose_snake"
        ],
        "lines": 64,
        "complexity": 1
      }
    ],
    "generate_javascript_template": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "purpose",
          "requirements",
          "purpose_snake"
        ],
        "lines": 66,
        "complexity": 1
      }
    ],
    "load_analysis": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self"
        ],
        "lines": 10,
        "complexity": 3
      },
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 2
      }
    ],
    "save_recommendation": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "recommendation",
          "purpose"
        ],
        "lines": 30,
        "complexity": 3
      }
    ],
    "create_script_from_recommendation": [
      {
        "file_path": "scripts/intelligent-script-discovery.py",
        "parameters": [
          "self",
          "recommendation",
          "output_path"
        ],
        "lines": 24,
        "complexity": 4
      }
    ],
    "execute_sql": [
      {
        "file_path": "scripts/setup-supabase-with-credentials.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 2
      }
    ],
    "create_tables_direct": [
      {
        "file_path": "scripts/setup-supabase-with-credentials.sh",
        "parameters": [],
        "lines": 83,
        "complexity": 2
      }
    ],
    "create_indexes": [
      {
        "file_path": "scripts/setup-supabase-with-credentials.sh",
        "parameters": [],
        "lines": 19,
        "complexity": 2
      }
    ],
    "setup_rls": [
      {
        "file_path": "scripts/setup-supabase-with-credentials.sh",
        "parameters": [],
        "lines": 31,
        "complexity": 2
      }
    ],
    "test_tables": [
      {
        "file_path": "scripts/setup-supabase-with-credentials.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 4
      }
    ],
    "insert_test_data": [
      {
        "file_path": "scripts/setup-supabase-with-credentials.sh",
        "parameters": [],
        "lines": 58,
        "complexity": 3
      }
    ],
    "create_consolidation_plan": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 82,
        "complexity": 1
      },
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "duplicate_functions",
          "redundant_scripts"
        ],
        "lines": 37,
        "complexity": 5
      }
    ],
    "analyze_duplicates": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 15,
        "complexity": 4
      }
    ],
    "analyze_redundant_scripts": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 12,
        "complexity": 3
      }
    ],
    "create_consolidation_mapping": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 3
      }
    ],
    "group_scripts_by_subcategory": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "scripts"
        ],
        "lines": 16,
        "complexity": 3
      }
    ],
    "determine_subcategory": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "name",
          "purpose"
        ],
        "lines": 43,
        "complexity": 23
      }
    ],
    "get_consolidation_strategy": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "category",
          "script_count"
        ],
        "lines": 10,
        "complexity": 4
      }
    ],
    "calculate_scripts_after_consolidation": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 10,
        "complexity": 1
      }
    ],
    "calculate_space_saved": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      }
    ],
    "create_consolidated_script": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "scripts",
          "output_path"
        ],
        "lines": 21,
        "complexity": 5
      }
    ],
    "determine_script_type": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "scripts"
        ],
        "lines": 13,
        "complexity": 5
      }
    ],
    "create_consolidated_python_script": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "scripts",
          "output_path"
        ],
        "lines": 40,
        "complexity": 3
      }
    ],
    "create_consolidated_bash_script": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "scripts",
          "output_path"
        ],
        "lines": 44,
        "complexity": 3
      }
    ],
    "create_consolidated_javascript_script": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "scripts",
          "output_path"
        ],
        "lines": 48,
        "complexity": 3
      }
    ],
    "execute_consolidation": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "plan"
        ],
        "lines": 23,
        "complexity": 2
      }
    ],
    "create_new_directory_structure": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "structure"
        ],
        "lines": 9,
        "complexity": 3
      }
    ],
    "remove_duplicate_scripts": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 7,
        "complexity": 3
      }
    ],
    "consolidate_scripts": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self",
          "plan"
        ],
        "lines": 10,
        "complexity": 4
      }
    ],
    "create_backup": [
      {
        "file_path": "scripts/script-consolidation-plan.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 1
      }
    ],
    "print_info": [
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/enhanced-ai-prompts-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "print_warning": [
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/enhanced-ai-prompts-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "print_milestone": [
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      }
    ],
    "get_timestamp": [
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "create_milestone_message": [
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 54,
        "complexity": 3
      }
    ],
    "milestone_push": [
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 39,
        "complexity": 5
      },
      {
        "file_path": "scripts/safe-milestone-push.sh",
        "parameters": [],
        "lines": 31,
        "complexity": 2
      }
    ],
    "show_help": [
      {
        "file_path": "scripts/milestone-push.sh",
        "parameters": [],
        "lines": 18,
        "complexity": 1
      }
    ],
    "create_milestone_summary": [
      {
        "file_path": "scripts/milestone-push-system.sh",
        "parameters": [],
        "lines": 34,
        "complexity": 3
      },
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 138,
        "complexity": 9
      }
    ],
    "create_alexai_base_package": [
      {
        "file_path": "scripts/milestone-push-system.sh",
        "parameters": [],
        "lines": 75,
        "complexity": 1
      }
    ],
    "create_project_milestone_package": [
      {
        "file_path": "scripts/milestone-push-system.sh",
        "parameters": [],
        "lines": 85,
        "complexity": 3
      }
    ],
    "create_push_instructions": [
      {
        "file_path": "scripts/milestone-push-system.sh",
        "parameters": [],
        "lines": 103,
        "complexity": 4
      }
    ],
    "display_current_status": [
      {
        "file_path": "scripts/milestone-push-system.sh",
        "parameters": [],
        "lines": 30,
        "complexity": 1
      }
    ],
    "populateJobData": [
      {
        "file_path": "scripts/populate-job-data.js",
        "parameters": [],
        "lines": 66,
        "complexity": 4
      }
    ],
    "create_supabase_credentials": [
      {
        "file_path": "scripts/deploy-n8n-with-credentials.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 1
      }
    ],
    "activate_workflow": [
      {
        "file_path": "scripts/deploy-n8n-with-credentials.sh",
        "parameters": [],
        "lines": 17,
        "complexity": 2
      }
    ],
    "test_webhooks": [
      {
        "file_path": "scripts/deploy-n8n-with-credentials.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 3
      }
    ],
    "update_workflow": [
      {
        "file_path": "scripts/sync-n8n-unified-config.sh",
        "parameters": [],
        "lines": 32,
        "complexity": 3
      }
    ],
    "create_workflow": [
      {
        "file_path": "scripts/sync-n8n-unified-config.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 2
      }
    ],
    "create_script_embedding": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "script_content",
          "metadata"
        ],
        "lines": 19,
        "complexity": 2
      }
    ],
    "store_script_memory": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "script_metadata",
          "script_content"
        ],
        "lines": 44,
        "complexity": 3
      }
    ],
    "search_similar_scripts": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "query",
          "limit"
        ],
        "lines": 30,
        "complexity": 3
      }
    ],
    "find_existing_script": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "purpose",
          "category"
        ],
        "lines": 20,
        "complexity": 4
      }
    ],
    "suggest_script_extension": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "existing_script",
          "new_requirements"
        ],
        "lines": 51,
        "complexity": 11
      }
    ],
    "create_script_template": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "purpose",
          "category",
          "requirements"
        ],
        "lines": 30,
        "complexity": 3
      }
    ],
    "create_basic_template": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "purpose",
          "category",
          "requirements"
        ],
        "lines": 42,
        "complexity": 1
      }
    ],
    "create_script_header": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "purpose",
          "requirements"
        ],
        "lines": 32,
        "complexity": 1
      }
    ],
    "extract_relevant_functions": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "template_script",
          "requirements"
        ],
        "lines": 12,
        "complexity": 3
      }
    ],
    "extract_relevant_dependencies": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "template_script",
          "requirements"
        ],
        "lines": 4,
        "complexity": 1
      }
    ],
    "create_script_structure": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "template_script",
          "requirements"
        ],
        "lines": 3,
        "complexity": 1
      }
    ],
    "get_script_recommendations": [
      {
        "file_path": "scripts/script-memory-system.py",
        "parameters": [
          "self",
          "new_script_purpose"
        ],
        "lines": 54,
        "complexity": 5
      }
    ],
    "safe_execute": [
      {
        "file_path": "scripts/safe-execute.sh",
        "parameters": [],
        "lines": 23,
        "complexity": 4
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/master-safe-execute.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 23,
        "complexity": 5
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 23,
        "complexity": 4
      }
    ],
    "safe_status": [
      {
        "file_path": "scripts/safe-execute.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/master-safe-execute.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      }
    ],
    "safe_milestone": [
      {
        "file_path": "scripts/safe-execute.sh",
        "parameters": [],
        "lines": 10,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 9,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 9,
        "complexity": 1
      },
      {
        "file_path": "scripts/master-safe-execute.sh",
        "parameters": [],
        "lines": 9,
        "complexity": 1
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 10,
        "complexity": 1
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 10,
        "complexity": 1
      },
      {
        "file_path": "scripts/templates/safe-output/milestone.sh",
        "parameters": [],
        "lines": 10,
        "complexity": 1
      }
    ],
    "safe_progress": [
      {
        "file_path": "scripts/safe-execute.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 2
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 2
      },
      {
        "file_path": "scripts/master-safe-execute.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 2
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/templates/safe-output/progress.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      }
    ],
    "safe_list": [
      {
        "file_path": "scripts/safe-execute.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/master-safe-execute.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      },
      {
        "file_path": "scripts/templates/safe-output/list.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      }
    ],
    "analyze_conflicts": [
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 77,
        "complexity": 8
      }
    ],
    "check_workflow_conflicts": [
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 78,
        "complexity": 15
      }
    ],
    "check_circular_dependencies": [
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 4
      }
    ],
    "generate_conflict_matrix": [
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 36,
        "complexity": 5
      }
    ],
    "generate_resolution_recommendations": [
      {
        "file_path": "scripts/analyze-conflicts.sh",
        "parameters": [],
        "lines": 65,
        "complexity": 1
      }
    ],
    "add_memory_to_supabase": [
      {
        "file_path": "scripts/add-quote-handling-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 57,
        "complexity": 5
      }
    ],
    "add_memory_via_api": [
      {
        "file_path": "scripts/add-quote-handling-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 22,
        "complexity": 3
      }
    ],
    "save_memory_to_file": [
      {
        "file_path": "scripts/add-quote-handling-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 2
      },
      {
        "file_path": "scripts/add-architecture-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 2
      },
      {
        "file_path": "scripts/add-quote-handling-memory-simple.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 2
      }
    ],
    "add_memory": [
      {
        "file_path": "scripts/add-quote-handling-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 4
      },
      {
        "file_path": "scripts/add-architecture-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 38,
        "complexity": 3
      },
      {
        "file_path": "scripts/add-quote-handling-memory-simple.py",
        "parameters": [
          "self"
        ],
        "lines": 38,
        "complexity": 3
      }
    ],
    "check_hardcoded_credentials": [
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 6
      }
    ],
    "validate_authentication": [
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 26,
        "complexity": 6
      }
    ],
    "check_dangerous_commands": [
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 36,
        "complexity": 7
      }
    ],
    "validate_url_security": [
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 39,
        "complexity": 11
      }
    ],
    "check_sensitive_data": [
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 26,
        "complexity": 5
      }
    ],
    "validate_workflow_permissions": [
      {
        "file_path": "scripts/security-validation.sh",
        "parameters": [],
        "lines": 33,
        "complexity": 9
      }
    ],
    "validate_structure": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 23,
        "complexity": 1
      }
    ],
    "validate_directory_structure": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 14,
        "complexity": 3
      }
    ],
    "validate_consolidated_scripts": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 20,
        "complexity": 7
      }
    ],
    "validate_remaining_scripts": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 14,
        "complexity": 6
      }
    ],
    "check_script_structure": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self",
          "script_path"
        ],
        "lines": 19,
        "complexity": 8
      }
    ],
    "check_broken_references": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 17,
        "complexity": 6
      }
    ],
    "find_broken_references": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 29,
        "complexity": 5
      }
    ],
    "test_functionality": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 14,
        "complexity": 1
      }
    ],
    "test_script_analyzer": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 13,
        "complexity": 2
      }
    ],
    "test_intelligent_discovery": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 11,
        "complexity": 2
      }
    ],
    "test_consolidated_scripts": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 5
      }
    ],
    "generate_recommendations": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 38,
        "complexity": 9
      },
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 38,
        "complexity": 6
      }
    ],
    "generate_validation_report": [
      {
        "file_path": "scripts/validate-consolidated-structure.py",
        "parameters": [
          "self"
        ],
        "lines": 36,
        "complexity": 6
      }
    ],
    "test_result": [
      {
        "file_path": "scripts/quick-production-test.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      },
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      }
    ],
    "test_shell_generation": [
      {
        "file_path": "scripts/quick-production-test.sh",
        "parameters": [],
        "lines": 26,
        "complexity": 3
      },
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 4
      }
    ],
    "test_api_security": [
      {
        "file_path": "scripts/quick-production-test.sh",
        "parameters": [],
        "lines": 25,
        "complexity": 4
      }
    ],
    "test_nextjs": [
      {
        "file_path": "scripts/quick-production-test.sh",
        "parameters": [],
        "lines": 19,
        "complexity": 3
      }
    ],
    "test_error_handling": [
      {
        "file_path": "scripts/quick-production-test.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 2
      },
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 19,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 4
      }
    ],
    "test_performance": [
      {
        "file_path": "scripts/quick-production-test.sh",
        "parameters": [],
        "lines": 27,
        "complexity": 3
      },
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 21,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/enhanced_prompts_test_suite.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 5
      }
    ],
    "check_secrets": [
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 30,
        "complexity": 8
      }
    ],
    "check_env_files": [
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 5
      }
    ],
    "check_security_headers": [
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 4
      }
    ],
    "check_dependencies": [
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 16,
        "complexity": 6
      }
    ],
    "check_git_security": [
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 4
      }
    ],
    "check_file_permissions": [
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 13,
        "complexity": 3
      }
    ],
    "generate_report": [
      {
        "file_path": "scripts/security-audit.sh",
        "parameters": [],
        "lines": 19,
        "complexity": 4
      }
    ],
    "load_sync_history": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self"
        ],
        "lines": 14,
        "complexity": 3
      }
    ],
    "save_sync_history": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self"
        ],
        "lines": 7,
        "complexity": 2
      }
    ],
    "get_workflow_hash": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self",
          "workflow_data"
        ],
        "lines": 5,
        "complexity": 1
      }
    ],
    "fetch_n8n_workflows": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self"
        ],
        "lines": 26,
        "complexity": 3
      }
    ],
    "sync_workflow_from_n8n": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self",
          "workflow"
        ],
        "lines": 49,
        "complexity": 5
      }
    ],
    "analyze_workflow_changes": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self",
          "workflow"
        ],
        "lines": 63,
        "complexity": 7
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 53,
        "complexity": 4
      }
    ],
    "save_analysis": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self",
          "analysis"
        ],
        "lines": 17,
        "complexity": 2
      },
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "analysis"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "output_file"
        ],
        "lines": 44,
        "complexity": 1
      }
    ],
    "sync_from_n8n_to_dev": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self"
        ],
        "lines": 66,
        "complexity": 6
      }
    ],
    "generate_sync_report": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self",
          "sync_results"
        ],
        "lines": 53,
        "complexity": 6
      },
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 49,
        "complexity": 4
      }
    ],
    "run_sync": [
      {
        "file_path": "scripts/n8n-bidirectional-sync.py",
        "parameters": [
          "self"
        ],
        "lines": 27,
        "complexity": 2
      }
    ],
    "test_workflow_structure": [
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 37,
        "complexity": 9
      }
    ],
    "test_workflow_connectivity": [
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 35,
        "complexity": 5
      }
    ],
    "test_workflow_logic": [
      {
        "file_path": "scripts/test-workflows.sh",
        "parameters": [],
        "lines": 38,
        "complexity": 11
      }
    ],
    "check_n8n_health": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 19,
        "complexity": 2
      }
    ],
    "get_workflow_status": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 32,
        "complexity": 3
      }
    ],
    "check_sync_health": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 66,
        "complexity": 10
      }
    ],
    "measure_n8n_response_time": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 2
      }
    ],
    "calculate_sync_frequency": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 45,
        "complexity": 11
      }
    ],
    "generate_dashboard_data": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 4
      }
    ],
    "generate_alerts": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self",
          "sync_status"
        ],
        "lines": 43,
        "complexity": 6
      }
    ],
    "save_dashboard_data": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self",
          "dashboard_data"
        ],
        "lines": 11,
        "complexity": 2
      }
    ],
    "run_monitor": [
      {
        "file_path": "scripts/n8n-sync-monitor.py",
        "parameters": [
          "self"
        ],
        "lines": 35,
        "complexity": 7
      }
    ],
    "load_consolidation_mapping": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self"
        ],
        "lines": 9,
        "complexity": 2
      }
    ],
    "update_all_references": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self"
        ],
        "lines": 23,
        "complexity": 2
      }
    ],
    "update_script_files": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self"
        ],
        "lines": 7,
        "complexity": 4
      }
    ],
    "update_file_references": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 25,
        "complexity": 3
      }
    ],
    "update_script_calls": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 20,
        "complexity": 5
      }
    ],
    "update_imports": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 18,
        "complexity": 4
      }
    ],
    "update_relative_paths": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 17,
        "complexity": 5
      }
    ],
    "get_new_script_path": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "script_name"
        ],
        "lines": 12,
        "complexity": 5
      }
    ],
    "get_new_import_path": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "module_name"
        ],
        "lines": 12,
        "complexity": 5
      }
    ],
    "update_package_json": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self"
        ],
        "lines": 27,
        "complexity": 7
      }
    ],
    "update_documentation": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self"
        ],
        "lines": 11,
        "complexity": 3
      }
    ],
    "update_config_files": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self"
        ],
        "lines": 11,
        "complexity": 3
      }
    ],
    "create_script_index": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 9
      }
    ],
    "determine_script_category": [
      {
        "file_path": "scripts/update-script-references.py",
        "parameters": [
          "self",
          "script_name"
        ],
        "lines": 16,
        "complexity": 10
      }
    ],
    "log": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/validate-api-keys.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/generated/test-basic.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self",
          "message"
        ],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "message"
        ],
        "lines": 6,
        "complexity": 1
      }
    ],
    "assess_result": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 2
      }
    ],
    "assess_technical_requirements": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 39,
        "complexity": 7
      }
    ],
    "assess_security": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 36,
        "complexity": 6
      }
    ],
    "assess_documentation": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 41,
        "complexity": 7
      }
    ],
    "assess_performance": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 37,
        "complexity": 6
      }
    ],
    "assess_integration": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 31,
        "complexity": 5
      }
    ],
    "assess_support_system": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 24,
        "complexity": 4
      }
    ],
    "generate_readiness_report": [
      {
        "file_path": "scripts/production-readiness-assessment.sh",
        "parameters": [],
        "lines": 104,
        "complexity": 4
      }
    ],
    "print_header": [
      {
        "file_path": "scripts/alex-ai-universal-milestone-push.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/enhanced-ai-prompts-dual-milestone-push.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      }
    ],
    "print_step": [
      {
        "file_path": "scripts/alex-ai-universal-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/enhanced-ai-prompts-dual-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "validate_key_format": [
      {
        "file_path": "scripts/validate-api-keys.sh",
        "parameters": [],
        "lines": 24,
        "complexity": 4
      }
    ],
    "test_api_connectivity": [
      {
        "file_path": "scripts/validate-api-keys.sh",
        "parameters": [],
        "lines": 51,
        "complexity": 6
      }
    ],
    "validate_all_keys": [
      {
        "file_path": "scripts/validate-api-keys.sh",
        "parameters": [],
        "lines": 101,
        "complexity": 13
      }
    ],
    "create_memory_summary": [
      {
        "file_path": "scripts/add-architecture-memory.py",
        "parameters": [
          "self"
        ],
        "lines": 35,
        "complexity": 1
      },
      {
        "file_path": "scripts/add-quote-handling-memory-simple.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/store_crew_memories_supabase.py",
        "parameters": [
          "self",
          "memories_file"
        ],
        "lines": 38,
        "complexity": 2
      }
    ],
    "analyze_production_changes": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 72,
        "complexity": 5
      }
    ],
    "analyze_workflow_impact": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 49,
        "complexity": 2
      }
    ],
    "get_workflow_analysis": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 50,
        "complexity": 17
      }
    ],
    "get_security_analysis": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 8
      }
    ],
    "get_performance_analysis": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 10
      }
    ],
    "get_dependency_analysis": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 29,
        "complexity": 8
      }
    ],
    "assess_overall_risk": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 28,
        "complexity": 5
      }
    ],
    "generate_risk_assessment": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 1
      }
    ],
    "count_risk_level": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 31,
        "complexity": 7
      }
    ],
    "generate_impact_matrix": [
      {
        "file_path": "scripts/analyze-production-changes.sh",
        "parameters": [],
        "lines": 38,
        "complexity": 7
      }
    ],
    "safe_echo": [
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/master-safe-execute.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "fix_script": [
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 1
      }
    ],
    "create_master_safe_script": [
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      }
    ],
    "demonstrate_fix": [
      {
        "file_path": "scripts/comprehensive-string-fix.sh",
        "parameters": [],
        "lines": 24,
        "complexity": 1
      }
    ],
    "check_git_repo": [
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 2
      }
    ],
    "get_current_branch": [
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "check_git_status": [
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 8,
        "complexity": 2
      }
    ],
    "commit_and_push": [
      {
        "file_path": "scripts/alex-ai-universal-git-milestone-push.sh",
        "parameters": [],
        "lines": 46,
        "complexity": 4
      }
    ],
    "define_categories": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 139,
        "complexity": 1
      }
    ],
    "analyze_script": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 60,
        "complexity": 2
      },
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 28,
        "complexity": 6
      }
    ],
    "extract_functions": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_type"
        ],
        "lines": 19,
        "complexity": 6
      }
    ],
    "extract_variables": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_type"
        ],
        "lines": 18,
        "complexity": 4
      }
    ],
    "extract_comments": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_type"
        ],
        "lines": 19,
        "complexity": 6
      }
    ],
    "determine_purpose": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_name"
        ],
        "lines": 27,
        "complexity": 7
      }
    ],
    "categorize_script": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_name"
        ],
        "lines": 27,
        "complexity": 11
      }
    ],
    "calculate_complexity": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_type"
        ],
        "lines": 29,
        "complexity": 2
      }
    ],
    "extract_tags": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_name"
        ],
        "lines": 24,
        "complexity": 4
      }
    ],
    "find_related_scripts": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_name"
        ],
        "lines": 17,
        "complexity": 4
      }
    ],
    "extract_dependencies": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_type"
        ],
        "lines": 19,
        "complexity": 5
      }
    ],
    "analyze_all_scripts": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 20,
        "complexity": 6
      },
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 15,
        "complexity": 6
      }
    ],
    "generate_analysis_report": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 47,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/cursor_ai_behavior_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 35,
        "complexity": 2
      }
    ],
    "find_potential_duplicates": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 31,
        "complexity": 8
      }
    ],
    "are_scripts_similar": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "script1",
          "script2"
        ],
        "lines": 13,
        "complexity": 2
      },
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "script1",
          "script2"
        ],
        "lines": 28,
        "complexity": 4
      }
    ],
    "find_redundant_scripts": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 23,
        "complexity": 5
      },
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 7
      }
    ],
    "save_memory": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "analysis"
        ],
        "lines": 14,
        "complexity": 1
      }
    ],
    "search_scripts": [
      {
        "file_path": "scripts/script-analyzer.py",
        "parameters": [
          "self",
          "query"
        ],
        "lines": 30,
        "complexity": 7
      }
    ],
    "log_step": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self",
          "step",
          "status",
          "details"
        ],
        "lines": 17,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self",
          "step",
          "status",
          "details"
        ],
        "lines": 17,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self",
          "step",
          "status",
          "details"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "log_automation": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "configure_github_secrets": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 52,
        "complexity": 7
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 52,
        "complexity": 7
      }
    ],
    "enable_scheduled_workflows": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 40,
        "complexity": 8
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 50,
        "complexity": 10
      }
    ],
    "test_system_with_sample_change": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 106,
        "complexity": 4
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 111,
        "complexity": 7
      }
    ],
    "setup_dashboard_monitoring": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 21,
        "complexity": 2
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 36,
        "complexity": 3
      }
    ],
    "verify_system": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 59,
        "complexity": 6
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 69,
        "complexity": 7
      }
    ],
    "generate_final_report": [
      {
        "file_path": "scripts/setup-bidirectional-sync.sh",
        "parameters": [],
        "lines": 90,
        "complexity": 3
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 90,
        "complexity": 3
      }
    ],
    "create_webhook_workflow": [
      {
        "file_path": "scripts/deploy-missing-n8n-webhooks.sh",
        "parameters": [],
        "lines": 59,
        "complexity": 2
      }
    ],
    "test_webhook": [
      {
        "file_path": "scripts/deploy-missing-n8n-webhooks.sh",
        "parameters": [],
        "lines": 21,
        "complexity": 2
      }
    ],
    "deploy_n8n_workflows": [
      {
        "file_path": "scripts/test-intelligent-discovery.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 1
      },
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 136,
        "complexity": 1
      }
    ],
    "check_url": [
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 8,
        "complexity": 2
      }
    ],
    "setup_database": [
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      }
    ],
    "initialize_configs": [
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 14,
        "complexity": 2
      }
    ],
    "test_cron_endpoint": [
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 14,
        "complexity": 2
      }
    ],
    "create_cron_job": [
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 18,
        "complexity": 3
      }
    ],
    "create_systemd_timer": [
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 38,
        "complexity": 1
      }
    ],
    "create_webhook_scheduling": [
      {
        "file_path": "scripts/setup-hourly-scraping.sh",
        "parameters": [],
        "lines": 30,
        "complexity": 3
      }
    ],
    "create_directories": [
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 9,
        "complexity": 1
      }
    ],
    "setup_python_scripts": [
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 19,
        "complexity": 3
      }
    ],
    "create_config_files": [
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 32,
        "complexity": 2
      }
    ],
    "setup_cron_jobs": [
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 28,
        "complexity": 7
      }
    ],
    "create_management_scripts": [
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 82,
        "complexity": 6
      }
    ],
    "test_setup": [
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 4
      },
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 23,
        "complexity": 3
      }
    ],
    "create_documentation": [
      {
        "file_path": "scripts/setup-n8n-bidirectional-sync.sh",
        "parameters": [],
        "lines": 84,
        "complexity": 5
      }
    ],
    "generate_dashboard": [
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 281,
        "complexity": 5
      }
    ],
    "generate_json_data": [
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 64,
        "complexity": 5
      }
    ],
    "generate_summary_report": [
      {
        "file_path": "scripts/sync-dashboard.sh",
        "parameters": [],
        "lines": 68,
        "complexity": 3
      }
    ],
    "load_credentials": [
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 18,
        "complexity": 4
      },
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 35,
        "complexity": 9
      }
    ],
    "validate_credentials": [
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 28,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "credentials"
        ],
        "lines": 32,
        "complexity": 10
      }
    ],
    "create_env_files": [
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 49,
        "complexity": 3
      }
    ],
    "create_supabase_client": [
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 3
      }
    ],
    "create_n8n_credentials": [
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 20,
        "complexity": 1
      }
    ],
    "create_supabase_tables": [
      {
        "file_path": "scripts/secure-credential-manager.sh",
        "parameters": [],
        "lines": 108,
        "complexity": 5
      }
    ],
    "get_n8n_workflows": [
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      }
    ],
    "compare_workflows": [
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 18,
        "complexity": 4
      }
    ],
    "backup_local_file": [
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      }
    ],
    "sync_workflow_to_dev": [
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 21,
        "complexity": 1
      }
    ],
    "sync_new_workflow_to_dev": [
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 18,
        "complexity": 1
      }
    ],
    "commit_workflow_changes": [
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 43,
        "complexity": 5
      }
    ],
    "monitor_n8n_changes": [
      {
        "file_path": "scripts/n8n-change-monitor.sh",
        "parameters": [],
        "lines": 48,
        "complexity": 6
      }
    ],
    "safe_multiline_output": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      }
    ],
    "test_shell_safety": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 23,
        "complexity": 1
      }
    ],
    "show_safety_guidelines": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 49,
        "complexity": 3
      }
    ],
    "create_safe_templates": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 19,
        "complexity": 1
      }
    ],
    "announce_milestone": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 10,
        "complexity": 1
      }
    ],
    "report_status": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      }
    ],
    "track_progress": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      }
    ],
    "validate_scripts": [
      {
        "file_path": "scripts/shell-prompt-safety-system.sh",
        "parameters": [],
        "lines": 31,
        "complexity": 9
      }
    ],
    "handle_error": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      },
      {
        "file_path": "scripts/generated/test-basic.sh",
        "parameters": [],
        "lines": 6,
        "complexity": 1
      }
    ],
    "validate_script_name": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 8,
        "complexity": 2
      }
    ],
    "validate_output_directory": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 8,
        "complexity": 2
      }
    ],
    "safe_output": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 4,
        "complexity": 1
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      }
    ],
    "generate_basic_script": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      }
    ],
    "generate_status_script": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 18,
        "complexity": 1
      }
    ],
    "output": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/generated/test-status.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      },
      {
        "file_path": "scripts/generated/test-progress.sh",
        "parameters": [],
        "lines": 3,
        "complexity": 1
      }
    ],
    "show_status": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 1
      },
      {
        "file_path": "scripts/generated/test-status.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 1
      }
    ],
    "generate_progress_script": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      }
    ],
    "update_progress": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 1
      },
      {
        "file_path": "scripts/generated/test-progress.sh",
        "parameters": [],
        "lines": 11,
        "complexity": 1
      }
    ],
    "run_progress": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      },
      {
        "file_path": "scripts/generated/test-progress.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 1
      }
    ],
    "test_script": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 27,
        "complexity": 4
      }
    ],
    "generate_script": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 42,
        "complexity": 5
      }
    ],
    "generate_batch": [
      {
        "file_path": "scripts/production-shell-engine.sh",
        "parameters": [],
        "lines": 30,
        "complexity": 4
      }
    ],
    "addTestIds": [
      {
        "file_path": "scripts/add-test-ids.js",
        "parameters": [],
        "lines": 25,
        "complexity": 10
      }
    ],
    "setupDatabase": [
      {
        "file_path": "scripts/setup-database.js",
        "parameters": [],
        "lines": 90,
        "complexity": 7
      },
      {
        "file_path": "scripts/setup-database-simple.js",
        "parameters": [],
        "lines": 125,
        "complexity": 7
      }
    ],
    "logTest": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/improved-e2e-test.js",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      }
    ],
    "takeScreenshot": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 10,
        "complexity": 2
      },
      {
        "file_path": "scripts/improved-e2e-test.js",
        "parameters": [],
        "lines": 10,
        "complexity": 2
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 10,
        "complexity": 2
      }
    ],
    "waitForElement": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 8,
        "complexity": 1
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 8,
        "complexity": 1
      }
    ],
    "testPageLoad": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 28,
        "complexity": 3
      },
      {
        "file_path": "scripts/improved-e2e-test.js",
        "parameters": [],
        "lines": 33,
        "complexity": 3
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 28,
        "complexity": 3
      }
    ],
    "testDashboardButtons": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 61,
        "complexity": 6
      },
      {
        "file_path": "scripts/improved-e2e-test.js",
        "parameters": [],
        "lines": 54,
        "complexity": 5
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 47,
        "complexity": 4
      }
    ],
    "testJobCards": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 60,
        "complexity": 6
      },
      {
        "file_path": "scripts/improved-e2e-test.js",
        "parameters": [],
        "lines": 54,
        "complexity": 5
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 55,
        "complexity": 5
      }
    ],
    "testFilterSidebar": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 42,
        "complexity": 4
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 42,
        "complexity": 4
      }
    ],
    "testResumeUpload": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 38,
        "complexity": 3
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 38,
        "complexity": 3
      }
    ],
    "testStatsDashboard": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 42,
        "complexity": 4
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 35,
        "complexity": 4
      }
    ],
    "testApplicationTracker": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 48,
        "complexity": 4
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 29,
        "complexity": 3
      }
    ],
    "testDataSourceIndicator": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 38,
        "complexity": 4
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 29,
        "complexity": 3
      }
    ],
    "testResponsiveDesign": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 30,
        "complexity": 3
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 30,
        "complexity": 3
      }
    ],
    "testAPIConnectivity": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 63,
        "complexity": 4
      },
      {
        "file_path": "scripts/improved-e2e-test.js",
        "parameters": [],
        "lines": 40,
        "complexity": 3
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 63,
        "complexity": 4
      }
    ],
    "runAllTests": [
      {
        "file_path": "scripts/simple-e2e-test.js",
        "parameters": [],
        "lines": 56,
        "complexity": 1
      },
      {
        "file_path": "scripts/improved-e2e-test.js",
        "parameters": [],
        "lines": 39,
        "complexity": 1
      },
      {
        "file_path": "scripts/puppeteer-e2e-test.js",
        "parameters": [],
        "lines": 56,
        "complexity": 1
      }
    ],
    "analyze_scripts_for_purging": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 1
      }
    ],
    "load_analysis_data": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 2
      }
    ],
    "identify_bloated_scripts": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 23,
        "complexity": 6
      }
    ],
    "calculate_bloat_score": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 45,
        "complexity": 9
      }
    ],
    "find_repeated_patterns": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 13,
        "complexity": 2
      }
    ],
    "find_long_functions": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 19,
        "complexity": 5
      }
    ],
    "find_unused_items": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 23,
        "complexity": 7
      }
    ],
    "identify_duplicate_scripts": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 6
      }
    ],
    "calculate_file_hash": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 13,
        "complexity": 2
      }
    ],
    "identify_obsolete_scripts": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 7
      }
    ],
    "identify_minimal_scripts": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 6
      }
    ],
    "is_minimal_script": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 30,
        "complexity": 8
      }
    ],
    "identify_consolidation_candidates": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 3
      }
    ],
    "group_similar_scripts": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 33,
        "complexity": 13
      }
    ],
    "perform_safety_checks": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 18,
        "complexity": 1
      }
    ],
    "find_essential_functions": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 23,
        "complexity": 7
      }
    ],
    "find_referenced_scripts": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 19,
        "complexity": 7
      }
    ],
    "find_api_endpoints": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 22,
        "complexity": 7
      }
    ],
    "find_database_operations": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 23,
        "complexity": 7
      }
    ],
    "find_critical_workflows": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 22,
        "complexity": 7
      }
    ],
    "generate_purging_recommendations": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 39,
        "complexity": 7
      }
    ],
    "execute_purge": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 4
      }
    ],
    "generate_purge_report": [
      {
        "file_path": "scripts/intelligent-script-purge.py",
        "parameters": [
          "self"
        ],
        "lines": 35,
        "complexity": 3
      }
    ],
    "analyze_python_script": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "file_path",
          "content",
          "file_name",
          "total_lines",
          "code_lines",
          "comment_lines"
        ],
        "lines": 53,
        "complexity": 12
      }
    ],
    "analyze_bash_script": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "file_path",
          "content",
          "file_name",
          "total_lines",
          "code_lines",
          "comment_lines"
        ],
        "lines": 47,
        "complexity": 5
      }
    ],
    "analyze_javascript_script": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "file_path",
          "content",
          "file_name",
          "total_lines",
          "code_lines",
          "comment_lines"
        ],
        "lines": 69,
        "complexity": 8
      }
    ],
    "extract_python_function": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "node",
          "file_path",
          "content"
        ],
        "lines": 45,
        "complexity": 10
      }
    ],
    "extract_bash_function": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "func_name",
          "file_path",
          "content"
        ],
        "lines": 46,
        "complexity": 2
      }
    ],
    "extract_javascript_function": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "func_name",
          "file_path",
          "content"
        ],
        "lines": 56,
        "complexity": 4
      }
    ],
    "calculate_python_complexity": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "tree"
        ],
        "lines": 13,
        "complexity": 5
      }
    ],
    "calculate_bash_complexity": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 14,
        "complexity": 2
      }
    ],
    "calculate_javascript_complexity": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "content"
        ],
        "lines": 14,
        "complexity": 2
      }
    ],
    "calculate_function_complexity": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "node"
        ],
        "lines": 11,
        "complexity": 4
      }
    ],
    "calculate_bash_function_complexity": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "func_body"
        ],
        "lines": 9,
        "complexity": 2
      }
    ],
    "calculate_javascript_function_complexity": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "func_body"
        ],
        "lines": 9,
        "complexity": 2
      }
    ],
    "determine_script_purpose": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "content",
          "file_name"
        ],
        "lines": 28,
        "complexity": 7
      }
    ],
    "register_functions": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "analysis"
        ],
        "lines": 4,
        "complexity": 2
      }
    ],
    "find_duplicate_functions": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 18,
        "complexity": 8
      }
    ],
    "are_functions_similar": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "func1",
          "func2"
        ],
        "lines": 20,
        "complexity": 4
      }
    ],
    "are_scripts_redundant": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "analysis1",
          "analysis2"
        ],
        "lines": 42,
        "complexity": 9
      }
    ],
    "generate_consolidation_recommendations": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self"
        ],
        "lines": 19,
        "complexity": 1
      }
    ],
    "calculate_estimated_savings": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "duplicate_functions",
          "redundant_scripts"
        ],
        "lines": 25,
        "complexity": 5
      }
    ],
    "save_recommendations": [
      {
        "file_path": "scripts/deep-code-analyzer.py",
        "parameters": [
          "self",
          "recommendations",
          "output_file"
        ],
        "lines": 26,
        "complexity": 1
      }
    ],
    "validate_strings": [
      {
        "file_path": "scripts/validate-strings.sh",
        "parameters": [],
        "lines": 32,
        "complexity": 8
      },
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 32,
        "complexity": 8
      }
    ],
    "test_api_key_management": [
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 36,
        "complexity": 5
      }
    ],
    "test_claude_api": [
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 32,
        "complexity": 4
      }
    ],
    "test_nextjs_app": [
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 35,
        "complexity": 5
      }
    ],
    "test_alexai_integration": [
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 35,
        "complexity": 5
      }
    ],
    "generate_test_report": [
      {
        "file_path": "scripts/production-testing-suite.sh",
        "parameters": [],
        "lines": 52,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 44,
        "complexity": 2
      }
    ],
    "monitor_dashboard": [
      {
        "file_path": "scripts/automate-bidirectional-setup.sh",
        "parameters": [],
        "lines": 33,
        "complexity": 7
      }
    ],
    "test_supabase_connection": [
      {
        "file_path": "scripts/deploy-complete-n8n-infrastructure.sh",
        "parameters": [],
        "lines": 12,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 20,
        "complexity": 3
      }
    ],
    "activate_n8n_workflows": [
      {
        "file_path": "scripts/deploy-complete-n8n-infrastructure.sh",
        "parameters": [],
        "lines": 22,
        "complexity": 3
      }
    ],
    "test_webhook_endpoints": [
      {
        "file_path": "scripts/deploy-complete-n8n-infrastructure.sh",
        "parameters": [],
        "lines": 13,
        "complexity": 2
      }
    ],
    "escape_quotes": [
      {
        "file_path": "scripts/safe-milestone-push.sh",
        "parameters": [],
        "lines": 5,
        "complexity": 1
      }
    ],
    "create_safe_commit_message": [
      {
        "file_path": "scripts/safe-milestone-push.sh",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      }
    ],
    "safe_commit": [
      {
        "file_path": "scripts/safe-milestone-push.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 1
      }
    ],
    "safe_push": [
      {
        "file_path": "scripts/safe-milestone-push.sh",
        "parameters": [],
        "lines": 8,
        "complexity": 1
      }
    ],
    "safe_multiline": [
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 15,
        "complexity": 2
      }
    ],
    "fix_existing_scripts": [
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 42,
        "complexity": 6
      }
    ],
    "create_validation_system": [
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 40,
        "complexity": 9
      }
    ],
    "create_safe_execution": [
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 32,
        "complexity": 5
      }
    ],
    "demonstrate_safe_output": [
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 27,
        "complexity": 1
      }
    ],
    "create_fix_documentation": [
      {
        "file_path": "scripts/string-manipulation-fix.sh",
        "parameters": [],
        "lines": 94,
        "complexity": 5
      }
    ],
    "request_youtube_analysis": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "crew_member_id",
          "video_url",
          "analysis_focus"
        ],
        "lines": 75,
        "complexity": 7
      }
    ],
    "batch_analyze_videos": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "crew_member_id",
          "video_urls",
          "analysis_focus"
        ],
        "lines": 38,
        "complexity": 3
      }
    ],
    "get_crew_analysis_history": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "crew_member_id"
        ],
        "lines": 44,
        "complexity": 4
      }
    ],
    "_is_valid_youtube_url": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "url"
        ],
        "lines": 13,
        "complexity": 3
      }
    ],
    "_extract_video_id": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "url"
        ],
        "lines": 5,
        "complexity": 1
      }
    ],
    "_is_already_processed": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "video_id"
        ],
        "lines": 15,
        "complexity": 3
      }
    ],
    "_get_existing_analysis": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "video_id"
        ],
        "lines": 32,
        "complexity": 4
      }
    ],
    "_generate_request_id": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self",
          "crew_member_id",
          "video_url"
        ],
        "lines": 4,
        "complexity": 1
      }
    ],
    "list_crew_members": [
      {
        "file_path": "scripts/python/youtube_scraper_crew_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 15,
        "complexity": 1
      }
    ],
    "safe_remove_file": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self",
          "file_path",
          "reason"
        ],
        "lines": 14,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "file_path",
          "reason"
        ],
        "lines": 14,
        "complexity": 2
      }
    ],
    "identify_sub_projects": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 74,
        "complexity": 14
      }
    ],
    "categorize_main_folder_files": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 59,
        "complexity": 18
      }
    ],
    "identify_excess_files": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self",
          "categorized_files"
        ],
        "lines": 31,
        "complexity": 6
      }
    ],
    "organize_remaining_files": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 17,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 17,
        "complexity": 2
      }
    ],
    "move_files_to_organized_structure": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self",
          "categorized_files"
        ],
        "lines": 66,
        "complexity": 22
      }
    ],
    "generate_cleanup_report": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 92,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 56,
        "complexity": 2
      }
    ],
    "run_final_cleanup": [
      {
        "file_path": "scripts/python/final_monorepo_cleanup.py",
        "parameters": [
          "self"
        ],
        "lines": 68,
        "complexity": 5
      }
    ],
    "_analyze_current_structure": [
      {
        "file_path": "scripts/python/turborepo_implementation_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 1
      }
    ],
    "_create_turborepo_config": [
      {
        "file_path": "scripts/python/turborepo_implementation_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 1
      }
    ],
    "_define_implementation_phases": [
      {
        "file_path": "scripts/python/turborepo_implementation_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 151,
        "complexity": 1
      }
    ],
    "generate_implementation_plan": [
      {
        "file_path": "scripts/python/turborepo_implementation_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 176,
        "complexity": 12
      }
    ],
    "save_implementation_data": [
      {
        "file_path": "scripts/python/turborepo_implementation_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 26,
        "complexity": 1
      }
    ],
    "create_comprehensive_integration": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_integration_system.py",
        "parameters": [
          "self"
        ],
        "lines": 153,
        "complexity": 1
      }
    ],
    "analyze_prompt_comprehensive": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_integration_system.py",
        "parameters": [
          "self",
          "prompt"
        ],
        "lines": 108,
        "complexity": 10
      }
    ],
    "save_integration_system": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_integration_system.py",
        "parameters": [
          "self",
          "integration"
        ],
        "lines": 7,
        "complexity": 1
      }
    ],
    "create_integration_report": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_integration_system.py",
        "parameters": [
          "self",
          "integration"
        ],
        "lines": 90,
        "complexity": 9
      }
    ],
    "run_comprehensive_integration": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_integration_system.py",
        "parameters": [
          "self"
        ],
        "lines": 39,
        "complexity": 2
      }
    ],
    "generate_research_queries": [
      {
        "file_path": "scripts/python/comprehensive_market_research_system.py",
        "parameters": [
          "self",
          "market"
        ],
        "lines": 34,
        "complexity": 5
      }
    ],
    "simulate_web_research": [
      {
        "file_path": "scripts/python/comprehensive_market_research_system.py",
        "parameters": [
          "self",
          "queries",
          "market"
        ],
        "lines": 73,
        "complexity": 2
      }
    ],
    "analyze_cannabis_market": [
      {
        "file_path": "scripts/python/comprehensive_market_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 13,
        "complexity": 2
      }
    ],
    "generate_market_research_report": [
      {
        "file_path": "scripts/python/comprehensive_market_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 58,
        "complexity": 3
      }
    ],
    "run_command": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self",
          "command",
          "cwd"
        ],
        "lines": 24,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self",
          "command",
          "cwd"
        ],
        "lines": 24,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self",
          "command",
          "cwd"
        ],
        "lines": 24,
        "complexity": 5
      }
    ],
    "configure_local_caching": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 65,
        "complexity": 1
      }
    ],
    "setup_remote_caching": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 1
      }
    ],
    "optimize_task_dependencies": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 57,
        "complexity": 1
      }
    ],
    "implement_incremental_builds": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 53,
        "complexity": 1
      }
    ],
    "configure_build_outputs": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 117,
        "complexity": 3
      }
    ],
    "setup_performance_monitoring": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 186,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 50,
        "complexity": 2
      }
    ],
    "optimize_cicd_integration": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 175,
        "complexity": 1
      }
    ],
    "test_optimizations": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 4
      }
    ],
    "generate_phase2_report": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 97,
        "complexity": 5
      }
    ],
    "execute_phase2": [
      {
        "file_path": "scripts/python/phase2_turborepo_optimization.py",
        "parameters": [
          "self"
        ],
        "lines": 36,
        "complexity": 5
      }
    ],
    "simulate_crew_coordination_update": [
      {
        "file_path": "scripts/python/crew_coordination_update_system.py",
        "parameters": [],
        "lines": 224,
        "complexity": 5
      }
    ],
    "_locate_youtube_scripts": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 18,
        "complexity": 2
      }
    ],
    "run_youtube_analysis": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "channel_url",
          "analysis_type"
        ],
        "lines": 38,
        "complexity": 5
      }
    ],
    "_parse_analysis_output": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "output"
        ],
        "lines": 36,
        "complexity": 4
      }
    ],
    "_extract_crew_memories": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "analysis_data"
        ],
        "lines": 23,
        "complexity": 3
      }
    ],
    "_parse_text_insights": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "output"
        ],
        "lines": 65,
        "complexity": 42
      }
    ],
    "_create_memory": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "crew_member",
          "content"
        ],
        "lines": 14,
        "complexity": 1
      }
    ],
    "store_crew_memories": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 25,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/simple_youtube_crew_memory_demo.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 25,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/store_crew_memories_supabase.py",
        "parameters": [
          "self",
          "memories_file"
        ],
        "lines": 58,
        "complexity": 4
      }
    ],
    "_store_in_mcp_system": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 25,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self",
          "memory_entry"
        ],
        "lines": 23,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 26,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 26,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/simple_youtube_crew_memory_demo.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 26,
        "complexity": 5
      }
    ],
    "generate_memory_report": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 42,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/simple_youtube_crew_memory_demo.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 56,
        "complexity": 5
      }
    ],
    "run_demo_analysis": [
      {
        "file_path": "scripts/python/youtube_crew_memory_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 26,
        "complexity": 3
      }
    ],
    "generate_embedding": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "text"
        ],
        "lines": 16,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "text"
        ],
        "lines": 15,
        "complexity": 3
      }
    ],
    "cosine_similarity": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "vec1",
          "vec2"
        ],
        "lines": 13,
        "complexity": 4
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "vec1",
          "vec2"
        ],
        "lines": 17,
        "complexity": 4
      }
    ],
    "calculate_importance_score": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "memory"
        ],
        "lines": 35,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "memory"
        ],
        "lines": 35,
        "complexity": 1
      }
    ],
    "find_similar_memories": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "memory",
          "threshold"
        ],
        "lines": 18,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "memory",
          "threshold"
        ],
        "lines": 18,
        "complexity": 5
      }
    ],
    "consolidate_similar_memories": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "memory_group"
        ],
        "lines": 43,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "memory_group"
        ],
        "lines": 43,
        "complexity": 5
      }
    ],
    "_consolidate_content": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 21,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 21,
        "complexity": 5
      }
    ],
    "_create_content_summary": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "contents",
          "mem_type"
        ],
        "lines": 31,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "contents",
          "mem_type"
        ],
        "lines": 31,
        "complexity": 8
      }
    ],
    "optimize_memory_storage": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self"
        ],
        "lines": 82,
        "complexity": 18
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self"
        ],
        "lines": 70,
        "complexity": 14
      }
    ],
    "generate_optimization_report": [
      {
        "file_path": "scripts/python/test_mcp_system.py",
        "parameters": [
          "self",
          "results"
        ],
        "lines": 47,
        "complexity": 7
      },
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "results"
        ],
        "lines": 56,
        "complexity": 8
      },
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "analysis_data",
          "crew_insights",
          "optimization_plan",
          "execution_results"
        ],
        "lines": 56,
        "complexity": 5
      }
    ],
    "_get_supabase_integration_prompt": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 25,
        "complexity": 1
      }
    ],
    "_get_n8n_workflow_prompt": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 34,
        "complexity": 1
      }
    ],
    "_get_claude_analysis_prompt": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 44,
        "complexity": 1
      }
    ],
    "_get_system_integration_prompt": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 54,
        "complexity": 1
      }
    ],
    "_get_market_research_prompt": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 46,
        "complexity": 1
      }
    ],
    "_get_business_validation_prompt": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 44,
        "complexity": 1
      }
    ],
    "generate_enhanced_prompt": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self",
          "prompt_type",
          "context"
        ],
        "lines": 18,
        "complexity": 3
      }
    ],
    "create_integration_guide": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_system.py",
        "parameters": [
          "self"
        ],
        "lines": 31,
        "complexity": 1
      }
    ],
    "create_secure_directory": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self"
        ],
        "lines": 4,
        "complexity": 1
      }
    ],
    "load_from_zshrc": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self"
        ],
        "lines": 31,
        "complexity": 8
      }
    ],
    "load_from_environment": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self"
        ],
        "lines": 14,
        "complexity": 3
      }
    ],
    "encrypt_credentials": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "credentials"
        ],
        "lines": 6,
        "complexity": 1
      }
    ],
    "decrypt_credentials": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "encrypted_data"
        ],
        "lines": 8,
        "complexity": 2
      }
    ],
    "save_credentials_securely": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "credentials"
        ],
        "lines": 28,
        "complexity": 3
      }
    ],
    "load_credentials_securely": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "test_credential_access": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "credentials"
        ],
        "lines": 39,
        "complexity": 9
      },
      {
        "file_path": "scripts/python/fix_credential_security.py",
        "parameters": [
          "creds"
        ],
        "lines": 27,
        "complexity": 7
      }
    ],
    "create_crew_memory": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "credentials"
        ],
        "lines": 41,
        "complexity": 6
      }
    ],
    "setup_environment_variables": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "credentials"
        ],
        "lines": 9,
        "complexity": 2
      }
    ],
    "generate_credential_report": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self",
          "credentials",
          "test_results"
        ],
        "lines": 15,
        "complexity": 1
      }
    ],
    "run_comprehensive_setup": [
      {
        "file_path": "scripts/python/alex_ai_credential_manager.py",
        "parameters": [
          "self"
        ],
        "lines": 62,
        "complexity": 4
      }
    ],
    "setUp": [
      {
        "file_path": "scripts/python/enhanced_prompts_test_suite.py",
        "parameters": [
          "self"
        ],
        "lines": 2,
        "complexity": 1
      }
    ],
    "test_prompt_generation": [
      {
        "file_path": "scripts/python/enhanced_prompts_test_suite.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 2
      }
    ],
    "test_integration_guide_creation": [
      {
        "file_path": "scripts/python/enhanced_prompts_test_suite.py",
        "parameters": [
          "self"
        ],
        "lines": 6,
        "complexity": 1
      }
    ],
    "initialize_yolo_mode": [
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self"
        ],
        "lines": 47,
        "complexity": 2
      }
    ],
    "_store_yolo_initialization_memory": [
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self"
        ],
        "lines": 33,
        "complexity": 1
      }
    ],
    "create_yolo_prompt_template": [
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self"
        ],
        "lines": 59,
        "complexity": 1
      }
    ],
    "update_alex_ai_system_config": [
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self"
        ],
        "lines": 47,
        "complexity": 3
      }
    ],
    "create_yolo_initialization_script": [
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self"
        ],
        "lines": 39,
        "complexity": 1
      }
    ],
    "generate_initialization_report": [
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self"
        ],
        "lines": 53,
        "complexity": 3
      }
    ],
    "run_complete_initialization": [
      {
        "file_path": "scripts/python/alex_ai_yolo_initialization.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 1
      }
    ],
    "get_all_crew_memories": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 3
      }
    ],
    "analyze_crew_memory_distribution": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 43,
        "complexity": 8
      }
    ],
    "test_memory_consistency": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 42,
        "complexity": 10
      }
    ],
    "create_test_memory_for_crew": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self",
          "crew_member"
        ],
        "lines": 31,
        "complexity": 3
      }
    ],
    "verify_memory_sharing": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self",
          "test_crew"
        ],
        "lines": 31,
        "complexity": 4
      }
    ],
    "run_comprehensive_assessment": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 45,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/alex_ai_comprehensive_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 28,
        "complexity": 1
      }
    ],
    "_generate_overall_assessment": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self",
          "distribution",
          "consistency",
          "test_created",
          "test_verified"
        ],
        "lines": 15,
        "complexity": 13
      }
    ],
    "print_assessment_report": [
      {
        "file_path": "scripts/python/alex_ai_memory_sharing_assessment.py",
        "parameters": [
          "self",
          "assessment"
        ],
        "lines": 34,
        "complexity": 7
      }
    ],
    "analyze_company_structure": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "company_data"
        ],
        "lines": 33,
        "complexity": 1
      }
    ],
    "_technical_lead_analysis": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "company_data"
        ],
        "lines": 23,
        "complexity": 3
      }
    ],
    "_ai_strategy_analysis": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "company_data"
        ],
        "lines": 24,
        "complexity": 3
      }
    ],
    "_client_success_analysis": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "company_data"
        ],
        "lines": 20,
        "complexity": 4
      }
    ],
    "_sustainability_analysis": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "company_data"
        ],
        "lines": 20,
        "complexity": 4
      }
    ],
    "_org_structure_analysis": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "company_data"
        ],
        "lines": 19,
        "complexity": 1
      }
    ],
    "_identify_technical_contacts": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "_identify_ai_strategy_contacts": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "_identify_client_success_contacts": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "_identify_sustainability_contacts": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "_identify_decision_makers": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "_assess_org_complexity": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name"
        ],
        "lines": 8,
        "complexity": 3
      }
    ],
    "_analyze_reporting_structure": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name"
        ],
        "lines": 20,
        "complexity": 3
      }
    ],
    "_get_technical_approach": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "alex_ai_score"
        ],
        "lines": 8,
        "complexity": 3
      }
    ],
    "_get_alex_ai_leverage_points": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name"
        ],
        "lines": 30,
        "complexity": 5
      }
    ],
    "_get_relationship_strategy": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name"
        ],
        "lines": 8,
        "complexity": 3
      }
    ],
    "_get_environmental_alignment": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name"
        ],
        "lines": 8,
        "complexity": 3
      }
    ],
    "_generate_consensus_recommendations": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 1
      }
    ],
    "_calculate_priority_score": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self"
        ],
        "lines": 10,
        "complexity": 4
      }
    ],
    "_consolidate_key_contacts": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self"
        ],
        "lines": 18,
        "complexity": 7
      }
    ],
    "_consolidate_application_strategy": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self"
        ],
        "lines": 10,
        "complexity": 4
      }
    ],
    "_determine_mermaid_focus": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 3
      }
    ],
    "generate_comprehensive_mermaid_model": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "analysis"
        ],
        "lines": 14,
        "complexity": 3
      }
    ],
    "_generate_high_priority_mermaid": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "analysis"
        ],
        "lines": 21,
        "complexity": 1
      }
    ],
    "_generate_medium_priority_mermaid": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "analysis"
        ],
        "lines": 13,
        "complexity": 1
      }
    ],
    "_generate_standard_mermaid": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_name",
          "analysis"
        ],
        "lines": 15,
        "complexity": 1
      }
    ],
    "run_comprehensive_analysis": [
      {
        "file_path": "scripts/python/alex_ai_crew_mermaid_models.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 17,
        "complexity": 2
      }
    ],
    "resume_analysis": [
      {
        "file_path": "scripts/python/alex_ai_webhook_server.py",
        "parameters": [],
        "lines": 37,
        "complexity": 3
      }
    ],
    "job_matching": [
      {
        "file_path": "scripts/python/alex_ai_webhook_server.py",
        "parameters": [],
        "lines": 53,
        "complexity": 11
      }
    ],
    "cover_letter_generation": [
      {
        "file_path": "scripts/python/alex_ai_webhook_server.py",
        "parameters": [],
        "lines": 46,
        "complexity": 2
      }
    ],
    "resume_tailoring": [
      {
        "file_path": "scripts/python/alex_ai_webhook_server.py",
        "parameters": [],
        "lines": 31,
        "complexity": 3
      }
    ],
    "job_tracking": [
      {
        "file_path": "scripts/python/alex_ai_webhook_server.py",
        "parameters": [],
        "lines": 24,
        "complexity": 2
      }
    ],
    "health_check": [
      {
        "file_path": "scripts/python/alex_ai_webhook_server.py",
        "parameters": [],
        "lines": 7,
        "complexity": 1
      }
    ],
    "route_request": [
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [
          "self",
          "input_data"
        ],
        "lines": 42,
        "complexity": 3
      }
    ],
    "_make_routing_decision": [
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [
          "self",
          "task_type",
          "complexity",
          "strategy"
        ],
        "lines": 27,
        "complexity": 3
      }
    ],
    "_select_crew_member": [
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [
          "self",
          "task_type"
        ],
        "lines": 12,
        "complexity": 8
      }
    ],
    "_execute_claude_request": [
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [
          "self",
          "input_data",
          "routing"
        ],
        "lines": 42,
        "complexity": 3
      }
    ],
    "_execute_openrouter_request": [
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [
          "self",
          "input_data",
          "routing"
        ],
        "lines": 44,
        "complexity": 3
      }
    ],
    "_format_crew_prompt": [
      {
        "file_path": "scripts/python/enhanced_unified_router.py",
        "parameters": [
          "self",
          "input_data",
          "routing"
        ],
        "lines": 19,
        "complexity": 1
      }
    ],
    "assess_crew_learning": [
      {
        "file_path": "scripts/python/crew_learning_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 1
      }
    ],
    "_analyze_individual_learnings": [
      {
        "file_path": "scripts/python/crew_learning_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 153,
        "complexity": 2
      }
    ],
    "_analyze_shared_learnings": [
      {
        "file_path": "scripts/python/crew_learning_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 46,
        "complexity": 3
      }
    ],
    "_generate_learning_report": [
      {
        "file_path": "scripts/python/crew_learning_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 109,
        "complexity": 10
      }
    ],
    "_store_crew_memories": [
      {
        "file_path": "scripts/python/crew_learning_assessment.py",
        "parameters": [
          "self"
        ],
        "lines": 58,
        "complexity": 6
      }
    ],
    "extract_keywords_from_text": [
      {
        "file_path": "scripts/python/optimized_web_crawler_system.py",
        "parameters": [
          "self",
          "text"
        ],
        "lines": 30,
        "complexity": 5
      }
    ],
    "simulate_web_crawl": [
      {
        "file_path": "scripts/python/optimized_web_crawler_system.py",
        "parameters": [
          "self",
          "source",
          "market"
        ],
        "lines": 92,
        "complexity": 6
      }
    ],
    "crawl_market_research": [
      {
        "file_path": "scripts/python/optimized_web_crawler_system.py",
        "parameters": [
          "self",
          "markets"
        ],
        "lines": 72,
        "complexity": 8
      }
    ],
    "generate_supabase_schema": [
      {
        "file_path": "scripts/python/optimized_web_crawler_system.py",
        "parameters": [
          "self"
        ],
        "lines": 122,
        "complexity": 1
      }
    ],
    "simulate_observation_lounge_session": [
      {
        "file_path": "scripts/python/observation_lounge_crew_debrief.py",
        "parameters": [],
        "lines": 374,
        "complexity": 2
      }
    ],
    "deploy_enhanced_prompts": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 4
      }
    ],
    "test_live_system_integration": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 90,
        "complexity": 4
      }
    ],
    "create_advanced_workflows": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 46,
        "complexity": 3
      }
    ],
    "setup_automated_testing": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 101,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 54,
        "complexity": 1
      }
    ],
    "scale_to_other_projects": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 93,
        "complexity": 3
      }
    ],
    "execute_all_next_steps": [
      {
        "file_path": "scripts/python/enhanced_ai_prompts_deployment_system.py",
        "parameters": [
          "self"
        ],
        "lines": 36,
        "complexity": 3
      }
    ],
    "analyze_issue": [
      {
        "file_path": "scripts/python/cursor_ai_behavior_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 35,
        "complexity": 1
      }
    ],
    "create_solution_guide": [
      {
        "file_path": "scripts/python/cursor_ai_behavior_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 115,
        "complexity": 1
      }
    ],
    "create_crew_memory_update": [
      {
        "file_path": "scripts/python/cursor_ai_behavior_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 1
      }
    ],
    "run_analysis": [
      {
        "file_path": "scripts/python/cursor_ai_behavior_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 19,
        "complexity": 1
      }
    ],
    "init_database": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self"
        ],
        "lines": 59,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 77,
        "complexity": 1
      }
    ],
    "load_job_opportunities": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self"
        ],
        "lines": 45,
        "complexity": 1
      }
    ],
    "load_org_structures": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self"
        ],
        "lines": 70,
        "complexity": 1
      }
    ],
    "tailor_resume_for_job": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self",
          "job"
        ],
        "lines": 19,
        "complexity": 1
      }
    ],
    "_tailor_experience_for_job": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self",
          "job"
        ],
        "lines": 10,
        "complexity": 5
      }
    ],
    "_generate_cover_letter": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self",
          "job"
        ],
        "lines": 20,
        "complexity": 1
      }
    ],
    "create_application_wizard": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 1
      }
    ],
    "run_job_search_automation": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 1
      }
    ],
    "save_job_search_results": [
      {
        "file_path": "scripts/python/alex_ai_job_search_system.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 2
      }
    ],
    "create_yolo_integration_memory": [
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 1
      }
    ],
    "create_crew_specific_memories": [
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [
          "self"
        ],
        "lines": 34,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [
          "self"
        ],
        "lines": 33,
        "complexity": 2
      }
    ],
    "store_memories": [
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 20,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 20,
        "complexity": 2
      }
    ],
    "generate_integration_report": [
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 85,
        "complexity": 5
      },
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [
          "self",
          "memories"
        ],
        "lines": 82,
        "complexity": 5
      }
    ],
    "run_update": [
      {
        "file_path": "scripts/python/yolo_mode_crew_memory_update.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 2
      },
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 2
      }
    ],
    "analyze_youtube_channel": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "channel_url",
          "max_videos",
          "analysis_depth"
        ],
        "lines": 54,
        "complexity": 3
      }
    ],
    "_extract_channel_id": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "channel_url"
        ],
        "lines": 15,
        "complexity": 3
      }
    ],
    "_get_channel_info": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "channel_id"
        ],
        "lines": 23,
        "complexity": 3
      }
    ],
    "_get_channel_videos": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "channel_id",
          "max_videos"
        ],
        "lines": 30,
        "complexity": 5
      }
    ],
    "_analyze_videos_with_crew_specialization": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "videos",
          "analysis_depth"
        ],
        "lines": 29,
        "complexity": 3
      }
    ],
    "_select_relevant_videos": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "videos",
          "keywords",
          "max_videos"
        ],
        "lines": 18,
        "complexity": 3
      }
    ],
    "_analyze_video_for_crew_member": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "video",
          "crew_member",
          "focus_config"
        ],
        "lines": 44,
        "complexity": 3
      }
    ],
    "_generate_crew_specific_insight": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "title",
          "description",
          "crew_member",
          "insight_type"
        ],
        "lines": 25,
        "complexity": 1
      }
    ],
    "_extract_key_concepts": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "limit"
        ],
        "lines": 11,
        "complexity": 3
      }
    ],
    "_extract_leadership_concepts": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "limit"
        ],
        "lines": 5,
        "complexity": 2
      }
    ],
    "_extract_decision_concepts": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "limit"
        ],
        "lines": 5,
        "complexity": 2
      }
    ],
    "_extract_data_concepts": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "limit"
        ],
        "lines": 5,
        "complexity": 2
      }
    ],
    "_extract_analytical_concepts": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "limit"
        ],
        "lines": 5,
        "complexity": 2
      }
    ],
    "_extract_logical_concepts": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "limit"
        ],
        "lines": 5,
        "complexity": 2
      }
    ],
    "_calculate_relevance_score": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "keywords"
        ],
        "lines": 5,
        "complexity": 1
      }
    ],
    "_create_vector_embedding": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "content",
          "dimensions"
        ],
        "lines": 13,
        "complexity": 2
      }
    ],
    "_generate_channel_summary": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "crew_insights",
          "channel_info"
        ],
        "lines": 14,
        "complexity": 1
      }
    ],
    "_extract_key_themes": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "crew_insights"
        ],
        "lines": 11,
        "complexity": 3
      },
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "insights"
        ],
        "lines": 14,
        "complexity": 6
      }
    ],
    "_create_content_vectors": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "crew_insights"
        ],
        "lines": 12,
        "complexity": 3
      }
    ],
    "_store_channel_analysis": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "analysis"
        ],
        "lines": 32,
        "complexity": 3
      }
    ],
    "_store_crew_insights": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "crew_insights",
          "channel_id"
        ],
        "lines": 24,
        "complexity": 4
      }
    ],
    "get_channel_insights_for_crew": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "channel_id",
          "crew_member"
        ],
        "lines": 35,
        "complexity": 4
      }
    ],
    "search_insights_by_vector_similarity": [
      {
        "file_path": "scripts/python/youtube_channel_intelligence_system.py",
        "parameters": [
          "self",
          "query_vector",
          "crew_member",
          "limit"
        ],
        "lines": 7,
        "complexity": 1
      }
    ],
    "create_milestone_package": [
      {
        "file_path": "scripts/python/mcp_memory_optimization_milestone_push.py",
        "parameters": [],
        "lines": 330,
        "complexity": 3
      }
    ],
    "create_crew_memory_sync": [
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [
          "self"
        ],
        "lines": 153,
        "complexity": 1
      }
    ],
    "create_crew_memory_update_script": [
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [
          "self"
        ],
        "lines": 42,
        "complexity": 1
      }
    ],
    "create_crew_coordination_workflow": [
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [
          "self"
        ],
        "lines": 62,
        "complexity": 1
      }
    ],
    "save_crew_memory_sync": [
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [
          "self",
          "crew_sync",
          "update_script",
          "workflow"
        ],
        "lines": 21,
        "complexity": 1
      }
    ],
    "create_crew_sync_report": [
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [
          "self",
          "crew_sync"
        ],
        "lines": 88,
        "complexity": 10
      }
    ],
    "run_crew_memory_sync": [
      {
        "file_path": "scripts/python/crew_yolo_mode_memory_sync.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 1
      }
    ],
    "load_comprehensive_job_data": [
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 249,
        "complexity": 1
      }
    ],
    "load_contact_database": [
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 1
      }
    ],
    "analyze_resume": [
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self",
          "resume_path"
        ],
        "lines": 35,
        "complexity": 2
      }
    ],
    "populate_database": [
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 42,
        "complexity": 3
      }
    ],
    "generate_comprehensive_report": [
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 68,
        "complexity": 2
      }
    ],
    "create_user_interface": [
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 10,
        "complexity": 2
      }
    ],
    "run_integration": [
      {
        "file_path": "scripts/python/alex_ai_job_search_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 31,
        "complexity": 2
      }
    ],
    "run_all_tests": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 31,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 28,
        "complexity": 1
      }
    ],
    "test_channel_id_extraction": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 25,
        "complexity": 5
      }
    ],
    "test_channel_info_retrieval": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 20,
        "complexity": 4
      }
    ],
    "test_crew_specialized_analysis": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 16,
        "complexity": 3
      }
    ],
    "test_cost_optimization": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 20,
        "complexity": 1
      }
    ],
    "test_vector_embedding_generation": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 4
      }
    ],
    "test_full_channel_analysis": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 4
      }
    ],
    "test_crew_collaboration_insights": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 4
      }
    ],
    "test_performance_scalability": [
      {
        "file_path": "scripts/python/test_channel_intelligence_system.py",
        "parameters": [
          "self"
        ],
        "lines": 27,
        "complexity": 3
      }
    ],
    "create_cursor_ai_memory": [
      {
        "file_path": "scripts/python/cursor_ai_integration_memory_update.py",
        "parameters": [
          "self"
        ],
        "lines": 37,
        "complexity": 1
      }
    ],
    "simulate_youtube_analysis": [
      {
        "file_path": "scripts/python/simple_youtube_crew_memory_demo.py",
        "parameters": [
          "self",
          "channel_name"
        ],
        "lines": 65,
        "complexity": 3
      }
    ],
    "run_demo": [
      {
        "file_path": "scripts/python/simple_youtube_crew_memory_demo.py",
        "parameters": [
          "self"
        ],
        "lines": 37,
        "complexity": 3
      }
    ],
    "run_all_stress_tests": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 34,
        "complexity": 4
      }
    ],
    "test_file_creation": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 3
      }
    ],
    "test_directory_operations": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 3
      }
    ],
    "test_code_generation": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 50,
        "complexity": 3
      }
    ],
    "test_git_operations": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 6
      }
    ],
    "test_package_management": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 27,
        "complexity": 6
      }
    ],
    "test_configuration_operations": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 34,
        "complexity": 3
      }
    ],
    "test_memory_system_operations": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 4
      }
    ],
    "test_n8n_workflow_operations": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 4
      }
    ],
    "test_crew_system_operations": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 49,
        "complexity": 5
      }
    ],
    "test_edge_cases": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 27,
        "complexity": 3
      }
    ],
    "generate_stress_test_report": [
      {
        "file_path": "scripts/python/comprehensive_yolo_stress_test.py",
        "parameters": [
          "self"
        ],
        "lines": 55,
        "complexity": 8
      }
    ],
    "_initialize_crew": [
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self"
        ],
        "lines": 64,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 58,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 58,
        "complexity": 1
      }
    ],
    "conduct_yolo_mode_debrief": [
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self"
        ],
        "lines": 34,
        "complexity": 2
      }
    ],
    "_get_crew_insight": [
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self",
          "crew_id",
          "crew_info"
        ],
        "lines": 91,
        "complexity": 1
      }
    ],
    "_generate_consensus": [
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self",
          "crew_insights"
        ],
        "lines": 47,
        "complexity": 12
      }
    ],
    "_generate_recommendations": [
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self",
          "crew_insights"
        ],
        "lines": 41,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "synthesis",
          "crew_insights"
        ],
        "lines": 25,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_comprehensive_assessment.py",
        "parameters": [
          "self",
          "memory_assessment",
          "crew_analysis"
        ],
        "lines": 46,
        "complexity": 5
      }
    ],
    "_store_debrief_session": [
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self",
          "debrief_session"
        ],
        "lines": 9,
        "complexity": 1
      }
    ],
    "generate_debrief_report": [
      {
        "file_path": "scripts/python/observation_lounge_yolo_mode_debrief.py",
        "parameters": [
          "self",
          "debrief_session"
        ],
        "lines": 72,
        "complexity": 7
      }
    ],
    "create_research_plan": [
      {
        "file_path": "scripts/python/knowledge_gap_research_plan.py",
        "parameters": [],
        "lines": 243,
        "complexity": 1
      }
    ],
    "_hash_based_embedding": [
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self",
          "text"
        ],
        "lines": 15,
        "complexity": 4
      }
    ],
    "create_memory_clusters": [
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self"
        ],
        "lines": 45,
        "complexity": 5
      }
    ],
    "load_memories_from_supabase": [
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self"
        ],
        "lines": 38,
        "complexity": 5
      }
    ],
    "save_optimized_memories_to_supabase": [
      {
        "file_path": "scripts/python/mcp_memory_optimization_system.py",
        "parameters": [
          "self"
        ],
        "lines": 35,
        "complexity": 4
      }
    ],
    "generate_execution_plan": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 61,
        "complexity": 4
      }
    ],
    "_generate_phase_tasks": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self",
          "phase_id",
          "phase_config"
        ],
        "lines": 116,
        "complexity": 5
      }
    ],
    "_generate_phase_milestones": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self",
          "phase_id",
          "phase_config"
        ],
        "lines": 78,
        "complexity": 5
      }
    ],
    "_generate_success_criteria": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self",
          "phase_id",
          "phase_config"
        ],
        "lines": 36,
        "complexity": 5
      }
    ],
    "_generate_overall_deliverables": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 46,
        "complexity": 1
      }
    ],
    "_generate_success_metrics": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 28,
        "complexity": 1
      }
    ],
    "_generate_risk_mitigation": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 24,
        "complexity": 1
      }
    ],
    "_generate_next_steps": [
      {
        "file_path": "scripts/python/research_phase_execution_plan.py",
        "parameters": [
          "self"
        ],
        "lines": 12,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/alex_ai_comprehensive_assessment.py",
        "parameters": [
          "self",
          "memory_assessment",
          "crew_analysis"
        ],
        "lines": 37,
        "complexity": 1
      }
    ],
    "analyze_large_files": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 58,
        "complexity": 12
      }
    ],
    "_categorize_file": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "filepath"
        ],
        "lines": 16,
        "complexity": 9
      }
    ],
    "_get_directory_reason": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "pattern"
        ],
        "lines": 11,
        "complexity": 1
      }
    ],
    "convene_observation_lounge": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "analysis_data"
        ],
        "lines": 35,
        "complexity": 1
      }
    ],
    "_captain_picard_analysis": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 11,
        "complexity": 3
      }
    ],
    "_commander_data_analysis": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 12,
        "complexity": 3
      }
    ],
    "_lt_la_forge_analysis": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 6,
        "complexity": 1
      }
    ],
    "_dr_crusher_analysis": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 6,
        "complexity": 1
      }
    ],
    "_counselor_troi_analysis": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 15,
        "complexity": 3
      }
    ],
    "create_optimization_plan": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "analysis_data",
          "crew_insights"
        ],
        "lines": 52,
        "complexity": 10
      }
    ],
    "execute_optimization_plan": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self",
          "plan"
        ],
        "lines": 42,
        "complexity": 10
      }
    ],
    "run_complete_optimization": [
      {
        "file_path": "scripts/python/repository_optimization_analysis.py",
        "parameters": [
          "self"
        ],
        "lines": 40,
        "complexity": 1
      }
    ],
    "generate_llc_setup_plan": [
      {
        "file_path": "scripts/python/business_operations_legal_system.py",
        "parameters": [
          "self",
          "business_name",
          "state"
        ],
        "lines": 73,
        "complexity": 3
      }
    ],
    "generate_payment_integration_plan": [
      {
        "file_path": "scripts/python/business_operations_legal_system.py",
        "parameters": [
          "self",
          "target_markets"
        ],
        "lines": 65,
        "complexity": 6
      }
    ],
    "generate_business_model_analysis": [
      {
        "file_path": "scripts/python/business_operations_legal_system.py",
        "parameters": [
          "self",
          "target_markets"
        ],
        "lines": 83,
        "complexity": 5
      }
    ],
    "generate_comprehensive_business_plan": [
      {
        "file_path": "scripts/python/business_operations_legal_system.py",
        "parameters": [
          "self",
          "business_name",
          "target_markets"
        ],
        "lines": 31,
        "complexity": 1
      }
    ],
    "develop_capabilities": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self"
        ],
        "lines": 32,
        "complexity": 1
      }
    ],
    "learn_from_interactions": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self",
          "interaction_data"
        ],
        "lines": 22,
        "complexity": 4
      }
    ],
    "execute_advanced_task": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self",
          "task"
        ],
        "lines": 47,
        "complexity": 4
      }
    ],
    "initialize_enhanced_prompts": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self"
        ],
        "lines": 8,
        "complexity": 2
      }
    ],
    "create_advanced_agents": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 3
      }
    ],
    "orchestrate_advanced_workflow": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self",
          "workflow_type"
        ],
        "lines": 89,
        "complexity": 16
      }
    ],
    "develop_self_improving_capabilities": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self"
        ],
        "lines": 46,
        "complexity": 2
      }
    ],
    "create_advanced_agent_system": [
      {
        "file_path": "scripts/python/advanced_ai_agent_development_system.py",
        "parameters": [
          "self"
        ],
        "lines": 52,
        "complexity": 4
      }
    ],
    "_load_turborepo_knowledge": [
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 54,
        "complexity": 1
      }
    ],
    "analyze_for_crew_member": [
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [
          "self",
          "crew_member"
        ],
        "lines": 239,
        "complexity": 10
      },
      {
        "file_path": "scripts/python/turborepo_research_system.py",
        "parameters": [
          "self",
          "crew_member",
          "data"
        ],
        "lines": 131,
        "complexity": 30
      }
    ],
    "conduct_crew_research": [
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 11,
        "complexity": 2
      }
    ],
    "generate_research_report": [
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 130,
        "complexity": 9
      },
      {
        "file_path": "scripts/python/turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 78,
        "complexity": 12
      }
    ],
    "save_research_data": [
      {
        "file_path": "scripts/python/simple_turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 28,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/turborepo_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 29,
        "complexity": 1
      }
    ],
    "create_sprint": [
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [
          "self",
          "project_id",
          "sprint_number"
        ],
        "lines": 65,
        "complexity": 2
      }
    ],
    "_generate_sprint_tasks": [
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [
          "self",
          "sprint",
          "project"
        ],
        "lines": 62,
        "complexity": 2
      }
    ],
    "_assign_crew_to_tasks": [
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [
          "self",
          "tasks",
          "crew_assignments"
        ],
        "lines": 25,
        "complexity": 16
      }
    ],
    "update_sprint_progress": [
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [
          "self",
          "sprint_id",
          "phase",
          "task",
          "status"
        ],
        "lines": 12,
        "complexity": 1
      }
    ],
    "generate_sprint_dashboard": [
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [
          "self",
          "project_id"
        ],
        "lines": 46,
        "complexity": 3
      }
    ],
    "generate_multi_project_dashboard": [
      {
        "file_path": "scripts/python/agile_sprint_dashboard_system.py",
        "parameters": [
          "self"
        ],
        "lines": 68,
        "complexity": 3
      }
    ],
    "test_crew_member_listing": [
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 34,
        "complexity": 4
      }
    ],
    "test_single_video_analysis": [
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 40,
        "complexity": 3
      }
    ],
    "test_batch_video_analysis": [
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 3
      }
    ],
    "test_invalid_url_handling": [
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 4
      }
    ],
    "test_duplicate_processing_prevention": [
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 43,
        "complexity": 5
      }
    ],
    "test_analysis_history_retrieval": [
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 32,
        "complexity": 3
      }
    ],
    "test_crew_member_perspectives": [
      {
        "file_path": "scripts/python/test_youtube_scraper_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 31,
        "complexity": 4
      }
    ],
    "simulate_crew_consensus": [
      {
        "file_path": "scripts/python/crew_business_readiness_consensus.py",
        "parameters": [],
        "lines": 271,
        "complexity": 1
      }
    ],
    "coordinate_observation_lounge": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "session_data"
        ],
        "lines": 47,
        "complexity": 3
      }
    ],
    "_handle_youtube_analysis_request": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "session_data"
        ],
        "lines": 51,
        "complexity": 4
      }
    ],
    "_select_crew_members": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "crew_selection",
          "discussion_type"
        ],
        "lines": 16,
        "complexity": 6
      }
    ],
    "_conduct_crew_session": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "topic",
          "selected_crew",
          "method"
        ],
        "lines": 28,
        "complexity": 3
      }
    ],
    "_get_crew_member_insight": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "topic",
          "crew_member",
          "method"
        ],
        "lines": 29,
        "complexity": 4
      }
    ],
    "_synthesize_crew_insights": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "crew_insights",
          "topic"
        ],
        "lines": 22,
        "complexity": 2
      }
    ],
    "_identify_consensus": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "insights"
        ],
        "lines": 7,
        "complexity": 1
      }
    ],
    "_identify_divergence": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "insights"
        ],
        "lines": 6,
        "complexity": 1
      }
    ],
    "_generate_next_actions": [
      {
        "file_path": "scripts/python/crew_coordinator.py",
        "parameters": [
          "self",
          "synthesis",
          "crew_insights"
        ],
        "lines": 22,
        "complexity": 1
      }
    ],
    "integrate_crew_coordination": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 161,
        "complexity": 1
      }
    ],
    "setup_n8n_workflows": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 60,
        "complexity": 1
      }
    ],
    "configure_mcp_tools_sharing": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 107,
        "complexity": 1
      }
    ],
    "implement_memory_optimization": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 1
      }
    ],
    "configure_deployment_pipelines": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 68,
        "complexity": 1
      }
    ],
    "create_monitoring_alerting": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 129,
        "complexity": 1
      }
    ],
    "test_integrations": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 4
      }
    ],
    "generate_phase3_report": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 62,
        "complexity": 5
      }
    ],
    "execute_phase3": [
      {
        "file_path": "scripts/python/phase3_alex_ai_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 36,
        "complexity": 5
      }
    ],
    "create_yolo_mode_memory": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 128,
        "complexity": 1
      }
    ],
    "create_babysitting_warning_engine": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 76,
        "complexity": 1
      }
    ],
    "analyze_prompt_for_babysitting": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [
          "self",
          "prompt"
        ],
        "lines": 78,
        "complexity": 14
      }
    ],
    "save_memory_integration": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [
          "self",
          "memory",
          "warning_engine"
        ],
        "lines": 15,
        "complexity": 1
      }
    ],
    "create_supabase_memory_update": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [
          "self",
          "memory"
        ],
        "lines": 64,
        "complexity": 1
      }
    ],
    "run_memory_integration": [
      {
        "file_path": "scripts/python/alex_ai_yolo_mode_memory_integration.py",
        "parameters": [
          "self"
        ],
        "lines": 49,
        "complexity": 2
      }
    ],
    "_matches_criteria": [
      {
        "file_path": "scripts/python/mcp_integration_system.py",
        "parameters": [
          "self",
          "memory",
          "project_id",
          "crew_member",
          "memory_type"
        ],
        "lines": 10,
        "complexity": 7
      }
    ],
    "_determine_correlation_type": [
      {
        "file_path": "scripts/python/mcp_integration_system.py",
        "parameters": [
          "self",
          "memory1",
          "memory2"
        ],
        "lines": 8,
        "complexity": 3
      }
    ],
    "_convert_to_csv": [
      {
        "file_path": "scripts/python/mcp_integration_system.py",
        "parameters": [
          "self",
          "memories_data"
        ],
        "lines": 28,
        "complexity": 8
      }
    ],
    "load_data_file": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 12,
        "complexity": 3
      }
    ],
    "transform_market_research_data": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 25,
        "complexity": 3
      }
    ],
    "transform_business_models_data": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 28,
        "complexity": 3
      }
    ],
    "transform_execution_plans_data": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 22,
        "complexity": 1
      }
    ],
    "transform_agile_projects_data": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 26,
        "complexity": 3
      }
    ],
    "transform_business_operations_data": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 22,
        "complexity": 1
      }
    ],
    "transform_knowledge_base_data": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "data"
        ],
        "lines": 56,
        "complexity": 5
      }
    ],
    "generate_import_data": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self"
        ],
        "lines": 36,
        "complexity": 10
      }
    ],
    "generate_supabase_import_script": [
      {
        "file_path": "scripts/python/supabase_data_import_script.py",
        "parameters": [
          "self",
          "import_data"
        ],
        "lines": 45,
        "complexity": 9
      }
    ],
    "get_crew_memories": [
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [
          "self",
          "crew_member"
        ],
        "lines": 19,
        "complexity": 3
      }
    ],
    "get_system_wide_memories": [
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [
          "self"
        ],
        "lines": 19,
        "complexity": 3
      }
    ],
    "simulate_crew_member_reflection": [
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [
          "self",
          "crew_member",
          "personal_memories",
          "system_memories"
        ],
        "lines": 70,
        "complexity": 19
      }
    ],
    "run_observation_lounge_session": [
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [
          "self"
        ],
        "lines": 32,
        "complexity": 2
      }
    ],
    "generate_consensus": [
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [
          "self",
          "crew_reflections"
        ],
        "lines": 86,
        "complexity": 7
      }
    ],
    "print_observation_lounge_report": [
      {
        "file_path": "scripts/python/observation_lounge_memory_consensus.py",
        "parameters": [
          "self",
          "session"
        ],
        "lines": 48,
        "complexity": 11
      }
    ],
    "test_job_search_system": [
      {
        "file_path": "scripts/python/test_alex_ai_system.py",
        "parameters": [],
        "lines": 22,
        "complexity": 2
      }
    ],
    "test_crew_coordinator": [
      {
        "file_path": "scripts/python/test_alex_ai_system.py",
        "parameters": [],
        "lines": 30,
        "complexity": 2
      }
    ],
    "test_enhanced_router": [
      {
        "file_path": "scripts/python/test_alex_ai_system.py",
        "parameters": [],
        "lines": 27,
        "complexity": 2
      }
    ],
    "research_company_emails": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "company_name"
        ],
        "lines": 29,
        "complexity": 2
      }
    ],
    "_research_hr_emails": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 31,
        "complexity": 3
      }
    ],
    "_research_hiring_manager_emails": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 51,
        "complexity": 3
      }
    ],
    "_research_application_emails": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 24,
        "complexity": 2
      }
    ],
    "_research_contact_emails": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 23,
        "complexity": 2
      }
    ],
    "generate_email_recommendations": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "company_name",
          "research_data"
        ],
        "lines": 35,
        "complexity": 9
      }
    ],
    "_generate_outreach_strategy": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "company_name",
          "recommendations"
        ],
        "lines": 60,
        "complexity": 4
      }
    ],
    "run_comprehensive_research": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 20,
        "complexity": 2
      }
    ],
    "save_results": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self",
          "filename"
        ],
        "lines": 5,
        "complexity": 1
      },
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "filename"
        ],
        "lines": 5,
        "complexity": 1
      }
    ],
    "generate_email_database": [
      {
        "file_path": "scripts/python/email_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 25,
        "complexity": 2
      }
    ],
    "check_current_credentials": [
      {
        "file_path": "scripts/python/fix_credential_security.py",
        "parameters": [],
        "lines": 23,
        "complexity": 3
      }
    ],
    "create_anthropic_key_prompt": [
      {
        "file_path": "scripts/python/fix_credential_security.py",
        "parameters": [],
        "lines": 16,
        "complexity": 1
      }
    ],
    "create_secure_credential_loader": [
      {
        "file_path": "scripts/python/fix_credential_security.py",
        "parameters": [],
        "lines": 35,
        "complexity": 1
      }
    ],
    "create_crew_memory_about_fix": [
      {
        "file_path": "scripts/python/fix_credential_security.py",
        "parameters": [],
        "lines": 40,
        "complexity": 5
      }
    ],
    "create_push_step": [
      {
        "file_path": "scripts/python/progressive_git_push_system.py",
        "parameters": [
          "self",
          "step_name",
          "description",
          "files",
          "commit_message"
        ],
        "lines": 13,
        "complexity": 1
      }
    ],
    "execute_push_step": [
      {
        "file_path": "scripts/python/progressive_git_push_system.py",
        "parameters": [
          "self",
          "step_number"
        ],
        "lines": 41,
        "complexity": 7
      }
    ],
    "create_alex_ai_progressive_steps": [
      {
        "file_path": "scripts/python/progressive_git_push_system.py",
        "parameters": [
          "self"
        ],
        "lines": 72,
        "complexity": 1
      }
    ],
    "run_progressive_push": [
      {
        "file_path": "scripts/python/progressive_git_push_system.py",
        "parameters": [
          "self",
          "start_step",
          "end_step"
        ],
        "lines": 44,
        "complexity": 6
      }
    ],
    "print_progressive_report": [
      {
        "file_path": "scripts/python/progressive_git_push_system.py",
        "parameters": [
          "self",
          "results"
        ],
        "lines": 33,
        "complexity": 4
      }
    ],
    "investigate_package_management_issue": [
      {
        "file_path": "scripts/python/yolo_mode_issue_investigation.py",
        "parameters": [
          "self"
        ],
        "lines": 68,
        "complexity": 12
      }
    ],
    "investigate_error_handling_issue": [
      {
        "file_path": "scripts/python/yolo_mode_issue_investigation.py",
        "parameters": [
          "self"
        ],
        "lines": 50,
        "complexity": 7
      }
    ],
    "generate_investigation_report": [
      {
        "file_path": "scripts/python/yolo_mode_issue_investigation.py",
        "parameters": [
          "self"
        ],
        "lines": 41,
        "complexity": 3
      }
    ],
    "run_investigation": [
      {
        "file_path": "scripts/python/yolo_mode_issue_investigation.py",
        "parameters": [
          "self"
        ],
        "lines": 14,
        "complexity": 1
      }
    ],
    "query_mcp_library": [
      {
        "file_path": "scripts/python/mcp_library_computer_system.py",
        "parameters": [
          "self",
          "crew_member",
          "query"
        ],
        "lines": 51,
        "complexity": 3
      }
    ],
    "create_crew_knowledge_memory": [
      {
        "file_path": "scripts/python/mcp_library_computer_system.py",
        "parameters": [
          "self",
          "crew_member",
          "knowledge_data"
        ],
        "lines": 34,
        "complexity": 3
      }
    ],
    "update_crew_specialization": [
      {
        "file_path": "scripts/python/mcp_library_computer_system.py",
        "parameters": [
          "self",
          "crew_member",
          "new_knowledge"
        ],
        "lines": 33,
        "complexity": 3
      }
    ],
    "run_knowledge_distribution_cycle": [
      {
        "file_path": "scripts/python/mcp_library_computer_system.py",
        "parameters": [
          "self"
        ],
        "lines": 67,
        "complexity": 7
      }
    ],
    "print_distribution_report": [
      {
        "file_path": "scripts/python/mcp_library_computer_system.py",
        "parameters": [
          "self",
          "results"
        ],
        "lines": 39,
        "complexity": 6
      }
    ],
    "install_turborepo": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 84,
        "complexity": 6
      }
    ],
    "setup_workspace_structure": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 22,
        "complexity": 5
      }
    ],
    "create_turbo_config": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 39,
        "complexity": 1
      }
    ],
    "migrate_existing_apps": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 45,
        "complexity": 13
      }
    ],
    "setup_shared_packages": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 107,
        "complexity": 3
      }
    ],
    "configure_basic_tasks": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 46,
        "complexity": 1
      }
    ],
    "test_turborepo_functionality": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 4
      }
    ],
    "generate_phase1_report": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 74,
        "complexity": 5
      }
    ],
    "execute_phase1": [
      {
        "file_path": "scripts/python/phase1_turborepo_setup.py",
        "parameters": [
          "self"
        ],
        "lines": 35,
        "complexity": 5
      }
    ],
    "load_workflow_tests": [
      {
        "file_path": "scripts/python/n8n_integration_test_system.py",
        "parameters": [
          "self"
        ],
        "lines": 53,
        "complexity": 1
      }
    ],
    "test_crew_memory_synchronization": [
      {
        "file_path": "scripts/python/n8n_integration_test_system.py",
        "parameters": [
          "self"
        ],
        "lines": 64,
        "complexity": 6
      }
    ],
    "run_comprehensive_test": [
      {
        "file_path": "scripts/python/n8n_integration_test_system.py",
        "parameters": [
          "self"
        ],
        "lines": 57,
        "complexity": 4
      }
    ],
    "save_test_results": [
      {
        "file_path": "scripts/python/n8n_integration_test_system.py",
        "parameters": [
          "self",
          "results"
        ],
        "lines": 9,
        "complexity": 1
      }
    ],
    "create_proper_yolo_config": [
      {
        "file_path": "scripts/python/proper_yolo_mode_configuration.py",
        "parameters": [
          "self"
        ],
        "lines": 119,
        "complexity": 1
      }
    ],
    "save_configuration": [
      {
        "file_path": "scripts/python/proper_yolo_mode_configuration.py",
        "parameters": [
          "self",
          "config"
        ],
        "lines": 9,
        "complexity": 1
      }
    ],
    "create_cursor_rules_file": [
      {
        "file_path": "scripts/python/proper_yolo_mode_configuration.py",
        "parameters": [
          "self"
        ],
        "lines": 45,
        "complexity": 1
      }
    ],
    "generate_configuration_report": [
      {
        "file_path": "scripts/python/proper_yolo_mode_configuration.py",
        "parameters": [
          "self",
          "config"
        ],
        "lines": 86,
        "complexity": 1
      }
    ],
    "run_proper_configuration": [
      {
        "file_path": "scripts/python/proper_yolo_mode_configuration.py",
        "parameters": [
          "self"
        ],
        "lines": 25,
        "complexity": 1
      }
    ],
    "safe_remove_directory": [
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "dir_path",
          "reason"
        ],
        "lines": 14,
        "complexity": 3
      }
    ],
    "consolidate_similar_scripts": [
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "script_groups"
        ],
        "lines": 62,
        "complexity": 8
      }
    ],
    "archive_milestone_packages": [
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "milestone_dirs"
        ],
        "lines": 27,
        "complexity": 3
      }
    ],
    "remove_duplicate_files": [
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "duplicate_groups"
        ],
        "lines": 41,
        "complexity": 11
      }
    ],
    "run_intelligent_cleanup": [
      {
        "file_path": "scripts/python/intelligent_monorepo_cleanup.py",
        "parameters": [
          "self",
          "analysis_file"
        ],
        "lines": 70,
        "complexity": 4
      }
    ],
    "scrape_company_info": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "company"
        ],
        "lines": 30,
        "complexity": 2
      }
    ],
    "_scrape_main_website": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "company"
        ],
        "lines": 23,
        "complexity": 2
      }
    ],
    "_scrape_careers_page": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "company"
        ],
        "lines": 23,
        "complexity": 2
      }
    ],
    "_scrape_linkedin_info": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "company"
        ],
        "lines": 11,
        "complexity": 1
      }
    ],
    "_extract_leadership_info": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "soup"
        ],
        "lines": 28,
        "complexity": 6
      }
    ],
    "_extract_company_description": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "soup"
        ],
        "lines": 21,
        "complexity": 4
      }
    ],
    "_extract_contact_info": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "soup"
        ],
        "lines": 17,
        "complexity": 3
      }
    ],
    "_extract_job_openings": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "soup"
        ],
        "lines": 26,
        "complexity": 4
      }
    ],
    "_extract_hiring_team": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "soup"
        ],
        "lines": 26,
        "complexity": 6
      }
    ],
    "_extract_application_process": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "soup"
        ],
        "lines": 18,
        "complexity": 3
      }
    ],
    "generate_mermaid_org_chart": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self",
          "company_data"
        ],
        "lines": 20,
        "complexity": 3
      }
    ],
    "run_research": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 17,
        "complexity": 2
      }
    ],
    "generate_contact_database": [
      {
        "file_path": "scripts/python/company_research_system.py",
        "parameters": [
          "self"
        ],
        "lines": 46,
        "complexity": 6
      }
    ],
    "validate_universal_package": [
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [
          "self"
        ],
        "lines": 64,
        "complexity": 5
      }
    ],
    "validate_alex_ai_core": [
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [
          "self"
        ],
        "lines": 59,
        "complexity": 8
      }
    ],
    "create_deployment_manifest": [
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [
          "self"
        ],
        "lines": 74,
        "complexity": 1
      }
    ],
    "simulate_cross_project_deployment": [
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [
          "self"
        ],
        "lines": 111,
        "complexity": 3
      }
    ],
    "create_deployment_summary": [
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [
          "self",
          "validation_results",
          "deployment_manifest",
          "deployment_results"
        ],
        "lines": 37,
        "complexity": 1
      }
    ],
    "execute_universal_deployment": [
      {
        "file_path": "scripts/python/alex-ai-universal-deployment-system.py",
        "parameters": [
          "self"
        ],
        "lines": 44,
        "complexity": 1
      }
    ],
    "_assess_overall_health": [
      {
        "file_path": "scripts/python/alex_ai_comprehensive_assessment.py",
        "parameters": [
          "self",
          "memory_assessment",
          "crew_analysis"
        ],
        "lines": 30,
        "complexity": 4
      }
    ],
    "print_comprehensive_report": [
      {
        "file_path": "scripts/python/alex_ai_comprehensive_assessment.py",
        "parameters": [
          "self",
          "assessment"
        ],
        "lines": 48,
        "complexity": 4
      }
    ],
    "simulate_business_readiness_assessment": [
      {
        "file_path": "scripts/python/business_readiness_assessment.py",
        "parameters": [],
        "lines": 353,
        "complexity": 1
      }
    ],
    "run_complete_demo": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 22,
        "complexity": 1
      }
    ],
    "demo_crew_member_listing": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 21,
        "complexity": 3
      }
    ],
    "demo_individual_crew_analysis": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 30,
        "complexity": 4
      }
    ],
    "demo_crew_coordination_analysis": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 36,
        "complexity": 3
      }
    ],
    "demo_batch_analysis_perspectives": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 34,
        "complexity": 3
      }
    ],
    "demo_analysis_history": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 25,
        "complexity": 4
      }
    ],
    "interactive_demo": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 32,
        "complexity": 7
      }
    ],
    "interactive_single_analysis": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 36,
        "complexity": 6
      }
    ],
    "interactive_batch_analysis": [
      {
        "file_path": "scripts/python/demo_youtube_scraper_system.py",
        "parameters": [
          "self"
        ],
        "lines": 45,
        "complexity": 8
      }
    ],
    "clean_file": [
      {
        "file_path": "scripts/python/clean_secrets.py",
        "parameters": [
          "self",
          "file_path"
        ],
        "lines": 30,
        "complexity": 4
      }
    ],
    "find_files_with_secrets": [
      {
        "file_path": "scripts/python/clean_secrets.py",
        "parameters": [
          "self"
        ],
        "lines": 27,
        "complexity": 8
      }
    ],
    "clean_all_secrets": [
      {
        "file_path": "scripts/python/clean_secrets.py",
        "parameters": [
          "self"
        ],
        "lines": 14,
        "complexity": 3
      }
    ]
  }
}