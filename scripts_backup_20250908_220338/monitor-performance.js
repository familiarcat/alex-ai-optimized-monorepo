#!/usr/bin/env node
/**
 * Turborepo Performance Monitoring Script
 * Monitors build performance and generates reports
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class TurborepoPerformanceMonitor {
    constructor() {
        this.metrics = {
            buildTimes: [],
            cacheHits: [],
            cacheMisses: [],
            taskDurations: {}
        };
        this.reportPath = path.join(process.cwd(), 'performance-reports');
    }

    async monitorBuild() {
        console.log('🔍 Starting Turborepo performance monitoring...');
        
        const startTime = Date.now();
        
        try {
            // Run build with detailed output
            const buildOutput = execSync('npx turbo run build --dry-run --graph', {
                encoding: 'utf8',
                cwd: process.cwd()
            });
            
            const endTime = Date.now();
            const duration = endTime - startTime;
            
            // Parse build output for metrics
            const metrics = this.parseBuildOutput(buildOutput);
            metrics.totalDuration = duration;
            
            // Save metrics
            this.saveMetrics(metrics);
            
            // Generate report
            this.generateReport(metrics);
            
            console.log('✅ Performance monitoring complete');
            console.log(`📊 Build duration: ${duration}ms`);
            console.log(`📈 Cache hit rate: ${metrics.cacheHitRate || 'N/A'}%`);
            
        } catch (error) {
            console.error('❌ Performance monitoring failed:', error.message);
        }
    }

    parseBuildOutput(output) {
        const metrics = {
            totalDuration: 0,
            cacheHitRate: 0,
            tasks: [],
            cacheHits: 0,
            cacheMisses: 0
        };

        // Parse cache information
        const cacheHitMatches = output.match(/Cached \(Local\)\s*=\s*true/g);
        const cacheMissMatches = output.match(/Cached \(Local\)\s*=\s*false/g);
        
        if (cacheHitMatches) metrics.cacheHits = cacheHitMatches.length;
        if (cacheMissMatches) metrics.cacheMisses = cacheMissMatches.length;
        
        const totalCacheOperations = metrics.cacheHits + metrics.cacheMisses;
        if (totalCacheOperations > 0) {
            metrics.cacheHitRate = Math.round((metrics.cacheHits / totalCacheOperations) * 100);
        }

        return metrics;
    }

    saveMetrics(metrics) {
        // Ensure reports directory exists
        if (!fs.existsSync(this.reportPath)) {
            fs.mkdirSync(this.reportPath, { recursive: true });
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const metricsFile = path.join(this.reportPath, `metrics-${timestamp}.json`);
        
        fs.writeFileSync(metricsFile, JSON.stringify(metrics, null, 2));
        console.log(`💾 Metrics saved to: ${metricsFile}`);
    }

    generateReport(metrics) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const reportFile = path.join(this.reportPath, `report-${timestamp}.md`);
        
        const report = `# Turborepo Performance Report

**Generated**: ${new Date().toISOString()}

## 📊 Performance Metrics

- **Total Build Duration**: ${metrics.totalDuration}ms
- **Cache Hit Rate**: ${metrics.cacheHitRate}%
- **Cache Hits**: ${metrics.cacheHits}
- **Cache Misses**: ${metrics.cacheMisses}

## 🎯 Recommendations

${this.generateRecommendations(metrics)}

## 📈 Performance Trends

Monitor these metrics over time to identify optimization opportunities.

---
*Report generated by Turborepo Performance Monitor*
`;

        fs.writeFileSync(reportFile, report);
        console.log(`📄 Report generated: ${reportFile}`);
    }

    generateRecommendations(metrics) {
        const recommendations = [];

        if (metrics.cacheHitRate < 50) {
            recommendations.push('- Consider optimizing cache configuration for better hit rates');
        }

        if (metrics.totalDuration > 30000) {
            recommendations.push('- Build duration is high, consider parallel task optimization');
        }

        if (metrics.cacheMisses > metrics.cacheHits) {
            recommendations.push('- High cache miss rate, review input file patterns');
        }

        if (recommendations.length === 0) {
            recommendations.push('- Performance looks good! Continue monitoring for trends.');
        }

        return recommendations.join('\n');
    }
}

// Run monitoring if called directly
if (require.main === module) {
    const monitor = new TurborepoPerformanceMonitor();
    monitor.monitorBuild().catch(console.error);
}

module.exports = TurborepoPerformanceMonitor;
